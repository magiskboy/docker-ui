/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const VolumesIndexLazyImport = createFileRoute('/volumes/')()
const NetworksIndexLazyImport = createFileRoute('/networks/')()
const ImagesIndexLazyImport = createFileRoute('/images/')()
const ContainersIndexLazyImport = createFileRoute('/containers/')()
const NetworksNameLazyImport = createFileRoute('/networks/$name')()
const ImagesImageNameLazyImport = createFileRoute('/images/$imageName')()
const ContainersContainerIdLazyImport = createFileRoute(
  '/containers/$containerId',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const VolumesIndexLazyRoute = VolumesIndexLazyImport.update({
  id: '/volumes/',
  path: '/volumes/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/volumes/index.lazy').then((d) => d.Route))

const NetworksIndexLazyRoute = NetworksIndexLazyImport.update({
  id: '/networks/',
  path: '/networks/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/networks/index.lazy').then((d) => d.Route),
)

const ImagesIndexLazyRoute = ImagesIndexLazyImport.update({
  id: '/images/',
  path: '/images/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/images/index.lazy').then((d) => d.Route))

const ContainersIndexLazyRoute = ContainersIndexLazyImport.update({
  id: '/containers/',
  path: '/containers/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/containers/index.lazy').then((d) => d.Route),
)

const NetworksNameLazyRoute = NetworksNameLazyImport.update({
  id: '/networks/$name',
  path: '/networks/$name',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/networks/$name.lazy').then((d) => d.Route),
)

const ImagesImageNameLazyRoute = ImagesImageNameLazyImport.update({
  id: '/images/$imageName',
  path: '/images/$imageName',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/images/$imageName.lazy').then((d) => d.Route),
)

const ContainersContainerIdLazyRoute = ContainersContainerIdLazyImport.update({
  id: '/containers/$containerId',
  path: '/containers/$containerId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/containers/$containerId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/containers/$containerId': {
      id: '/containers/$containerId'
      path: '/containers/$containerId'
      fullPath: '/containers/$containerId'
      preLoaderRoute: typeof ContainersContainerIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/images/$imageName': {
      id: '/images/$imageName'
      path: '/images/$imageName'
      fullPath: '/images/$imageName'
      preLoaderRoute: typeof ImagesImageNameLazyImport
      parentRoute: typeof rootRoute
    }
    '/networks/$name': {
      id: '/networks/$name'
      path: '/networks/$name'
      fullPath: '/networks/$name'
      preLoaderRoute: typeof NetworksNameLazyImport
      parentRoute: typeof rootRoute
    }
    '/containers/': {
      id: '/containers/'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/images/': {
      id: '/images/'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/networks/': {
      id: '/networks/'
      path: '/networks'
      fullPath: '/networks'
      preLoaderRoute: typeof NetworksIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/volumes/': {
      id: '/volumes/'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof VolumesIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/containers/$containerId': typeof ContainersContainerIdLazyRoute
  '/images/$imageName': typeof ImagesImageNameLazyRoute
  '/networks/$name': typeof NetworksNameLazyRoute
  '/containers': typeof ContainersIndexLazyRoute
  '/images': typeof ImagesIndexLazyRoute
  '/networks': typeof NetworksIndexLazyRoute
  '/volumes': typeof VolumesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/containers/$containerId': typeof ContainersContainerIdLazyRoute
  '/images/$imageName': typeof ImagesImageNameLazyRoute
  '/networks/$name': typeof NetworksNameLazyRoute
  '/containers': typeof ContainersIndexLazyRoute
  '/images': typeof ImagesIndexLazyRoute
  '/networks': typeof NetworksIndexLazyRoute
  '/volumes': typeof VolumesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/containers/$containerId': typeof ContainersContainerIdLazyRoute
  '/images/$imageName': typeof ImagesImageNameLazyRoute
  '/networks/$name': typeof NetworksNameLazyRoute
  '/containers/': typeof ContainersIndexLazyRoute
  '/images/': typeof ImagesIndexLazyRoute
  '/networks/': typeof NetworksIndexLazyRoute
  '/volumes/': typeof VolumesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/containers/$containerId'
    | '/images/$imageName'
    | '/networks/$name'
    | '/containers'
    | '/images'
    | '/networks'
    | '/volumes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/containers/$containerId'
    | '/images/$imageName'
    | '/networks/$name'
    | '/containers'
    | '/images'
    | '/networks'
    | '/volumes'
  id:
    | '__root__'
    | '/'
    | '/containers/$containerId'
    | '/images/$imageName'
    | '/networks/$name'
    | '/containers/'
    | '/images/'
    | '/networks/'
    | '/volumes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContainersContainerIdLazyRoute: typeof ContainersContainerIdLazyRoute
  ImagesImageNameLazyRoute: typeof ImagesImageNameLazyRoute
  NetworksNameLazyRoute: typeof NetworksNameLazyRoute
  ContainersIndexLazyRoute: typeof ContainersIndexLazyRoute
  ImagesIndexLazyRoute: typeof ImagesIndexLazyRoute
  NetworksIndexLazyRoute: typeof NetworksIndexLazyRoute
  VolumesIndexLazyRoute: typeof VolumesIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContainersContainerIdLazyRoute: ContainersContainerIdLazyRoute,
  ImagesImageNameLazyRoute: ImagesImageNameLazyRoute,
  NetworksNameLazyRoute: NetworksNameLazyRoute,
  ContainersIndexLazyRoute: ContainersIndexLazyRoute,
  ImagesIndexLazyRoute: ImagesIndexLazyRoute,
  NetworksIndexLazyRoute: NetworksIndexLazyRoute,
  VolumesIndexLazyRoute: VolumesIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/containers/$containerId",
        "/images/$imageName",
        "/networks/$name",
        "/containers/",
        "/images/",
        "/networks/",
        "/volumes/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/containers/$containerId": {
      "filePath": "containers/$containerId.lazy.tsx"
    },
    "/images/$imageName": {
      "filePath": "images/$imageName.lazy.tsx"
    },
    "/networks/$name": {
      "filePath": "networks/$name.lazy.tsx"
    },
    "/containers/": {
      "filePath": "containers/index.lazy.tsx"
    },
    "/images/": {
      "filePath": "images/index.lazy.tsx"
    },
    "/networks/": {
      "filePath": "networks/index.lazy.tsx"
    },
    "/volumes/": {
      "filePath": "volumes/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
