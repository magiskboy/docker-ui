/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.45) is used. For example, calling `/info` is the same as calling `/v1.45/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.45
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Address represents an IPv4 or IPv6 IP address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * IP address.
     * @type {string}
     * @memberof Address
     */
    'Addr'?: string;
    /**
     * Mask length of the IP address.
     * @type {number}
     * @memberof Address
     */
    'PrefixLen'?: number;
}
/**
 * 
 * @export
 * @interface AuthConfig
 */
export interface AuthConfig {
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    'serveraddress'?: string;
}
/**
 * BuildCache contains information about a build cache record. 
 * @export
 * @interface BuildCache
 */
export interface BuildCache {
    /**
     * Unique ID of the build cache record. 
     * @type {string}
     * @memberof BuildCache
     */
    'ID'?: string;
    /**
     * ID of the parent build cache record.  > **Deprecated**: This field is deprecated, and omitted if empty. 
     * @type {string}
     * @memberof BuildCache
     */
    'Parent'?: string | null;
    /**
     * List of parent build cache record IDs. 
     * @type {Array<string>}
     * @memberof BuildCache
     */
    'Parents'?: Array<string> | null;
    /**
     * Cache record type. 
     * @type {string}
     * @memberof BuildCache
     */
    'Type'?: BuildCacheTypeEnum;
    /**
     * Description of the build-step that produced the build cache. 
     * @type {string}
     * @memberof BuildCache
     */
    'Description'?: string;
    /**
     * Indicates if the build cache is in use. 
     * @type {boolean}
     * @memberof BuildCache
     */
    'InUse'?: boolean;
    /**
     * Indicates if the build cache is shared. 
     * @type {boolean}
     * @memberof BuildCache
     */
    'Shared'?: boolean;
    /**
     * Amount of disk space used by the build cache (in bytes). 
     * @type {number}
     * @memberof BuildCache
     */
    'Size'?: number;
    /**
     * Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof BuildCache
     */
    'CreatedAt'?: string;
    /**
     * Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof BuildCache
     */
    'LastUsedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BuildCache
     */
    'UsageCount'?: number;
}

export const BuildCacheTypeEnum = {
    Internal: 'internal',
    Frontend: 'frontend',
    SourceLocal: 'source.local',
    SourceGitCheckout: 'source.git.checkout',
    ExecCachemount: 'exec.cachemount',
    Regular: 'regular'
} as const;

export type BuildCacheTypeEnum = typeof BuildCacheTypeEnum[keyof typeof BuildCacheTypeEnum];

/**
 * 
 * @export
 * @interface BuildInfo
 */
export interface BuildInfo {
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'stream'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'error'?: string;
    /**
     * 
     * @type {ErrorDetail}
     * @memberof BuildInfo
     */
    'errorDetail'?: ErrorDetail;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    'progress'?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof BuildInfo
     */
    'progressDetail'?: ProgressDetail;
    /**
     * 
     * @type {ImageID}
     * @memberof BuildInfo
     */
    'aux'?: ImageID;
}
/**
 * 
 * @export
 * @interface BuildPruneResponse
 */
export interface BuildPruneResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof BuildPruneResponse
     */
    'CachesDeleted'?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof BuildPruneResponse
     */
    'SpaceReclaimed'?: number;
}
/**
 * Kind of change  Can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
 * @export
 * @enum {number}
 */

export const ChangeType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ChangeType = typeof ChangeType[keyof typeof ChangeType];


/**
 * ClusterInfo represents information about the swarm as is returned by the \"/info\" endpoint. Join-tokens are not included. 
 * @export
 * @interface ClusterInfo
 */
export interface ClusterInfo {
    /**
     * The ID of the swarm.
     * @type {string}
     * @memberof ClusterInfo
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ClusterInfo
     */
    'Version'?: ObjectVersion;
    /**
     * Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof ClusterInfo
     */
    'CreatedAt'?: string;
    /**
     * Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof ClusterInfo
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof ClusterInfo
     */
    'Spec'?: SwarmSpec;
    /**
     * 
     * @type {TLSInfo}
     * @memberof ClusterInfo
     */
    'TLSInfo'?: TLSInfo;
    /**
     * Whether there is currently a root CA rotation in progress for the swarm 
     * @type {boolean}
     * @memberof ClusterInfo
     */
    'RootRotationInProgress'?: boolean;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used. 
     * @type {number}
     * @memberof ClusterInfo
     */
    'DataPathPort'?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof ClusterInfo
     */
    'DefaultAddrPool'?: Array<string>;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof ClusterInfo
     */
    'SubnetSize'?: number;
}
/**
 * Options and information specific to, and only present on, Swarm CSI cluster volumes. 
 * @export
 * @interface ClusterVolume
 */
export interface ClusterVolume {
    /**
     * The Swarm ID of this volume. Because cluster volumes are Swarm objects, they have an ID, unlike non-cluster volumes. This ID can be used to refer to the Volume instead of the name. 
     * @type {string}
     * @memberof ClusterVolume
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ClusterVolume
     */
    'Version'?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof ClusterVolume
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterVolume
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof ClusterVolume
     */
    'Spec'?: ClusterVolumeSpec;
    /**
     * 
     * @type {ClusterVolumeInfo}
     * @memberof ClusterVolume
     */
    'Info'?: ClusterVolumeInfo;
    /**
     * The status of the volume as it pertains to its publishing and use on specific nodes 
     * @type {Array<ClusterVolumePublishStatusInner>}
     * @memberof ClusterVolume
     */
    'PublishStatus'?: Array<ClusterVolumePublishStatusInner>;
}
/**
 * Information about the global status of the volume. 
 * @export
 * @interface ClusterVolumeInfo
 */
export interface ClusterVolumeInfo {
    /**
     * The capacity of the volume in bytes. A value of 0 indicates that the capacity is unknown. 
     * @type {number}
     * @memberof ClusterVolumeInfo
     */
    'CapacityBytes'?: number;
    /**
     * A map of strings to strings returned from the storage plugin when the volume is created. 
     * @type {{ [key: string]: string; }}
     * @memberof ClusterVolumeInfo
     */
    'VolumeContext'?: { [key: string]: string; };
    /**
     * The ID of the volume as returned by the CSI storage plugin. This is distinct from the volume\'s ID as provided by Docker. This ID is never used by the user when communicating with Docker to refer to this volume. If the ID is blank, then the Volume has not been successfully created in the plugin yet. 
     * @type {string}
     * @memberof ClusterVolumeInfo
     */
    'VolumeID'?: string;
    /**
     * The topology this volume is actually accessible from. 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof ClusterVolumeInfo
     */
    'AccessibleTopology'?: Array<{ [key: string]: string; }>;
}
/**
 * 
 * @export
 * @interface ClusterVolumePublishStatusInner
 */
export interface ClusterVolumePublishStatusInner {
    /**
     * The ID of the Swarm node the volume is published on. 
     * @type {string}
     * @memberof ClusterVolumePublishStatusInner
     */
    'NodeID'?: string;
    /**
     * The published state of the volume. * `pending-publish` The volume should be published to this node, but the call to the controller plugin to do so has not yet been successfully completed. * `published` The volume is published successfully to the node. * `pending-node-unpublish` The volume should be unpublished from the node, and the manager is awaiting confirmation from the worker that it has done so. * `pending-controller-unpublish` The volume is successfully unpublished from the node, but has not yet been successfully unpublished on the controller. 
     * @type {string}
     * @memberof ClusterVolumePublishStatusInner
     */
    'State'?: ClusterVolumePublishStatusInnerStateEnum;
    /**
     * A map of strings to strings returned by the CSI controller plugin when a volume is published. 
     * @type {{ [key: string]: string; }}
     * @memberof ClusterVolumePublishStatusInner
     */
    'PublishContext'?: { [key: string]: string; };
}

export const ClusterVolumePublishStatusInnerStateEnum = {
    PendingPublish: 'pending-publish',
    Published: 'published',
    PendingNodeUnpublish: 'pending-node-unpublish',
    PendingControllerUnpublish: 'pending-controller-unpublish'
} as const;

export type ClusterVolumePublishStatusInnerStateEnum = typeof ClusterVolumePublishStatusInnerStateEnum[keyof typeof ClusterVolumePublishStatusInnerStateEnum];

/**
 * Cluster-specific options used to create the volume. 
 * @export
 * @interface ClusterVolumeSpec
 */
export interface ClusterVolumeSpec {
    /**
     * Group defines the volume group of this volume. Volumes belonging to the same group can be referred to by group name when creating Services.  Referring to a volume by group instructs Swarm to treat volumes in that group interchangeably for the purpose of scheduling. Volumes with an empty string for a group technically all belong to the same, emptystring group. 
     * @type {string}
     * @memberof ClusterVolumeSpec
     */
    'Group'?: string;
    /**
     * 
     * @type {ClusterVolumeSpecAccessMode}
     * @memberof ClusterVolumeSpec
     */
    'AccessMode'?: ClusterVolumeSpecAccessMode;
}
/**
 * Defines how the volume is used by tasks. 
 * @export
 * @interface ClusterVolumeSpecAccessMode
 */
export interface ClusterVolumeSpecAccessMode {
    /**
     * The set of nodes this volume can be used on at one time. - `single` The volume may only be scheduled to one node at a time. - `multi` the volume may be scheduled to any supported number of nodes at a time. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'Scope'?: ClusterVolumeSpecAccessModeScopeEnum;
    /**
     * The number and way that different tasks can use this volume at one time. - `none` The volume may only be used by one task at a time. - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write. - `all` The volume may have any number of readers and writers. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'Sharing'?: ClusterVolumeSpecAccessModeSharingEnum;
    /**
     * Options for using this volume as a Mount-type volume.      Either MountVolume or BlockVolume, but not both, must be     present.   properties:     FsType:       type: \"string\"       description: |         Specifies the filesystem type for the mount volume.         Optional.     MountFlags:       type: \"array\"       description: |         Flags to pass when mounting the volume. Optional.       items:         type: \"string\" BlockVolume:   type: \"object\"   description: |     Options for using this volume as a Block-type volume.     Intentionally empty. 
     * @type {object}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'MountVolume'?: object;
    /**
     * Swarm Secrets that are passed to the CSI storage plugin when operating on this volume. 
     * @type {Array<ClusterVolumeSpecAccessModeSecretsInner>}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'Secrets'?: Array<ClusterVolumeSpecAccessModeSecretsInner>;
    /**
     * 
     * @type {ClusterVolumeSpecAccessModeAccessibilityRequirements}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'AccessibilityRequirements'?: ClusterVolumeSpecAccessModeAccessibilityRequirements;
    /**
     * 
     * @type {ClusterVolumeSpecAccessModeCapacityRange}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'CapacityRange'?: ClusterVolumeSpecAccessModeCapacityRange;
    /**
     * The availability of the volume for use in tasks. - `active` The volume is fully available for scheduling on the cluster - `pause` No new workloads should use the volume, but existing workloads are not stopped. - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    'Availability'?: ClusterVolumeSpecAccessModeAvailabilityEnum;
}

export const ClusterVolumeSpecAccessModeScopeEnum = {
    Single: 'single',
    Multi: 'multi'
} as const;

export type ClusterVolumeSpecAccessModeScopeEnum = typeof ClusterVolumeSpecAccessModeScopeEnum[keyof typeof ClusterVolumeSpecAccessModeScopeEnum];
export const ClusterVolumeSpecAccessModeSharingEnum = {
    None: 'none',
    Readonly: 'readonly',
    Onewriter: 'onewriter',
    All: 'all'
} as const;

export type ClusterVolumeSpecAccessModeSharingEnum = typeof ClusterVolumeSpecAccessModeSharingEnum[keyof typeof ClusterVolumeSpecAccessModeSharingEnum];
export const ClusterVolumeSpecAccessModeAvailabilityEnum = {
    Active: 'active',
    Pause: 'pause',
    Drain: 'drain'
} as const;

export type ClusterVolumeSpecAccessModeAvailabilityEnum = typeof ClusterVolumeSpecAccessModeAvailabilityEnum[keyof typeof ClusterVolumeSpecAccessModeAvailabilityEnum];

/**
 * Requirements for the accessible topology of the volume. These fields are optional. For an in-depth description of what these fields mean, see the CSI specification. 
 * @export
 * @interface ClusterVolumeSpecAccessModeAccessibilityRequirements
 */
export interface ClusterVolumeSpecAccessModeAccessibilityRequirements {
    /**
     * A list of required topologies, at least one of which the volume must be accessible from. 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof ClusterVolumeSpecAccessModeAccessibilityRequirements
     */
    'Requisite'?: Array<{ [key: string]: string; }>;
    /**
     * A list of topologies that the volume should attempt to be provisioned in. 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof ClusterVolumeSpecAccessModeAccessibilityRequirements
     */
    'Preferred'?: Array<{ [key: string]: string; }>;
}
/**
 * The desired capacity that the volume should be created with. If empty, the plugin will decide the capacity. 
 * @export
 * @interface ClusterVolumeSpecAccessModeCapacityRange
 */
export interface ClusterVolumeSpecAccessModeCapacityRange {
    /**
     * The volume must be at least this big. The value of 0 indicates an unspecified minimum 
     * @type {number}
     * @memberof ClusterVolumeSpecAccessModeCapacityRange
     */
    'RequiredBytes'?: number;
    /**
     * The volume must not be bigger than this. The value of 0 indicates an unspecified maximum. 
     * @type {number}
     * @memberof ClusterVolumeSpecAccessModeCapacityRange
     */
    'LimitBytes'?: number;
}
/**
 * One cluster volume secret entry. Defines a key-value pair that is passed to the plugin. 
 * @export
 * @interface ClusterVolumeSpecAccessModeSecretsInner
 */
export interface ClusterVolumeSpecAccessModeSecretsInner {
    /**
     * Key is the name of the key of the key-value pair passed to the plugin. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessModeSecretsInner
     */
    'Key'?: string;
    /**
     * Secret is the swarm Secret object from which to read data. This can be a Secret name or ID. The Secret data is retrieved by swarm and used as the value of the key-value pair passed to the plugin. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessModeSecretsInner
     */
    'Secret'?: string;
}
/**
 * Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`. 
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     * Actual commit ID of external tool.
     * @type {string}
     * @memberof Commit
     */
    'ID'?: string;
    /**
     * Commit ID of external tool expected by dockerd as set at build time. 
     * @type {string}
     * @memberof Commit
     */
    'Expected'?: string;
}
/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Config
     */
    'Version'?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {ConfigSpec}
     * @memberof Config
     */
    'Spec'?: ConfigSpec;
}
/**
 * 
 * @export
 * @interface ConfigCreateRequest
 */
export interface ConfigCreateRequest {
    /**
     * User-defined name of the config.
     * @type {string}
     * @memberof ConfigCreateRequest
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ConfigCreateRequest
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. 
     * @type {string}
     * @memberof ConfigCreateRequest
     */
    'Data'?: string;
    /**
     * 
     * @type {Driver}
     * @memberof ConfigCreateRequest
     */
    'Templating'?: Driver;
}
/**
 * The config-only network source to provide the configuration for this network. 
 * @export
 * @interface ConfigReference
 */
export interface ConfigReference {
    /**
     * The name of the config-only network that provides the network\'s configuration. The specified network must be an existing config-only network. Only network names are allowed, not network IDs. 
     * @type {string}
     * @memberof ConfigReference
     */
    'Network'?: string;
}
/**
 * 
 * @export
 * @interface ConfigSpec
 */
export interface ConfigSpec {
    /**
     * User-defined name of the config.
     * @type {string}
     * @memberof ConfigSpec
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ConfigSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. 
     * @type {string}
     * @memberof ConfigSpec
     */
    'Data'?: string;
    /**
     * 
     * @type {Driver}
     * @memberof ConfigSpec
     */
    'Templating'?: Driver;
}
/**
 * Configuration for a container that is portable between hosts. 
 * @export
 * @interface ContainerConfig
 */
export interface ContainerConfig {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname. 
     * @type {string}
     * @memberof ContainerConfig
     */
    'Hostname'?: string;
    /**
     * The domain name to use for the container. 
     * @type {string}
     * @memberof ContainerConfig
     */
    'Domainname'?: string;
    /**
     * The user that commands are run as inside the container.
     * @type {string}
     * @memberof ContainerConfig
     */
    'User'?: string;
    /**
     * Whether to attach to `stdin`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'AttachStdin'?: boolean;
    /**
     * Whether to attach to `stdout`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'AttachStdout'?: boolean;
    /**
     * Whether to attach to `stderr`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'AttachStderr'?: boolean;
    /**
     * An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` 
     * @type {{ [key: string]: object; }}
     * @memberof ContainerConfig
     */
    'ExposedPorts'?: { [key: string]: object; } | null;
    /**
     * Attach standard streams to a TTY, including `stdin` if it is not closed. 
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'Tty'?: boolean;
    /**
     * Open `stdin`
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'OpenStdin'?: boolean;
    /**
     * Close `stdin` after one attached client disconnects
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'StdinOnce'?: boolean;
    /**
     * A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    'Env'?: Array<string>;
    /**
     * Command to run specified as a string or an array of strings. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    'Cmd'?: Array<string>;
    /**
     * 
     * @type {HealthConfig}
     * @memberof ContainerConfig
     */
    'Healthcheck'?: HealthConfig;
    /**
     * Command is already escaped (Windows only)
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'ArgsEscaped'?: boolean | null;
    /**
     * The name (or reference) of the image to use when creating the container, or which was used when the container was created. 
     * @type {string}
     * @memberof ContainerConfig
     */
    'Image'?: string;
    /**
     * An object mapping mount point paths inside the container to empty objects. 
     * @type {{ [key: string]: object; }}
     * @memberof ContainerConfig
     */
    'Volumes'?: { [key: string]: object; };
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof ContainerConfig
     */
    'WorkingDir'?: string;
    /**
     * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    'Entrypoint'?: Array<string>;
    /**
     * Disable networking for the container.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    'NetworkDisabled'?: boolean | null;
    /**
     * MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead. 
     * @type {string}
     * @memberof ContainerConfig
     */
    'MacAddress'?: string | null;
    /**
     * `ONBUILD` metadata that were defined in the image\'s `Dockerfile`. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    'OnBuild'?: Array<string> | null;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerConfig
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Signal to stop a container as a string or unsigned integer. 
     * @type {string}
     * @memberof ContainerConfig
     */
    'StopSignal'?: string | null;
    /**
     * Timeout to stop a container in seconds.
     * @type {number}
     * @memberof ContainerConfig
     */
    'StopTimeout'?: number | null;
    /**
     * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    'Shell'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ContainerCreateRequest
 */
export interface ContainerCreateRequest {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname. 
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'Hostname'?: string;
    /**
     * The domain name to use for the container. 
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'Domainname'?: string;
    /**
     * The user that commands are run as inside the container.
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'User'?: string;
    /**
     * Whether to attach to `stdin`.
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'AttachStdin'?: boolean;
    /**
     * Whether to attach to `stdout`.
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'AttachStdout'?: boolean;
    /**
     * Whether to attach to `stderr`.
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'AttachStderr'?: boolean;
    /**
     * An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` 
     * @type {{ [key: string]: object; }}
     * @memberof ContainerCreateRequest
     */
    'ExposedPorts'?: { [key: string]: object; } | null;
    /**
     * Attach standard streams to a TTY, including `stdin` if it is not closed. 
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'Tty'?: boolean;
    /**
     * Open `stdin`
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'OpenStdin'?: boolean;
    /**
     * Close `stdin` after one attached client disconnects
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'StdinOnce'?: boolean;
    /**
     * A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. 
     * @type {Array<string>}
     * @memberof ContainerCreateRequest
     */
    'Env'?: Array<string>;
    /**
     * Command to run specified as a string or an array of strings. 
     * @type {Array<string>}
     * @memberof ContainerCreateRequest
     */
    'Cmd'?: Array<string>;
    /**
     * 
     * @type {HealthConfig}
     * @memberof ContainerCreateRequest
     */
    'Healthcheck'?: HealthConfig;
    /**
     * Command is already escaped (Windows only)
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'ArgsEscaped'?: boolean | null;
    /**
     * The name (or reference) of the image to use when creating the container, or which was used when the container was created. 
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'Image'?: string;
    /**
     * An object mapping mount point paths inside the container to empty objects. 
     * @type {{ [key: string]: object; }}
     * @memberof ContainerCreateRequest
     */
    'Volumes'?: { [key: string]: object; };
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'WorkingDir'?: string;
    /**
     * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). 
     * @type {Array<string>}
     * @memberof ContainerCreateRequest
     */
    'Entrypoint'?: Array<string>;
    /**
     * Disable networking for the container.
     * @type {boolean}
     * @memberof ContainerCreateRequest
     */
    'NetworkDisabled'?: boolean | null;
    /**
     * MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead. 
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'MacAddress'?: string | null;
    /**
     * `ONBUILD` metadata that were defined in the image\'s `Dockerfile`. 
     * @type {Array<string>}
     * @memberof ContainerCreateRequest
     */
    'OnBuild'?: Array<string> | null;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerCreateRequest
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Signal to stop a container as a string or unsigned integer. 
     * @type {string}
     * @memberof ContainerCreateRequest
     */
    'StopSignal'?: string | null;
    /**
     * Timeout to stop a container in seconds.
     * @type {number}
     * @memberof ContainerCreateRequest
     */
    'StopTimeout'?: number | null;
    /**
     * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. 
     * @type {Array<string>}
     * @memberof ContainerCreateRequest
     */
    'Shell'?: Array<string> | null;
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainerCreateRequest
     */
    'HostConfig'?: HostConfig;
    /**
     * 
     * @type {NetworkingConfig}
     * @memberof ContainerCreateRequest
     */
    'NetworkingConfig'?: NetworkingConfig;
}
/**
 * OK response to ContainerCreate operation
 * @export
 * @interface ContainerCreateResponse
 */
export interface ContainerCreateResponse {
    /**
     * The ID of the created container
     * @type {string}
     * @memberof ContainerCreateResponse
     */
    'Id': string;
    /**
     * Warnings encountered when creating the container
     * @type {Array<string>}
     * @memberof ContainerCreateResponse
     */
    'Warnings': Array<string>;
}
/**
 * 
 * @export
 * @interface ContainerInspectResponse
 */
export interface ContainerInspectResponse {
    /**
     * The ID of the container
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Id'?: string;
    /**
     * The time the container was created
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Created'?: string;
    /**
     * The path to the command being run
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Path'?: string;
    /**
     * The arguments to the command being run
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    'Args'?: Array<string>;
    /**
     * 
     * @type {ContainerState}
     * @memberof ContainerInspectResponse
     */
    'State'?: ContainerState | null;
    /**
     * The container\'s image ID
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'ResolvConfPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'HostnamePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'HostsPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'LogPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    'RestartCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Driver'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'Platform'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'MountLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'ProcessLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    'AppArmorProfile'?: string;
    /**
     * IDs of exec instances that are running in the container.
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    'ExecIDs'?: Array<string> | null;
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainerInspectResponse
     */
    'HostConfig'?: HostConfig;
    /**
     * 
     * @type {GraphDriverData}
     * @memberof ContainerInspectResponse
     */
    'GraphDriver'?: GraphDriverData;
    /**
     * The size of files that have been created or changed by this container. 
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    'SizeRw'?: number;
    /**
     * The total size of all the files in this container.
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    'SizeRootFs'?: number;
    /**
     * 
     * @type {Array<MountPoint>}
     * @memberof ContainerInspectResponse
     */
    'Mounts'?: Array<MountPoint>;
    /**
     * 
     * @type {ContainerConfig}
     * @memberof ContainerInspectResponse
     */
    'Config'?: ContainerConfig;
    /**
     * 
     * @type {NetworkSettings}
     * @memberof ContainerInspectResponse
     */
    'NetworkSettings'?: NetworkSettings;
}
/**
 * 
 * @export
 * @interface ContainerPruneResponse
 */
export interface ContainerPruneResponse {
    /**
     * Container IDs that were deleted
     * @type {Array<string>}
     * @memberof ContainerPruneResponse
     */
    'ContainersDeleted'?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof ContainerPruneResponse
     */
    'SpaceReclaimed'?: number;
}
/**
 * ContainerState stores container\'s running state. It\'s part of ContainerJSONBase and will be returned by the \"inspect\" command. 
 * @export
 * @interface ContainerState
 */
export interface ContainerState {
    /**
     * String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\". 
     * @type {string}
     * @memberof ContainerState
     */
    'Status'?: ContainerStateStatusEnum;
    /**
     * Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container\'s state is \"running\". 
     * @type {boolean}
     * @memberof ContainerState
     */
    'Running'?: boolean;
    /**
     * Whether this container is paused.
     * @type {boolean}
     * @memberof ContainerState
     */
    'Paused'?: boolean;
    /**
     * Whether this container is restarting.
     * @type {boolean}
     * @memberof ContainerState
     */
    'Restarting'?: boolean;
    /**
     * Whether a process within this container has been killed because it ran out of memory since the container was last started. 
     * @type {boolean}
     * @memberof ContainerState
     */
    'OOMKilled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContainerState
     */
    'Dead'?: boolean;
    /**
     * The process ID of this container
     * @type {number}
     * @memberof ContainerState
     */
    'Pid'?: number;
    /**
     * The last exit code of this container
     * @type {number}
     * @memberof ContainerState
     */
    'ExitCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContainerState
     */
    'Error'?: string;
    /**
     * The time when this container was last started.
     * @type {string}
     * @memberof ContainerState
     */
    'StartedAt'?: string;
    /**
     * The time when this container last exited.
     * @type {string}
     * @memberof ContainerState
     */
    'FinishedAt'?: string;
    /**
     * 
     * @type {Health}
     * @memberof ContainerState
     */
    'Health'?: Health | null;
}

export const ContainerStateStatusEnum = {
    Created: 'created',
    Running: 'running',
    Paused: 'paused',
    Restarting: 'restarting',
    Removing: 'removing',
    Exited: 'exited',
    Dead: 'dead'
} as const;

export type ContainerStateStatusEnum = typeof ContainerStateStatusEnum[keyof typeof ContainerStateStatusEnum];

/**
 * represents the status of a container.
 * @export
 * @interface ContainerStatus
 */
export interface ContainerStatus {
    /**
     * 
     * @type {string}
     * @memberof ContainerStatus
     */
    'ContainerID'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContainerStatus
     */
    'PID'?: number;
    /**
     * 
     * @type {number}
     * @memberof ContainerStatus
     */
    'ExitCode'?: number;
}
/**
 * 
 * @export
 * @interface ContainerSummary
 */
export interface ContainerSummary {
    /**
     * The ID of this container
     * @type {string}
     * @memberof ContainerSummary
     */
    'Id'?: string;
    /**
     * The names that this container has been given
     * @type {Array<string>}
     * @memberof ContainerSummary
     */
    'Names'?: Array<string>;
    /**
     * The name of the image used when creating this container
     * @type {string}
     * @memberof ContainerSummary
     */
    'Image'?: string;
    /**
     * The ID of the image that this container was created from
     * @type {string}
     * @memberof ContainerSummary
     */
    'ImageID'?: string;
    /**
     * Command to run when starting the container
     * @type {string}
     * @memberof ContainerSummary
     */
    'Command'?: string;
    /**
     * When the container was created
     * @type {number}
     * @memberof ContainerSummary
     */
    'Created'?: number;
    /**
     * The ports exposed by this container
     * @type {Array<Port>}
     * @memberof ContainerSummary
     */
    'Ports'?: Array<Port>;
    /**
     * The size of files that have been created or changed by this container
     * @type {number}
     * @memberof ContainerSummary
     */
    'SizeRw'?: number;
    /**
     * The total size of all the files in this container
     * @type {number}
     * @memberof ContainerSummary
     */
    'SizeRootFs'?: number;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerSummary
     */
    'Labels'?: { [key: string]: string; };
    /**
     * The state of this container (e.g. `Exited`)
     * @type {string}
     * @memberof ContainerSummary
     */
    'State'?: string;
    /**
     * Additional human-readable status of this container (e.g. `Exit 0`)
     * @type {string}
     * @memberof ContainerSummary
     */
    'Status'?: string;
    /**
     * 
     * @type {ContainerSummaryHostConfig}
     * @memberof ContainerSummary
     */
    'HostConfig'?: ContainerSummaryHostConfig;
    /**
     * 
     * @type {ContainerSummaryNetworkSettings}
     * @memberof ContainerSummary
     */
    'NetworkSettings'?: ContainerSummaryNetworkSettings;
    /**
     * 
     * @type {Array<MountPoint>}
     * @memberof ContainerSummary
     */
    'Mounts'?: Array<MountPoint>;
}
/**
 * 
 * @export
 * @interface ContainerSummaryHostConfig
 */
export interface ContainerSummaryHostConfig {
    /**
     * 
     * @type {string}
     * @memberof ContainerSummaryHostConfig
     */
    'NetworkMode'?: string;
}
/**
 * A summary of the container\'s network settings
 * @export
 * @interface ContainerSummaryNetworkSettings
 */
export interface ContainerSummaryNetworkSettings {
    /**
     * 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof ContainerSummaryNetworkSettings
     */
    'Networks'?: { [key: string]: EndpointSettings; };
}
/**
 * OK response to ContainerTop operation
 * @export
 * @interface ContainerTopResponse
 */
export interface ContainerTopResponse {
    /**
     * The ps column titles
     * @type {Array<string>}
     * @memberof ContainerTopResponse
     */
    'Titles'?: Array<string>;
    /**
     * Each process running in the container, where each is process is an array of values corresponding to the titles. 
     * @type {Array<Array<string>>}
     * @memberof ContainerTopResponse
     */
    'Processes'?: Array<Array<string>>;
}
/**
 * 
 * @export
 * @interface ContainerUpdateRequest
 */
export interface ContainerUpdateRequest {
    /**
     * An integer value representing this container\'s relative CPU weight versus other containers. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuShares'?: number;
    /**
     * Memory limit in bytes.
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'Memory'?: number;
    /**
     * Path to `cgroups` under which the container\'s `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. 
     * @type {string}
     * @memberof ContainerUpdateRequest
     */
    'CgroupParent'?: string;
    /**
     * Block IO weight (relative weight).
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'BlkioWeight'?: number;
    /**
     * Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` 
     * @type {Array<ResourcesBlkioWeightDeviceInner>}
     * @memberof ContainerUpdateRequest
     */
    'BlkioWeightDevice'?: Array<ResourcesBlkioWeightDeviceInner>;
    /**
     * Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof ContainerUpdateRequest
     */
    'BlkioDeviceReadBps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof ContainerUpdateRequest
     */
    'BlkioDeviceWriteBps'?: Array<ThrottleDevice>;
    /**
     * Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof ContainerUpdateRequest
     */
    'BlkioDeviceReadIOps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof ContainerUpdateRequest
     */
    'BlkioDeviceWriteIOps'?: Array<ThrottleDevice>;
    /**
     * The length of a CPU period in microseconds.
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuPeriod'?: number;
    /**
     * Microseconds of CPU time that the container can get in a CPU period. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuQuota'?: number;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuRealtimePeriod'?: number;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuRealtimeRuntime'?: number;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`). 
     * @type {string}
     * @memberof ContainerUpdateRequest
     */
    'CpusetCpus'?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. 
     * @type {string}
     * @memberof ContainerUpdateRequest
     */
    'CpusetMems'?: string;
    /**
     * A list of devices to add to the container.
     * @type {Array<DeviceMapping>}
     * @memberof ContainerUpdateRequest
     */
    'Devices'?: Array<DeviceMapping>;
    /**
     * a list of cgroup rules to apply to the container
     * @type {Array<string>}
     * @memberof ContainerUpdateRequest
     */
    'DeviceCgroupRules'?: Array<string>;
    /**
     * A list of requests for devices to be sent to device drivers. 
     * @type {Array<DeviceRequest>}
     * @memberof ContainerUpdateRequest
     */
    'DeviceRequests'?: Array<DeviceRequest>;
    /**
     * Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'KernelMemoryTCP'?: number;
    /**
     * Memory soft limit in bytes.
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'MemoryReservation'?: number;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'MemorySwap'?: number;
    /**
     * Tune a container\'s memory swappiness behavior. Accepts an integer between 0 and 100. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'MemorySwappiness'?: number;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'NanoCpus'?: number;
    /**
     * Disable OOM Killer for the container.
     * @type {boolean}
     * @memberof ContainerUpdateRequest
     */
    'OomKillDisable'?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof ContainerUpdateRequest
     */
    'Init'?: boolean | null;
    /**
     * Tune a container\'s PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'PidsLimit'?: number | null;
    /**
     * A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` 
     * @type {Array<ResourcesUlimitsInner>}
     * @memberof ContainerUpdateRequest
     */
    'Ulimits'?: Array<ResourcesUlimitsInner>;
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuCount'?: number;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'CpuPercent'?: number;
    /**
     * Maximum IOps for the container system drive (Windows only)
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'IOMaximumIOps'?: number;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only). 
     * @type {number}
     * @memberof ContainerUpdateRequest
     */
    'IOMaximumBandwidth'?: number;
    /**
     * 
     * @type {RestartPolicy}
     * @memberof ContainerUpdateRequest
     */
    'RestartPolicy'?: RestartPolicy;
}
/**
 * OK response to ContainerUpdate operation
 * @export
 * @interface ContainerUpdateResponse
 */
export interface ContainerUpdateResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ContainerUpdateResponse
     */
    'Warnings'?: Array<string>;
}
/**
 * container waiting error, if any
 * @export
 * @interface ContainerWaitExitError
 */
export interface ContainerWaitExitError {
    /**
     * Details of an error
     * @type {string}
     * @memberof ContainerWaitExitError
     */
    'Message'?: string;
}
/**
 * OK response to ContainerWait operation
 * @export
 * @interface ContainerWaitResponse
 */
export interface ContainerWaitResponse {
    /**
     * Exit code of the container
     * @type {number}
     * @memberof ContainerWaitResponse
     */
    'StatusCode': number;
    /**
     * 
     * @type {ContainerWaitExitError}
     * @memberof ContainerWaitResponse
     */
    'Error'?: ContainerWaitExitError;
}
/**
 * 
 * @export
 * @interface CreateImageInfo
 */
export interface CreateImageInfo {
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    'error'?: string;
    /**
     * 
     * @type {ErrorDetail}
     * @memberof CreateImageInfo
     */
    'errorDetail'?: ErrorDetail;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    'progress'?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof CreateImageInfo
     */
    'progressDetail'?: ProgressDetail;
}
/**
 * A device mapping between the host and container
 * @export
 * @interface DeviceMapping
 */
export interface DeviceMapping {
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    'PathOnHost'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    'PathInContainer'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    'CgroupPermissions'?: string;
}
/**
 * A request for devices to be sent to device drivers
 * @export
 * @interface DeviceRequest
 */
export interface DeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    'Driver'?: string;
    /**
     * 
     * @type {number}
     * @memberof DeviceRequest
     */
    'Count'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeviceRequest
     */
    'DeviceIDs'?: Array<string>;
    /**
     * A list of capabilities; an OR list of AND lists of capabilities. 
     * @type {Array<Array<string>>}
     * @memberof DeviceRequest
     */
    'Capabilities'?: Array<Array<string>>;
    /**
     * Driver-specific options, specified as a key/value pairs. These options are passed directly to the driver. 
     * @type {{ [key: string]: string; }}
     * @memberof DeviceRequest
     */
    'Options'?: { [key: string]: string; };
}
/**
 * Describes the result obtained from contacting the registry to retrieve image metadata. 
 * @export
 * @interface DistributionInspect
 */
export interface DistributionInspect {
    /**
     * 
     * @type {OCIDescriptor}
     * @memberof DistributionInspect
     */
    'Descriptor': OCIDescriptor;
    /**
     * An array containing all platforms supported by the image. 
     * @type {Array<OCIPlatform>}
     * @memberof DistributionInspect
     */
    'Platforms': Array<OCIPlatform>;
}
/**
 * Driver represents a driver (network, logging, secrets).
 * @export
 * @interface Driver
 */
export interface Driver {
    /**
     * Name of the driver.
     * @type {string}
     * @memberof Driver
     */
    'Name': string;
    /**
     * Key/value map of driver-specific options.
     * @type {{ [key: string]: string; }}
     * @memberof Driver
     */
    'Options'?: { [key: string]: string; };
}
/**
 * EndpointIPAMConfig represents an endpoint\'s IPAM configuration. 
 * @export
 * @interface EndpointIPAMConfig
 */
export interface EndpointIPAMConfig {
    /**
     * 
     * @type {string}
     * @memberof EndpointIPAMConfig
     */
    'IPv4Address'?: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointIPAMConfig
     */
    'IPv6Address'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointIPAMConfig
     */
    'LinkLocalIPs'?: Array<string>;
}
/**
 * 
 * @export
 * @interface EndpointPortConfig
 */
export interface EndpointPortConfig {
    /**
     * 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    'Protocol'?: EndpointPortConfigProtocolEnum;
    /**
     * The port inside the container.
     * @type {number}
     * @memberof EndpointPortConfig
     */
    'TargetPort'?: number;
    /**
     * The port on the swarm hosts.
     * @type {number}
     * @memberof EndpointPortConfig
     */
    'PublishedPort'?: number;
    /**
     * The mode in which port is published.  <p><br /></p>  - \"ingress\" makes the target port accessible on every node,   regardless of whether there is a task for the service running on   that node or not. - \"host\" bypasses the routing mesh and publish the port directly on   the swarm node where that service is running. 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    'PublishMode'?: EndpointPortConfigPublishModeEnum;
}

export const EndpointPortConfigProtocolEnum = {
    Tcp: 'tcp',
    Udp: 'udp',
    Sctp: 'sctp'
} as const;

export type EndpointPortConfigProtocolEnum = typeof EndpointPortConfigProtocolEnum[keyof typeof EndpointPortConfigProtocolEnum];
export const EndpointPortConfigPublishModeEnum = {
    Ingress: 'ingress',
    Host: 'host'
} as const;

export type EndpointPortConfigPublishModeEnum = typeof EndpointPortConfigPublishModeEnum[keyof typeof EndpointPortConfigPublishModeEnum];

/**
 * Configuration for a network endpoint.
 * @export
 * @interface EndpointSettings
 */
export interface EndpointSettings {
    /**
     * 
     * @type {EndpointIPAMConfig}
     * @memberof EndpointSettings
     */
    'IPAMConfig'?: EndpointIPAMConfig | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointSettings
     */
    'Links'?: Array<string>;
    /**
     * MAC address for the endpoint on this network. The network driver might ignore this parameter. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'MacAddress'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointSettings
     */
    'Aliases'?: Array<string>;
    /**
     * Unique ID of the network. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'NetworkID'?: string;
    /**
     * Unique ID for the service endpoint in a Sandbox. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'EndpointID'?: string;
    /**
     * Gateway address for this network. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'Gateway'?: string;
    /**
     * IPv4 address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'IPAddress'?: string;
    /**
     * Mask length of the IPv4 address. 
     * @type {number}
     * @memberof EndpointSettings
     */
    'IPPrefixLen'?: number;
    /**
     * IPv6 gateway address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'IPv6Gateway'?: string;
    /**
     * Global IPv6 address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    'GlobalIPv6Address'?: string;
    /**
     * Mask length of the global IPv6 address. 
     * @type {number}
     * @memberof EndpointSettings
     */
    'GlobalIPv6PrefixLen'?: number;
    /**
     * DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
     * @type {{ [key: string]: string; }}
     * @memberof EndpointSettings
     */
    'DriverOpts'?: { [key: string]: string; } | null;
    /**
     * List of all DNS names an endpoint has on a specific network. This list is based on the container name, network aliases, container short ID, and hostname.  These DNS names are non-fully qualified but can contain several dots. You can get fully qualified DNS names by appending `.<network-name>`. For instance, if container name is `my.ctr` and the network is named `testnet`, `DNSNames` will contain `my.ctr` and the FQDN will be `my.ctr.testnet`. 
     * @type {Array<string>}
     * @memberof EndpointSettings
     */
    'DNSNames'?: Array<string>;
}
/**
 * Properties that can be configured to access and load balance a service.
 * @export
 * @interface EndpointSpec
 */
export interface EndpointSpec {
    /**
     * The mode of resolution to use for internal load balancing between tasks. 
     * @type {string}
     * @memberof EndpointSpec
     */
    'Mode'?: EndpointSpecModeEnum;
    /**
     * List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used. 
     * @type {Array<EndpointPortConfig>}
     * @memberof EndpointSpec
     */
    'Ports'?: Array<EndpointPortConfig>;
}

export const EndpointSpecModeEnum = {
    Vip: 'vip',
    Dnsrr: 'dnsrr'
} as const;

export type EndpointSpecModeEnum = typeof EndpointSpecModeEnum[keyof typeof EndpointSpecModeEnum];

/**
 * EngineDescription provides information about an engine.
 * @export
 * @interface EngineDescription
 */
export interface EngineDescription {
    /**
     * 
     * @type {string}
     * @memberof EngineDescription
     */
    'EngineVersion'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineDescription
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {Array<EngineDescriptionPluginsInner>}
     * @memberof EngineDescription
     */
    'Plugins'?: Array<EngineDescriptionPluginsInner>;
}
/**
 * 
 * @export
 * @interface EngineDescriptionPluginsInner
 */
export interface EngineDescriptionPluginsInner {
    /**
     * 
     * @type {string}
     * @memberof EngineDescriptionPluginsInner
     */
    'Type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineDescriptionPluginsInner
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * 
     * @type {number}
     * @memberof ErrorDetail
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    'message'?: string;
}
/**
 * Represents an error.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * The error message.
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * Actor describes something that generates events, like a container, network, or a volume. 
 * @export
 * @interface EventActor
 */
export interface EventActor {
    /**
     * The ID of the object emitting the event
     * @type {string}
     * @memberof EventActor
     */
    'ID'?: string;
    /**
     * Various key/value attributes of the object, depending on its type. 
     * @type {{ [key: string]: string; }}
     * @memberof EventActor
     */
    'Attributes'?: { [key: string]: string; };
}
/**
 * EventMessage represents the information an event contains. 
 * @export
 * @interface EventMessage
 */
export interface EventMessage {
    /**
     * The type of object emitting the event
     * @type {string}
     * @memberof EventMessage
     */
    'Type'?: EventMessageTypeEnum;
    /**
     * The type of event
     * @type {string}
     * @memberof EventMessage
     */
    'Action'?: string;
    /**
     * 
     * @type {EventActor}
     * @memberof EventMessage
     */
    'Actor'?: EventActor;
    /**
     * Scope of the event. Engine events are `local` scope. Cluster (Swarm) events are `swarm` scope. 
     * @type {string}
     * @memberof EventMessage
     */
    'scope'?: EventMessageScopeEnum;
    /**
     * Timestamp of event
     * @type {number}
     * @memberof EventMessage
     */
    'time'?: number;
    /**
     * Timestamp of event, with nanosecond accuracy
     * @type {number}
     * @memberof EventMessage
     */
    'timeNano'?: number;
}

export const EventMessageTypeEnum = {
    Builder: 'builder',
    Config: 'config',
    Container: 'container',
    Daemon: 'daemon',
    Image: 'image',
    Network: 'network',
    Node: 'node',
    Plugin: 'plugin',
    Secret: 'secret',
    Service: 'service',
    Volume: 'volume'
} as const;

export type EventMessageTypeEnum = typeof EventMessageTypeEnum[keyof typeof EventMessageTypeEnum];
export const EventMessageScopeEnum = {
    Local: 'local',
    Swarm: 'swarm'
} as const;

export type EventMessageScopeEnum = typeof EventMessageScopeEnum[keyof typeof EventMessageScopeEnum];

/**
 * 
 * @export
 * @interface ExecConfig
 */
export interface ExecConfig {
    /**
     * Attach to `stdin` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    'AttachStdin'?: boolean;
    /**
     * Attach to `stdout` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    'AttachStdout'?: boolean;
    /**
     * Attach to `stderr` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    'AttachStderr'?: boolean;
    /**
     * Initial console size, as an `[height, width]` array.
     * @type {Array<number>}
     * @memberof ExecConfig
     */
    'ConsoleSize'?: Array<number> | null;
    /**
     * Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. 
     * @type {string}
     * @memberof ExecConfig
     */
    'DetachKeys'?: string;
    /**
     * Allocate a pseudo-TTY.
     * @type {boolean}
     * @memberof ExecConfig
     */
    'Tty'?: boolean;
    /**
     * A list of environment variables in the form `[\"VAR=value\", ...]`. 
     * @type {Array<string>}
     * @memberof ExecConfig
     */
    'Env'?: Array<string>;
    /**
     * Command to run, as a string or array of strings.
     * @type {Array<string>}
     * @memberof ExecConfig
     */
    'Cmd'?: Array<string>;
    /**
     * Runs the exec process with extended privileges.
     * @type {boolean}
     * @memberof ExecConfig
     */
    'Privileged'?: boolean;
    /**
     * The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. 
     * @type {string}
     * @memberof ExecConfig
     */
    'User'?: string;
    /**
     * The working directory for the exec process inside the container. 
     * @type {string}
     * @memberof ExecConfig
     */
    'WorkingDir'?: string;
}
/**
 * 
 * @export
 * @interface ExecInspectResponse
 */
export interface ExecInspectResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    'CanRemove'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    'DetachKeys'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    'ID'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    'Running'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ExecInspectResponse
     */
    'ExitCode'?: number;
    /**
     * 
     * @type {ProcessConfig}
     * @memberof ExecInspectResponse
     */
    'ProcessConfig'?: ProcessConfig;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    'OpenStdin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    'OpenStderr'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    'OpenStdout'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    'ContainerID'?: string;
    /**
     * The system process ID for the exec process.
     * @type {number}
     * @memberof ExecInspectResponse
     */
    'Pid'?: number;
}
/**
 * 
 * @export
 * @interface ExecStartConfig
 */
export interface ExecStartConfig {
    /**
     * Detach from the command.
     * @type {boolean}
     * @memberof ExecStartConfig
     */
    'Detach'?: boolean;
    /**
     * Allocate a pseudo-TTY.
     * @type {boolean}
     * @memberof ExecStartConfig
     */
    'Tty'?: boolean;
    /**
     * Initial console size, as an `[height, width]` array.
     * @type {Array<number>}
     * @memberof ExecStartConfig
     */
    'ConsoleSize'?: Array<number> | null;
}
/**
 * Change in the container\'s filesystem. 
 * @export
 * @interface FilesystemChange
 */
export interface FilesystemChange {
    /**
     * Path to file or directory that has changed. 
     * @type {string}
     * @memberof FilesystemChange
     */
    'Path': string;
    /**
     * 
     * @type {ChangeType}
     * @memberof FilesystemChange
     */
    'Kind': ChangeType;
}


/**
 * 
 * @export
 * @interface GenericResourcesInner
 */
export interface GenericResourcesInner {
    /**
     * 
     * @type {GenericResourcesInnerNamedResourceSpec}
     * @memberof GenericResourcesInner
     */
    'NamedResourceSpec'?: GenericResourcesInnerNamedResourceSpec;
    /**
     * 
     * @type {GenericResourcesInnerDiscreteResourceSpec}
     * @memberof GenericResourcesInner
     */
    'DiscreteResourceSpec'?: GenericResourcesInnerDiscreteResourceSpec;
}
/**
 * 
 * @export
 * @interface GenericResourcesInnerDiscreteResourceSpec
 */
export interface GenericResourcesInnerDiscreteResourceSpec {
    /**
     * 
     * @type {string}
     * @memberof GenericResourcesInnerDiscreteResourceSpec
     */
    'Kind'?: string;
    /**
     * 
     * @type {number}
     * @memberof GenericResourcesInnerDiscreteResourceSpec
     */
    'Value'?: number;
}
/**
 * 
 * @export
 * @interface GenericResourcesInnerNamedResourceSpec
 */
export interface GenericResourcesInnerNamedResourceSpec {
    /**
     * 
     * @type {string}
     * @memberof GenericResourcesInnerNamedResourceSpec
     */
    'Kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResourcesInnerNamedResourceSpec
     */
    'Value'?: string;
}
/**
 * Information about the storage driver used to store the container\'s and image\'s filesystem. 
 * @export
 * @interface GraphDriverData
 */
export interface GraphDriverData {
    /**
     * Name of the storage driver.
     * @type {string}
     * @memberof GraphDriverData
     */
    'Name': string;
    /**
     * Low-level storage metadata, provided as key/value pairs.  This information is driver-specific, and depends on the storage-driver in use, and should be used for informational purposes only. 
     * @type {{ [key: string]: string; }}
     * @memberof GraphDriverData
     */
    'Data': { [key: string]: string; };
}
/**
 * Health stores information about the container\'s healthcheck results. 
 * @export
 * @interface Health
 */
export interface Health {
    /**
     * Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem 
     * @type {string}
     * @memberof Health
     */
    'Status'?: HealthStatusEnum;
    /**
     * FailingStreak is the number of consecutive failures
     * @type {number}
     * @memberof Health
     */
    'FailingStreak'?: number;
    /**
     * Log contains the last few results (oldest first) 
     * @type {Array<HealthcheckResult>}
     * @memberof Health
     */
    'Log'?: Array<HealthcheckResult>;
}

export const HealthStatusEnum = {
    None: 'none',
    Starting: 'starting',
    Healthy: 'healthy',
    Unhealthy: 'unhealthy'
} as const;

export type HealthStatusEnum = typeof HealthStatusEnum[keyof typeof HealthStatusEnum];

/**
 * A test to perform to check that the container is healthy.
 * @export
 * @interface HealthConfig
 */
export interface HealthConfig {
    /**
     * The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system\'s default shell 
     * @type {Array<string>}
     * @memberof HealthConfig
     */
    'Test'?: Array<string>;
    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    'Interval'?: number;
    /**
     * The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    'Timeout'?: number;
    /**
     * The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    'Retries'?: number;
    /**
     * Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    'StartPeriod'?: number;
    /**
     * The time to wait between checks in nanoseconds during the start period. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    'StartInterval'?: number;
}
/**
 * HealthcheckResult stores information about a single run of a healthcheck probe 
 * @export
 * @interface HealthcheckResult
 */
export interface HealthcheckResult {
    /**
     * Date and time at which this check started in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof HealthcheckResult
     */
    'Start'?: string;
    /**
     * Date and time at which this check ended in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof HealthcheckResult
     */
    'End'?: string;
    /**
     * ExitCode meanings:  - `0` healthy - `1` unhealthy - `2` reserved (considered unhealthy) - other values: error running probe 
     * @type {number}
     * @memberof HealthcheckResult
     */
    'ExitCode'?: number;
    /**
     * Output from last check
     * @type {string}
     * @memberof HealthcheckResult
     */
    'Output'?: string;
}
/**
 * individual image layer information in response to ImageHistory operation
 * @export
 * @interface HistoryResponseItem
 */
export interface HistoryResponseItem {
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    'Id': string;
    /**
     * 
     * @type {number}
     * @memberof HistoryResponseItem
     */
    'Created': number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    'CreatedBy': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof HistoryResponseItem
     */
    'Tags': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof HistoryResponseItem
     */
    'Size': number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    'Comment': string;
}
/**
 * Container configuration that depends on the host we are running on
 * @export
 * @interface HostConfig
 */
export interface HostConfig {
    /**
     * An integer value representing this container\'s relative CPU weight versus other containers. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuShares'?: number;
    /**
     * Memory limit in bytes.
     * @type {number}
     * @memberof HostConfig
     */
    'Memory'?: number;
    /**
     * Path to `cgroups` under which the container\'s `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. 
     * @type {string}
     * @memberof HostConfig
     */
    'CgroupParent'?: string;
    /**
     * Block IO weight (relative weight).
     * @type {number}
     * @memberof HostConfig
     */
    'BlkioWeight'?: number;
    /**
     * Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` 
     * @type {Array<ResourcesBlkioWeightDeviceInner>}
     * @memberof HostConfig
     */
    'BlkioWeightDevice'?: Array<ResourcesBlkioWeightDeviceInner>;
    /**
     * Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof HostConfig
     */
    'BlkioDeviceReadBps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof HostConfig
     */
    'BlkioDeviceWriteBps'?: Array<ThrottleDevice>;
    /**
     * Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof HostConfig
     */
    'BlkioDeviceReadIOps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof HostConfig
     */
    'BlkioDeviceWriteIOps'?: Array<ThrottleDevice>;
    /**
     * The length of a CPU period in microseconds.
     * @type {number}
     * @memberof HostConfig
     */
    'CpuPeriod'?: number;
    /**
     * Microseconds of CPU time that the container can get in a CPU period. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuQuota'?: number;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuRealtimePeriod'?: number;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuRealtimeRuntime'?: number;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`). 
     * @type {string}
     * @memberof HostConfig
     */
    'CpusetCpus'?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. 
     * @type {string}
     * @memberof HostConfig
     */
    'CpusetMems'?: string;
    /**
     * A list of devices to add to the container.
     * @type {Array<DeviceMapping>}
     * @memberof HostConfig
     */
    'Devices'?: Array<DeviceMapping>;
    /**
     * a list of cgroup rules to apply to the container
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'DeviceCgroupRules'?: Array<string>;
    /**
     * A list of requests for devices to be sent to device drivers. 
     * @type {Array<DeviceRequest>}
     * @memberof HostConfig
     */
    'DeviceRequests'?: Array<DeviceRequest>;
    /**
     * Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty. 
     * @type {number}
     * @memberof HostConfig
     */
    'KernelMemoryTCP'?: number;
    /**
     * Memory soft limit in bytes.
     * @type {number}
     * @memberof HostConfig
     */
    'MemoryReservation'?: number;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. 
     * @type {number}
     * @memberof HostConfig
     */
    'MemorySwap'?: number;
    /**
     * Tune a container\'s memory swappiness behavior. Accepts an integer between 0 and 100. 
     * @type {number}
     * @memberof HostConfig
     */
    'MemorySwappiness'?: number;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     * @type {number}
     * @memberof HostConfig
     */
    'NanoCpus'?: number;
    /**
     * Disable OOM Killer for the container.
     * @type {boolean}
     * @memberof HostConfig
     */
    'OomKillDisable'?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof HostConfig
     */
    'Init'?: boolean | null;
    /**
     * Tune a container\'s PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. 
     * @type {number}
     * @memberof HostConfig
     */
    'PidsLimit'?: number | null;
    /**
     * A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` 
     * @type {Array<ResourcesUlimitsInner>}
     * @memberof HostConfig
     */
    'Ulimits'?: Array<ResourcesUlimitsInner>;
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuCount'?: number;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof HostConfig
     */
    'CpuPercent'?: number;
    /**
     * Maximum IOps for the container system drive (Windows only)
     * @type {number}
     * @memberof HostConfig
     */
    'IOMaximumIOps'?: number;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only). 
     * @type {number}
     * @memberof HostConfig
     */
    'IOMaximumBandwidth'?: number;
    /**
     * A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container\'s processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'Binds'?: Array<string>;
    /**
     * Path to a file where the container ID is written
     * @type {string}
     * @memberof HostConfig
     */
    'ContainerIDFile'?: string;
    /**
     * 
     * @type {HostConfigAllOfLogConfig}
     * @memberof HostConfig
     */
    'LogConfig'?: HostConfigAllOfLogConfig;
    /**
     * Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network\'s name to which this container should connect to. 
     * @type {string}
     * @memberof HostConfig
     */
    'NetworkMode'?: string;
    /**
     * PortMap describes the mapping of container ports to host ports, using the container\'s port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container\'s port is mapped for multiple protocols, separate entries are added to the mapping table. 
     * @type {{ [key: string]: Array<PortBinding> | null; }}
     * @memberof HostConfig
     */
    'PortBindings'?: { [key: string]: Array<PortBinding> | null; };
    /**
     * 
     * @type {RestartPolicy}
     * @memberof HostConfig
     */
    'RestartPolicy'?: RestartPolicy;
    /**
     * Automatically remove the container when the container\'s process exits. This has no effect if `RestartPolicy` is set. 
     * @type {boolean}
     * @memberof HostConfig
     */
    'AutoRemove'?: boolean;
    /**
     * Driver that this container uses to mount volumes.
     * @type {string}
     * @memberof HostConfig
     */
    'VolumeDriver'?: string;
    /**
     * A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'VolumesFrom'?: Array<string>;
    /**
     * Specification for mounts to be added to the container. 
     * @type {Array<Mount>}
     * @memberof HostConfig
     */
    'Mounts'?: Array<Mount>;
    /**
     * Initial console size, as an `[height, width]` array. 
     * @type {Array<number>}
     * @memberof HostConfig
     */
    'ConsoleSize'?: Array<number> | null;
    /**
     * Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started. 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    'Annotations'?: { [key: string]: string; };
    /**
     * A list of kernel capabilities to add to the container. Conflicts with option \'Capabilities\'. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'CapAdd'?: Array<string>;
    /**
     * A list of kernel capabilities to drop from the container. Conflicts with option \'Capabilities\'. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'CapDrop'?: Array<string>;
    /**
     * cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system\'s cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. 
     * @type {string}
     * @memberof HostConfig
     */
    'CgroupnsMode'?: HostConfigCgroupnsModeEnum;
    /**
     * A list of DNS servers for the container to use.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'Dns'?: Array<string>;
    /**
     * A list of DNS options.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'DnsOptions'?: Array<string>;
    /**
     * A list of DNS search domains.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'DnsSearch'?: Array<string>;
    /**
     * A list of hostnames/IP mappings to add to the container\'s `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'ExtraHosts'?: Array<string>;
    /**
     * A list of additional groups that the container process will run as. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'GroupAdd'?: Array<string>;
    /**
     * IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container\'s IPC namespace - `\"host\"`: use the host system\'s IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. 
     * @type {string}
     * @memberof HostConfig
     */
    'IpcMode'?: string;
    /**
     * Cgroup to use for the container.
     * @type {string}
     * @memberof HostConfig
     */
    'Cgroup'?: string;
    /**
     * A list of links for the container in the form `container_name:alias`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'Links'?: Array<string>;
    /**
     * An integer value containing the score given to the container in order to tune OOM killer preferences. 
     * @type {number}
     * @memberof HostConfig
     */
    'OomScoreAdj'?: number;
    /**
     * Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container\'s PID namespace - `\"host\"`: use the host\'s PID namespace inside the container 
     * @type {string}
     * @memberof HostConfig
     */
    'PidMode'?: string;
    /**
     * Gives the container full access to the host.
     * @type {boolean}
     * @memberof HostConfig
     */
    'Privileged'?: boolean;
    /**
     * Allocates an ephemeral host port for all of a container\'s exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. 
     * @type {boolean}
     * @memberof HostConfig
     */
    'PublishAllPorts'?: boolean;
    /**
     * Mount the container\'s root filesystem as read only.
     * @type {boolean}
     * @memberof HostConfig
     */
    'ReadonlyRootfs'?: boolean;
    /**
     * A list of string values to customize labels for MLS systems, such as SELinux. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'SecurityOpt'?: Array<string>;
    /**
     * Storage driver options for this container, in the form `{\"size\": \"120G\"}`. 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    'StorageOpt'?: { [key: string]: string; };
    /**
     * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ``` 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    'Tmpfs'?: { [key: string]: string; };
    /**
     * UTS namespace to use for the container.
     * @type {string}
     * @memberof HostConfig
     */
    'UTSMode'?: string;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled. 
     * @type {string}
     * @memberof HostConfig
     */
    'UsernsMode'?: string;
    /**
     * Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. 
     * @type {number}
     * @memberof HostConfig
     */
    'ShmSize'?: number;
    /**
     * A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ``` 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    'Sysctls'?: { [key: string]: string; };
    /**
     * Runtime to use with this container.
     * @type {string}
     * @memberof HostConfig
     */
    'Runtime'?: string;
    /**
     * Isolation technology of the container. (Windows only) 
     * @type {string}
     * @memberof HostConfig
     */
    'Isolation'?: HostConfigIsolationEnum;
    /**
     * The list of paths to be masked inside the container (this overrides the default set of paths). 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'MaskedPaths'?: Array<string>;
    /**
     * The list of paths to be set as read-only inside the container (this overrides the default set of paths). 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    'ReadonlyPaths'?: Array<string>;
}

export const HostConfigCgroupnsModeEnum = {
    Private: 'private',
    Host: 'host'
} as const;

export type HostConfigCgroupnsModeEnum = typeof HostConfigCgroupnsModeEnum[keyof typeof HostConfigCgroupnsModeEnum];
export const HostConfigIsolationEnum = {
    Default: 'default',
    Process: 'process',
    Hyperv: 'hyperv'
} as const;

export type HostConfigIsolationEnum = typeof HostConfigIsolationEnum[keyof typeof HostConfigIsolationEnum];

/**
 * The logging configuration for this container
 * @export
 * @interface HostConfigAllOfLogConfig
 */
export interface HostConfigAllOfLogConfig {
    /**
     * 
     * @type {string}
     * @memberof HostConfigAllOfLogConfig
     */
    'Type'?: HostConfigAllOfLogConfigTypeEnum;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfigAllOfLogConfig
     */
    'Config'?: { [key: string]: string; };
}

export const HostConfigAllOfLogConfigTypeEnum = {
    JsonFile: 'json-file',
    Syslog: 'syslog',
    Journald: 'journald',
    Gelf: 'gelf',
    Fluentd: 'fluentd',
    Awslogs: 'awslogs',
    Splunk: 'splunk',
    Etwlogs: 'etwlogs',
    None: 'none'
} as const;

export type HostConfigAllOfLogConfigTypeEnum = typeof HostConfigAllOfLogConfigTypeEnum[keyof typeof HostConfigAllOfLogConfigTypeEnum];

/**
 * 
 * @export
 * @interface IPAM
 */
export interface IPAM {
    /**
     * Name of the IPAM driver to use.
     * @type {string}
     * @memberof IPAM
     */
    'Driver'?: string;
    /**
     * List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ``` 
     * @type {Array<IPAMConfig>}
     * @memberof IPAM
     */
    'Config'?: Array<IPAMConfig>;
    /**
     * Driver-specific options, specified as a map.
     * @type {{ [key: string]: string; }}
     * @memberof IPAM
     */
    'Options'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IPAMConfig
 */
export interface IPAMConfig {
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    'Subnet'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    'IPRange'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    'Gateway'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IPAMConfig
     */
    'AuxiliaryAddresses'?: { [key: string]: string; };
}
/**
 * Response to an API call that returns just an Id
 * @export
 * @interface IdResponse
 */
export interface IdResponse {
    /**
     * The id of the newly created object.
     * @type {string}
     * @memberof IdResponse
     */
    'Id': string;
}
/**
 * Configuration of the image. These fields are used as defaults when starting a container from the image. 
 * @export
 * @interface ImageConfig
 */
export interface ImageConfig {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname.  <p><br /></p>  > **Note**: this field is always empty and must not be used. 
     * @type {string}
     * @memberof ImageConfig
     */
    'Hostname'?: string;
    /**
     * The domain name to use for the container.  <p><br /></p>  > **Note**: this field is always empty and must not be used. 
     * @type {string}
     * @memberof ImageConfig
     */
    'Domainname'?: string;
    /**
     * The user that commands are run as inside the container.
     * @type {string}
     * @memberof ImageConfig
     */
    'User'?: string;
    /**
     * Whether to attach to `stdin`.  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'AttachStdin'?: boolean;
    /**
     * Whether to attach to `stdout`.  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'AttachStdout'?: boolean;
    /**
     * Whether to attach to `stderr`.  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'AttachStderr'?: boolean;
    /**
     * An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` 
     * @type {{ [key: string]: object; }}
     * @memberof ImageConfig
     */
    'ExposedPorts'?: { [key: string]: object; } | null;
    /**
     * Attach standard streams to a TTY, including `stdin` if it is not closed.  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'Tty'?: boolean;
    /**
     * Open `stdin`  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'OpenStdin'?: boolean;
    /**
     * Close `stdin` after one attached client disconnects.  <p><br /></p>  > **Note**: this field is always false and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'StdinOnce'?: boolean;
    /**
     * A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. 
     * @type {Array<string>}
     * @memberof ImageConfig
     */
    'Env'?: Array<string>;
    /**
     * Command to run specified as a string or an array of strings. 
     * @type {Array<string>}
     * @memberof ImageConfig
     */
    'Cmd'?: Array<string>;
    /**
     * 
     * @type {HealthConfig}
     * @memberof ImageConfig
     */
    'Healthcheck'?: HealthConfig;
    /**
     * Command is already escaped (Windows only)
     * @type {boolean}
     * @memberof ImageConfig
     */
    'ArgsEscaped'?: boolean | null;
    /**
     * The name (or reference) of the image to use when creating the container, or which was used when the container was created.  <p><br /></p>  > **Note**: this field is always empty and must not be used. 
     * @type {string}
     * @memberof ImageConfig
     */
    'Image'?: string;
    /**
     * An object mapping mount point paths inside the container to empty objects. 
     * @type {{ [key: string]: object; }}
     * @memberof ImageConfig
     */
    'Volumes'?: { [key: string]: object; };
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof ImageConfig
     */
    'WorkingDir'?: string;
    /**
     * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). 
     * @type {Array<string>}
     * @memberof ImageConfig
     */
    'Entrypoint'?: Array<string>;
    /**
     * Disable networking for the container.  <p><br /></p>  > **Note**: this field is always omitted and must not be used. 
     * @type {boolean}
     * @memberof ImageConfig
     */
    'NetworkDisabled'?: boolean | null;
    /**
     * MAC address of the container.  <p><br /></p>  > **Deprecated**: this field is deprecated in API v1.44 and up. It is always omitted. 
     * @type {string}
     * @memberof ImageConfig
     */
    'MacAddress'?: string | null;
    /**
     * `ONBUILD` metadata that were defined in the image\'s `Dockerfile`. 
     * @type {Array<string>}
     * @memberof ImageConfig
     */
    'OnBuild'?: Array<string> | null;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ImageConfig
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Signal to stop a container as a string or unsigned integer. 
     * @type {string}
     * @memberof ImageConfig
     */
    'StopSignal'?: string | null;
    /**
     * Timeout to stop a container in seconds.  <p><br /></p>  > **Note**: this field is always omitted and must not be used. 
     * @type {number}
     * @memberof ImageConfig
     */
    'StopTimeout'?: number | null;
    /**
     * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. 
     * @type {Array<string>}
     * @memberof ImageConfig
     */
    'Shell'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ImageDeleteResponseItem
 */
export interface ImageDeleteResponseItem {
    /**
     * The image ID of an image that was untagged
     * @type {string}
     * @memberof ImageDeleteResponseItem
     */
    'Untagged'?: string;
    /**
     * The image ID of an image that was deleted
     * @type {string}
     * @memberof ImageDeleteResponseItem
     */
    'Deleted'?: string;
}
/**
 * Image ID or Digest
 * @export
 * @interface ImageID
 */
export interface ImageID {
    /**
     * 
     * @type {string}
     * @memberof ImageID
     */
    'ID'?: string;
}
/**
 * Information about an image in the local image cache. 
 * @export
 * @interface ImageInspect
 */
export interface ImageInspect {
    /**
     * ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image\'s configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Id'?: string;
    /**
     * List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID. 
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    'RepoTags'?: Array<string>;
    /**
     * List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. 
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    'RepoDigests'?: Array<string>;
    /**
     * ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Parent'?: string;
    /**
     * Optional message that was set when committing or importing the image. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Comment'?: string;
    /**
     * Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if present in the image, and omitted otherwise. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Created'?: string | null;
    /**
     * The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty. 
     * @type {string}
     * @memberof ImageInspect
     */
    'DockerVersion'?: string;
    /**
     * Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Author'?: string;
    /**
     * 
     * @type {ImageConfig}
     * @memberof ImageInspect
     */
    'Config'?: ImageConfig;
    /**
     * Hardware CPU architecture that the image runs on. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Architecture'?: string;
    /**
     * CPU architecture variant (presently ARM-only). 
     * @type {string}
     * @memberof ImageInspect
     */
    'Variant'?: string | null;
    /**
     * Operating System the image is built to run on. 
     * @type {string}
     * @memberof ImageInspect
     */
    'Os'?: string;
    /**
     * Operating System version the image is built to run on (especially for Windows). 
     * @type {string}
     * @memberof ImageInspect
     */
    'OsVersion'?: string | null;
    /**
     * Total size of the image including all layers it is composed of. 
     * @type {number}
     * @memberof ImageInspect
     */
    'Size'?: number;
    /**
     * Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead. 
     * @type {number}
     * @memberof ImageInspect
     */
    'VirtualSize'?: number;
    /**
     * 
     * @type {GraphDriverData}
     * @memberof ImageInspect
     */
    'GraphDriver'?: GraphDriverData;
    /**
     * 
     * @type {ImageInspectRootFS}
     * @memberof ImageInspect
     */
    'RootFS'?: ImageInspectRootFS;
    /**
     * 
     * @type {ImageInspectMetadata}
     * @memberof ImageInspect
     */
    'Metadata'?: ImageInspectMetadata;
}
/**
 * Additional metadata of the image in the local cache. This information is local to the daemon, and not part of the image itself. 
 * @export
 * @interface ImageInspectMetadata
 */
export interface ImageInspectMetadata {
    /**
     * Date and time at which the image was last tagged in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if the image was tagged locally, and omitted otherwise. 
     * @type {string}
     * @memberof ImageInspectMetadata
     */
    'LastTagTime'?: string | null;
}
/**
 * Information about the image\'s RootFS, including the layer IDs. 
 * @export
 * @interface ImageInspectRootFS
 */
export interface ImageInspectRootFS {
    /**
     * 
     * @type {string}
     * @memberof ImageInspectRootFS
     */
    'Type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageInspectRootFS
     */
    'Layers'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ImagePruneResponse
 */
export interface ImagePruneResponse {
    /**
     * Images that were deleted
     * @type {Array<ImageDeleteResponseItem>}
     * @memberof ImagePruneResponse
     */
    'ImagesDeleted'?: Array<ImageDeleteResponseItem>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof ImagePruneResponse
     */
    'SpaceReclaimed'?: number;
}
/**
 * 
 * @export
 * @interface ImageSearchResponseItem
 */
export interface ImageSearchResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ImageSearchResponseItem
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ImageSearchResponseItem
     */
    'is_official'?: boolean;
    /**
     * Whether this repository has automated builds enabled.  <p><br /></p>  > **Deprecated**: This field is deprecated and will always be \"false\". 
     * @type {boolean}
     * @memberof ImageSearchResponseItem
     */
    'is_automated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageSearchResponseItem
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageSearchResponseItem
     */
    'star_count'?: number;
}
/**
 * 
 * @export
 * @interface ImageSummary
 */
export interface ImageSummary {
    /**
     * ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image\'s configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image. 
     * @type {string}
     * @memberof ImageSummary
     */
    'Id': string;
    /**
     * ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. 
     * @type {string}
     * @memberof ImageSummary
     */
    'ParentId': string;
    /**
     * List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID. 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    'RepoTags': Array<string>;
    /**
     * List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    'RepoDigests': Array<string>;
    /**
     * Date and time at which the image was created as a Unix timestamp (number of seconds since EPOCH). 
     * @type {number}
     * @memberof ImageSummary
     */
    'Created': number;
    /**
     * Total size of the image including all layers it is composed of. 
     * @type {number}
     * @memberof ImageSummary
     */
    'Size': number;
    /**
     * Total size of image layers that are shared between this image and other images.  This size is not calculated by default. `-1` indicates that the value has not been set / calculated. 
     * @type {number}
     * @memberof ImageSummary
     */
    'SharedSize': number;
    /**
     * Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     * @type {number}
     * @memberof ImageSummary
     */
    'VirtualSize'?: number;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ImageSummary
     */
    'Labels': { [key: string]: string; };
    /**
     * Number of containers using this image. Includes both stopped and running containers.  This size is not calculated by default, and depends on which API endpoint is used. `-1` indicates that the value has not been set / calculated. 
     * @type {number}
     * @memberof ImageSummary
     */
    'Containers': number;
}
/**
 * IndexInfo contains information about a registry.
 * @export
 * @interface IndexInfo
 */
export interface IndexInfo {
    /**
     * Name of the registry, such as \"docker.io\". 
     * @type {string}
     * @memberof IndexInfo
     */
    'Name'?: string;
    /**
     * List of mirrors, expressed as URIs. 
     * @type {Array<string>}
     * @memberof IndexInfo
     */
    'Mirrors'?: Array<string>;
    /**
     * Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system\'s list of > trusted CAs instead of enabling this option. 
     * @type {boolean}
     * @memberof IndexInfo
     */
    'Secure'?: boolean;
    /**
     * Indicates whether this is an official registry (i.e., Docker Hub / docker.io) 
     * @type {boolean}
     * @memberof IndexInfo
     */
    'Official'?: boolean;
}
/**
 * JoinTokens contains the tokens workers and managers need to join the swarm. 
 * @export
 * @interface JoinTokens
 */
export interface JoinTokens {
    /**
     * The token workers can use to join the swarm. 
     * @type {string}
     * @memberof JoinTokens
     */
    'Worker'?: string;
    /**
     * The token managers can use to join the swarm. 
     * @type {string}
     * @memberof JoinTokens
     */
    'Manager'?: string;
}
/**
 * An object describing a limit on resources which can be requested by a task. 
 * @export
 * @interface Limit
 */
export interface Limit {
    /**
     * 
     * @type {number}
     * @memberof Limit
     */
    'NanoCPUs'?: number;
    /**
     * 
     * @type {number}
     * @memberof Limit
     */
    'MemoryBytes'?: number;
    /**
     * Limits the maximum number of PIDs in the container. Set `0` for unlimited. 
     * @type {number}
     * @memberof Limit
     */
    'Pids'?: number;
}
/**
 * Current local status of this node.
 * @export
 * @enum {string}
 */

export const LocalNodeState = {
    Empty: '',
    Inactive: 'inactive',
    Pending: 'pending',
    Active: 'active',
    Error: 'error',
    Locked: 'locked'
} as const;

export type LocalNodeState = typeof LocalNodeState[keyof typeof LocalNodeState];


/**
 * ManagerStatus represents the status of a manager.  It provides the current status of a node\'s manager component, if the node is a manager. 
 * @export
 * @interface ManagerStatus
 */
export interface ManagerStatus {
    /**
     * 
     * @type {boolean}
     * @memberof ManagerStatus
     */
    'Leader'?: boolean;
    /**
     * 
     * @type {Reachability}
     * @memberof ManagerStatus
     */
    'Reachability'?: Reachability;
    /**
     * The IP address and port at which the manager is reachable. 
     * @type {string}
     * @memberof ManagerStatus
     */
    'Addr'?: string;
}


/**
 * 
 * @export
 * @interface Mount
 */
export interface Mount {
    /**
     * Container path.
     * @type {string}
     * @memberof Mount
     */
    'Target'?: string;
    /**
     * Mount source (e.g. a volume name, a host path).
     * @type {string}
     * @memberof Mount
     */
    'Source'?: string;
    /**
     * The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container. - `cluster` a Swarm cluster volume 
     * @type {string}
     * @memberof Mount
     */
    'Type'?: MountTypeEnum;
    /**
     * Whether the mount should be read-only.
     * @type {boolean}
     * @memberof Mount
     */
    'ReadOnly'?: boolean;
    /**
     * The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
     * @type {string}
     * @memberof Mount
     */
    'Consistency'?: string;
    /**
     * 
     * @type {MountBindOptions}
     * @memberof Mount
     */
    'BindOptions'?: MountBindOptions;
    /**
     * 
     * @type {MountVolumeOptions}
     * @memberof Mount
     */
    'VolumeOptions'?: MountVolumeOptions;
    /**
     * 
     * @type {MountTmpfsOptions}
     * @memberof Mount
     */
    'TmpfsOptions'?: MountTmpfsOptions;
}

export const MountTypeEnum = {
    Bind: 'bind',
    Volume: 'volume',
    Tmpfs: 'tmpfs',
    Npipe: 'npipe',
    Cluster: 'cluster'
} as const;

export type MountTypeEnum = typeof MountTypeEnum[keyof typeof MountTypeEnum];

/**
 * Optional configuration for the `bind` type.
 * @export
 * @interface MountBindOptions
 */
export interface MountBindOptions {
    /**
     * A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
     * @type {string}
     * @memberof MountBindOptions
     */
    'Propagation'?: MountBindOptionsPropagationEnum;
    /**
     * Disable recursive bind mount.
     * @type {boolean}
     * @memberof MountBindOptions
     */
    'NonRecursive'?: boolean;
    /**
     * Create mount point on host if missing
     * @type {boolean}
     * @memberof MountBindOptions
     */
    'CreateMountpoint'?: boolean;
    /**
     * Make the mount non-recursively read-only, but still leave the mount recursive (unless NonRecursive is set to `true` in conjunction).  Added in v1.44, before that version all read-only mounts were non-recursive by default. To match the previous behaviour this will default to `true` for clients on versions prior to v1.44. 
     * @type {boolean}
     * @memberof MountBindOptions
     */
    'ReadOnlyNonRecursive'?: boolean;
    /**
     * Raise an error if the mount cannot be made recursively read-only.
     * @type {boolean}
     * @memberof MountBindOptions
     */
    'ReadOnlyForceRecursive'?: boolean;
}

export const MountBindOptionsPropagationEnum = {
    Private: 'private',
    Rprivate: 'rprivate',
    Shared: 'shared',
    Rshared: 'rshared',
    Slave: 'slave',
    Rslave: 'rslave'
} as const;

export type MountBindOptionsPropagationEnum = typeof MountBindOptionsPropagationEnum[keyof typeof MountBindOptionsPropagationEnum];

/**
 * MountPoint represents a mount point configuration inside the container. This is used for reporting the mountpoints in use by a container. 
 * @export
 * @interface MountPoint
 */
export interface MountPoint {
    /**
     * The mount type:  - `bind` a mount of a file or directory from the host into the container. - `volume` a docker volume with the given `Name`. - `tmpfs` a `tmpfs`. - `npipe` a named pipe from the host into the container. - `cluster` a Swarm cluster volume 
     * @type {string}
     * @memberof MountPoint
     */
    'Type'?: MountPointTypeEnum;
    /**
     * Name is the name reference to the underlying data defined by `Source` e.g., the volume name. 
     * @type {string}
     * @memberof MountPoint
     */
    'Name'?: string;
    /**
     * Source location of the mount.  For volumes, this contains the storage location of the volume (within `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains the source (host) part of the bind-mount. For `tmpfs` mount points, this field is empty. 
     * @type {string}
     * @memberof MountPoint
     */
    'Source'?: string;
    /**
     * Destination is the path relative to the container root (`/`) where the `Source` is mounted inside the container. 
     * @type {string}
     * @memberof MountPoint
     */
    'Destination'?: string;
    /**
     * Driver is the volume driver used to create the volume (if it is a volume). 
     * @type {string}
     * @memberof MountPoint
     */
    'Driver'?: string;
    /**
     * Mode is a comma separated list of options supplied by the user when creating the bind/volume mount.  The default is platform-specific (`\"z\"` on Linux, empty on Windows). 
     * @type {string}
     * @memberof MountPoint
     */
    'Mode'?: string;
    /**
     * Whether the mount is mounted writable (read-write). 
     * @type {boolean}
     * @memberof MountPoint
     */
    'RW'?: boolean;
    /**
     * Propagation describes how mounts are propagated from the host into the mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt) for details. This field is not used on Windows. 
     * @type {string}
     * @memberof MountPoint
     */
    'Propagation'?: string;
}

export const MountPointTypeEnum = {
    Bind: 'bind',
    Volume: 'volume',
    Tmpfs: 'tmpfs',
    Npipe: 'npipe',
    Cluster: 'cluster'
} as const;

export type MountPointTypeEnum = typeof MountPointTypeEnum[keyof typeof MountPointTypeEnum];

/**
 * Optional configuration for the `tmpfs` type.
 * @export
 * @interface MountTmpfsOptions
 */
export interface MountTmpfsOptions {
    /**
     * The size for the tmpfs mount in bytes.
     * @type {number}
     * @memberof MountTmpfsOptions
     */
    'SizeBytes'?: number;
    /**
     * The permission mode for the tmpfs mount in an integer.
     * @type {number}
     * @memberof MountTmpfsOptions
     */
    'Mode'?: number;
}
/**
 * Optional configuration for the `volume` type.
 * @export
 * @interface MountVolumeOptions
 */
export interface MountVolumeOptions {
    /**
     * Populate volume with data from the target.
     * @type {boolean}
     * @memberof MountVolumeOptions
     */
    'NoCopy'?: boolean;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof MountVolumeOptions
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {MountVolumeOptionsDriverConfig}
     * @memberof MountVolumeOptions
     */
    'DriverConfig'?: MountVolumeOptionsDriverConfig;
    /**
     * Source path inside the volume. Must be relative without any back traversals.
     * @type {string}
     * @memberof MountVolumeOptions
     */
    'Subpath'?: string;
}
/**
 * Map of driver specific options
 * @export
 * @interface MountVolumeOptionsDriverConfig
 */
export interface MountVolumeOptionsDriverConfig {
    /**
     * Name of the driver to use to create the volume.
     * @type {string}
     * @memberof MountVolumeOptionsDriverConfig
     */
    'Name'?: string;
    /**
     * key/value map of driver specific options.
     * @type {{ [key: string]: string; }}
     * @memberof MountVolumeOptionsDriverConfig
     */
    'Options'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Network
 */
export interface Network {
    /**
     * Name of the network. 
     * @type {string}
     * @memberof Network
     */
    'Name'?: string;
    /**
     * ID that uniquely identifies a network on a single machine. 
     * @type {string}
     * @memberof Network
     */
    'Id'?: string;
    /**
     * Date and time at which the network was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Network
     */
    'Created'?: string;
    /**
     * The level at which the network exists (e.g. `swarm` for cluster-wide or `local` for machine level) 
     * @type {string}
     * @memberof Network
     */
    'Scope'?: string;
    /**
     * The name of the driver used to create the network (e.g. `bridge`, `overlay`). 
     * @type {string}
     * @memberof Network
     */
    'Driver'?: string;
    /**
     * Whether the network was created with IPv6 enabled. 
     * @type {boolean}
     * @memberof Network
     */
    'EnableIPv6'?: boolean;
    /**
     * 
     * @type {IPAM}
     * @memberof Network
     */
    'IPAM'?: IPAM;
    /**
     * Whether the network is created to only allow internal networking connectivity. 
     * @type {boolean}
     * @memberof Network
     */
    'Internal'?: boolean;
    /**
     * Whether a global / swarm scope network is manually attachable by regular containers from workers in swarm mode. 
     * @type {boolean}
     * @memberof Network
     */
    'Attachable'?: boolean;
    /**
     * Whether the network is providing the routing-mesh for the swarm cluster. 
     * @type {boolean}
     * @memberof Network
     */
    'Ingress'?: boolean;
    /**
     * 
     * @type {ConfigReference}
     * @memberof Network
     */
    'ConfigFrom'?: ConfigReference;
    /**
     * Whether the network is a config-only network. Config-only networks are placeholder networks for network configurations to be used by other networks. Config-only networks cannot be used directly to run containers or services. 
     * @type {boolean}
     * @memberof Network
     */
    'ConfigOnly'?: boolean;
    /**
     * Contains endpoints attached to the network. 
     * @type {{ [key: string]: NetworkContainer; }}
     * @memberof Network
     */
    'Containers'?: { [key: string]: NetworkContainer; };
    /**
     * Network-specific options uses when creating the network. 
     * @type {{ [key: string]: string; }}
     * @memberof Network
     */
    'Options'?: { [key: string]: string; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Network
     */
    'Labels'?: { [key: string]: string; };
    /**
     * List of peer nodes for an overlay network. This field is only present for overlay networks, and omitted for other network types. 
     * @type {Array<PeerInfo>}
     * @memberof Network
     */
    'Peers'?: Array<PeerInfo> | null;
}
/**
 * Specifies how a service should be attached to a particular network. 
 * @export
 * @interface NetworkAttachmentConfig
 */
export interface NetworkAttachmentConfig {
    /**
     * The target network for attachment. Must be a network name or ID. 
     * @type {string}
     * @memberof NetworkAttachmentConfig
     */
    'Target'?: string;
    /**
     * Discoverable alternate names for the service on this network. 
     * @type {Array<string>}
     * @memberof NetworkAttachmentConfig
     */
    'Aliases'?: Array<string>;
    /**
     * Driver attachment options for the network target. 
     * @type {{ [key: string]: string; }}
     * @memberof NetworkAttachmentConfig
     */
    'DriverOpts'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface NetworkConnectRequest
 */
export interface NetworkConnectRequest {
    /**
     * The ID or name of the container to connect to the network.
     * @type {string}
     * @memberof NetworkConnectRequest
     */
    'Container'?: string;
    /**
     * 
     * @type {EndpointSettings}
     * @memberof NetworkConnectRequest
     */
    'EndpointConfig'?: EndpointSettings;
}
/**
 * 
 * @export
 * @interface NetworkContainer
 */
export interface NetworkContainer {
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    'EndpointID'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    'MacAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    'IPv4Address'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    'IPv6Address'?: string;
}
/**
 * 
 * @export
 * @interface NetworkCreateRequest
 */
export interface NetworkCreateRequest {
    /**
     * The network\'s name.
     * @type {string}
     * @memberof NetworkCreateRequest
     */
    'Name': string;
    /**
     * Deprecated: CheckDuplicate is now always enabled. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'CheckDuplicate'?: boolean;
    /**
     * Name of the network driver plugin to use.
     * @type {string}
     * @memberof NetworkCreateRequest
     */
    'Driver'?: string;
    /**
     * The level at which the network exists (e.g. `swarm` for cluster-wide or `local` for machine level). 
     * @type {string}
     * @memberof NetworkCreateRequest
     */
    'Scope'?: string;
    /**
     * Restrict external access to the network.
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'Internal'?: boolean;
    /**
     * Globally scoped network is manually attachable by regular containers from workers in swarm mode. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'Attachable'?: boolean;
    /**
     * Ingress network is the network which provides the routing-mesh in swarm mode. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'Ingress'?: boolean;
    /**
     * Creates a config-only network. Config-only networks are placeholder networks for network configurations to be used by other networks. Config-only networks cannot be used directly to run containers or services. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'ConfigOnly'?: boolean;
    /**
     * 
     * @type {ConfigReference}
     * @memberof NetworkCreateRequest
     */
    'ConfigFrom'?: ConfigReference;
    /**
     * 
     * @type {IPAM}
     * @memberof NetworkCreateRequest
     */
    'IPAM'?: IPAM;
    /**
     * Enable IPv6 on the network.
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    'EnableIPv6'?: boolean;
    /**
     * Network specific options to be used by the drivers.
     * @type {{ [key: string]: string; }}
     * @memberof NetworkCreateRequest
     */
    'Options'?: { [key: string]: string; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof NetworkCreateRequest
     */
    'Labels'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface NetworkCreateResponse
 */
export interface NetworkCreateResponse {
    /**
     * The ID of the created network.
     * @type {string}
     * @memberof NetworkCreateResponse
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkCreateResponse
     */
    'Warning'?: string;
}
/**
 * 
 * @export
 * @interface NetworkDisconnectRequest
 */
export interface NetworkDisconnectRequest {
    /**
     * The ID or name of the container to disconnect from the network. 
     * @type {string}
     * @memberof NetworkDisconnectRequest
     */
    'Container'?: string;
    /**
     * Force the container to disconnect from the network. 
     * @type {boolean}
     * @memberof NetworkDisconnectRequest
     */
    'Force'?: boolean;
}
/**
 * 
 * @export
 * @interface NetworkPruneResponse
 */
export interface NetworkPruneResponse {
    /**
     * Networks that were deleted
     * @type {Array<string>}
     * @memberof NetworkPruneResponse
     */
    'NetworksDeleted'?: Array<string>;
}
/**
 * NetworkSettings exposes the network settings in the API
 * @export
 * @interface NetworkSettings
 */
export interface NetworkSettings {
    /**
     * Name of the default bridge interface when dockerd\'s --bridge flag is set. 
     * @type {string}
     * @memberof NetworkSettings
     */
    'Bridge'?: string;
    /**
     * SandboxID uniquely represents a container\'s network stack.
     * @type {string}
     * @memberof NetworkSettings
     */
    'SandboxID'?: string;
    /**
     * Indicates if hairpin NAT should be enabled on the virtual interface.  Deprecated: This field is never set and will be removed in a future release. 
     * @type {boolean}
     * @memberof NetworkSettings
     */
    'HairpinMode'?: boolean;
    /**
     * IPv6 unicast address using the link-local prefix.  Deprecated: This field is never set and will be removed in a future release. 
     * @type {string}
     * @memberof NetworkSettings
     */
    'LinkLocalIPv6Address'?: string;
    /**
     * Prefix length of the IPv6 unicast address.  Deprecated: This field is never set and will be removed in a future release. 
     * @type {number}
     * @memberof NetworkSettings
     */
    'LinkLocalIPv6PrefixLen'?: number;
    /**
     * PortMap describes the mapping of container ports to host ports, using the container\'s port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container\'s port is mapped for multiple protocols, separate entries are added to the mapping table. 
     * @type {{ [key: string]: Array<PortBinding> | null; }}
     * @memberof NetworkSettings
     */
    'Ports'?: { [key: string]: Array<PortBinding> | null; };
    /**
     * SandboxKey is the full path of the netns handle
     * @type {string}
     * @memberof NetworkSettings
     */
    'SandboxKey'?: string;
    /**
     * Deprecated: This field is never set and will be removed in a future release.
     * @type {Array<Address>}
     * @memberof NetworkSettings
     */
    'SecondaryIPAddresses'?: Array<Address> | null;
    /**
     * Deprecated: This field is never set and will be removed in a future release.
     * @type {Array<Address>}
     * @memberof NetworkSettings
     */
    'SecondaryIPv6Addresses'?: Array<Address> | null;
    /**
     * EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'EndpointID'?: string;
    /**
     * Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'Gateway'?: string;
    /**
     * Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'GlobalIPv6Address'?: string;
    /**
     * Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {number}
     * @memberof NetworkSettings
     */
    'GlobalIPv6PrefixLen'?: number;
    /**
     * IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'IPAddress'?: string;
    /**
     * Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {number}
     * @memberof NetworkSettings
     */
    'IPPrefixLen'?: number;
    /**
     * IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'IPv6Gateway'?: string;
    /**
     * MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    'MacAddress'?: string;
    /**
     * Information about all networks that the container is connected to. 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof NetworkSettings
     */
    'Networks'?: { [key: string]: EndpointSettings; };
}
/**
 * NetworkingConfig represents the container\'s networking configuration for each of its interfaces. It is used for the networking configs specified in the `docker create` and `docker network connect` commands. 
 * @export
 * @interface NetworkingConfig
 */
export interface NetworkingConfig {
    /**
     * A mapping of network name to endpoint configuration for that network. The endpoint configuration can be left empty to connect to that network with no particular endpoint configuration. 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof NetworkingConfig
     */
    'EndpointsConfig'?: { [key: string]: EndpointSettings; };
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Node
     */
    'Version'?: ObjectVersion;
    /**
     * Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Node
     */
    'CreatedAt'?: string;
    /**
     * Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Node
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {NodeSpec}
     * @memberof Node
     */
    'Spec'?: NodeSpec;
    /**
     * 
     * @type {NodeDescription}
     * @memberof Node
     */
    'Description'?: NodeDescription;
    /**
     * 
     * @type {NodeStatus}
     * @memberof Node
     */
    'Status'?: NodeStatus;
    /**
     * 
     * @type {ManagerStatus}
     * @memberof Node
     */
    'ManagerStatus'?: ManagerStatus | null;
}
/**
 * NodeDescription encapsulates the properties of the Node as reported by the agent. 
 * @export
 * @interface NodeDescription
 */
export interface NodeDescription {
    /**
     * 
     * @type {string}
     * @memberof NodeDescription
     */
    'Hostname'?: string;
    /**
     * 
     * @type {Platform}
     * @memberof NodeDescription
     */
    'Platform'?: Platform;
    /**
     * 
     * @type {ResourceObject}
     * @memberof NodeDescription
     */
    'Resources'?: ResourceObject;
    /**
     * 
     * @type {EngineDescription}
     * @memberof NodeDescription
     */
    'Engine'?: EngineDescription;
    /**
     * 
     * @type {TLSInfo}
     * @memberof NodeDescription
     */
    'TLSInfo'?: TLSInfo;
}
/**
 * 
 * @export
 * @interface NodeSpec
 */
export interface NodeSpec {
    /**
     * Name for the node.
     * @type {string}
     * @memberof NodeSpec
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof NodeSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Role of the node.
     * @type {string}
     * @memberof NodeSpec
     */
    'Role'?: NodeSpecRoleEnum;
    /**
     * Availability of the node.
     * @type {string}
     * @memberof NodeSpec
     */
    'Availability'?: NodeSpecAvailabilityEnum;
}

export const NodeSpecRoleEnum = {
    Worker: 'worker',
    Manager: 'manager'
} as const;

export type NodeSpecRoleEnum = typeof NodeSpecRoleEnum[keyof typeof NodeSpecRoleEnum];
export const NodeSpecAvailabilityEnum = {
    Active: 'active',
    Pause: 'pause',
    Drain: 'drain'
} as const;

export type NodeSpecAvailabilityEnum = typeof NodeSpecAvailabilityEnum[keyof typeof NodeSpecAvailabilityEnum];

/**
 * NodeState represents the state of a node.
 * @export
 * @enum {string}
 */

export const NodeState = {
    Unknown: 'unknown',
    Down: 'down',
    Ready: 'ready',
    Disconnected: 'disconnected'
} as const;

export type NodeState = typeof NodeState[keyof typeof NodeState];


/**
 * NodeStatus represents the status of a node.  It provides the current status of the node, as seen by the manager. 
 * @export
 * @interface NodeStatus
 */
export interface NodeStatus {
    /**
     * 
     * @type {NodeState}
     * @memberof NodeStatus
     */
    'State'?: NodeState;
    /**
     * 
     * @type {string}
     * @memberof NodeStatus
     */
    'Message'?: string;
    /**
     * IP address of the node.
     * @type {string}
     * @memberof NodeStatus
     */
    'Addr'?: string;
}


/**
 * A descriptor struct containing digest, media type, and size, as defined in the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md). 
 * @export
 * @interface OCIDescriptor
 */
export interface OCIDescriptor {
    /**
     * The media type of the object this schema refers to. 
     * @type {string}
     * @memberof OCIDescriptor
     */
    'mediaType'?: string;
    /**
     * The digest of the targeted content. 
     * @type {string}
     * @memberof OCIDescriptor
     */
    'digest'?: string;
    /**
     * The size in bytes of the blob. 
     * @type {number}
     * @memberof OCIDescriptor
     */
    'size'?: number;
}
/**
 * Describes the platform which the image in the manifest runs on, as defined in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md). 
 * @export
 * @interface OCIPlatform
 */
export interface OCIPlatform {
    /**
     * The CPU architecture, for example `amd64` or `ppc64`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    'architecture'?: string;
    /**
     * The operating system, for example `linux` or `windows`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    'os'?: string;
    /**
     * Optional field specifying the operating system version, for example on Windows `10.0.19041.1165`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    'os.version'?: string;
    /**
     * Optional field specifying an array of strings, each listing a required OS feature (for example on Windows `win32k`). 
     * @type {Array<string>}
     * @memberof OCIPlatform
     */
    'os.features'?: Array<string>;
    /**
     * Optional field specifying a variant of the CPU, for example `v7` to specify ARMv7 when architecture is `arm`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    'variant'?: string;
}
/**
 * The version number of the object such as node, service, etc. This is needed to avoid conflicting writes. The client must send the version number along with the modified specification when updating these objects.  This approach ensures safe concurrency and determinism in that the change on the object may not be applied if the version number has changed from the last read. In other words, if two update requests specify the same base version, only one of the requests can succeed. As a result, two separate update requests that happen at the same time will not unintentionally overwrite each other. 
 * @export
 * @interface ObjectVersion
 */
export interface ObjectVersion {
    /**
     * 
     * @type {number}
     * @memberof ObjectVersion
     */
    'Index'?: number;
}
/**
 * PeerInfo represents one peer of an overlay network. 
 * @export
 * @interface PeerInfo
 */
export interface PeerInfo {
    /**
     * ID of the peer-node in the Swarm cluster.
     * @type {string}
     * @memberof PeerInfo
     */
    'Name'?: string;
    /**
     * IP-address of the peer-node in the Swarm cluster.
     * @type {string}
     * @memberof PeerInfo
     */
    'IP'?: string;
}
/**
 * Represents a peer-node in the swarm
 * @export
 * @interface PeerNode
 */
export interface PeerNode {
    /**
     * Unique identifier of for this node in the swarm.
     * @type {string}
     * @memberof PeerNode
     */
    'NodeID'?: string;
    /**
     * IP address and ports at which this node can be reached. 
     * @type {string}
     * @memberof PeerNode
     */
    'Addr'?: string;
}
/**
 * Platform represents the platform (Arch/OS). 
 * @export
 * @interface Platform
 */
export interface Platform {
    /**
     * Architecture represents the hardware architecture (for example, `x86_64`). 
     * @type {string}
     * @memberof Platform
     */
    'Architecture'?: string;
    /**
     * OS represents the Operating System (for example, `linux` or `windows`). 
     * @type {string}
     * @memberof Platform
     */
    'OS'?: string;
}
/**
 * A plugin for the Engine API
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    'Name': string;
    /**
     * True if the plugin is running. False if the plugin is not running, only installed.
     * @type {boolean}
     * @memberof Plugin
     */
    'Enabled': boolean;
    /**
     * 
     * @type {PluginSettings}
     * @memberof Plugin
     */
    'Settings': PluginSettings;
    /**
     * plugin remote reference used to push/pull the plugin
     * @type {string}
     * @memberof Plugin
     */
    'PluginReference'?: string;
    /**
     * 
     * @type {PluginConfig}
     * @memberof Plugin
     */
    'Config': PluginConfig;
}
/**
 * The config of a plugin.
 * @export
 * @interface PluginConfig
 */
export interface PluginConfig {
    /**
     * Docker Version used to create the plugin
     * @type {string}
     * @memberof PluginConfig
     */
    'DockerVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    'Description': string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    'Documentation': string;
    /**
     * 
     * @type {PluginConfigInterface}
     * @memberof PluginConfig
     */
    'Interface': PluginConfigInterface;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfig
     */
    'Entrypoint': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    'WorkDir': string;
    /**
     * 
     * @type {PluginConfigUser}
     * @memberof PluginConfig
     */
    'User'?: PluginConfigUser;
    /**
     * 
     * @type {PluginConfigNetwork}
     * @memberof PluginConfig
     */
    'Network': PluginConfigNetwork;
    /**
     * 
     * @type {PluginConfigLinux}
     * @memberof PluginConfig
     */
    'Linux': PluginConfigLinux;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    'PropagatedMount': string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfig
     */
    'IpcHost': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfig
     */
    'PidHost': boolean;
    /**
     * 
     * @type {Array<PluginMount>}
     * @memberof PluginConfig
     */
    'Mounts': Array<PluginMount>;
    /**
     * 
     * @type {Array<PluginEnv>}
     * @memberof PluginConfig
     */
    'Env': Array<PluginEnv>;
    /**
     * 
     * @type {PluginConfigArgs}
     * @memberof PluginConfig
     */
    'Args': PluginConfigArgs;
    /**
     * 
     * @type {PluginConfigRootfs}
     * @memberof PluginConfig
     */
    'rootfs'?: PluginConfigRootfs;
}
/**
 * 
 * @export
 * @interface PluginConfigArgs
 */
export interface PluginConfigArgs {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigArgs
     */
    'Name': string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfigArgs
     */
    'Description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigArgs
     */
    'Settable': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigArgs
     */
    'Value': Array<string>;
}
/**
 * The interface between Docker and the plugin
 * @export
 * @interface PluginConfigInterface
 */
export interface PluginConfigInterface {
    /**
     * 
     * @type {Array<PluginInterfaceType>}
     * @memberof PluginConfigInterface
     */
    'Types': Array<PluginInterfaceType>;
    /**
     * 
     * @type {string}
     * @memberof PluginConfigInterface
     */
    'Socket': string;
    /**
     * Protocol to use for clients connecting to the plugin.
     * @type {string}
     * @memberof PluginConfigInterface
     */
    'ProtocolScheme'?: PluginConfigInterfaceProtocolSchemeEnum;
}

export const PluginConfigInterfaceProtocolSchemeEnum = {
    Empty: '',
    MobyPluginsHttpV1: 'moby.plugins.http/v1'
} as const;

export type PluginConfigInterfaceProtocolSchemeEnum = typeof PluginConfigInterfaceProtocolSchemeEnum[keyof typeof PluginConfigInterfaceProtocolSchemeEnum];

/**
 * 
 * @export
 * @interface PluginConfigLinux
 */
export interface PluginConfigLinux {
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigLinux
     */
    'Capabilities': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfigLinux
     */
    'AllowAllDevices': boolean;
    /**
     * 
     * @type {Array<PluginDevice>}
     * @memberof PluginConfigLinux
     */
    'Devices': Array<PluginDevice>;
}
/**
 * 
 * @export
 * @interface PluginConfigNetwork
 */
export interface PluginConfigNetwork {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigNetwork
     */
    'Type': string;
}
/**
 * 
 * @export
 * @interface PluginConfigRootfs
 */
export interface PluginConfigRootfs {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigRootfs
     */
    'type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigRootfs
     */
    'diff_ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PluginConfigUser
 */
export interface PluginConfigUser {
    /**
     * 
     * @type {number}
     * @memberof PluginConfigUser
     */
    'UID'?: number;
    /**
     * 
     * @type {number}
     * @memberof PluginConfigUser
     */
    'GID'?: number;
}
/**
 * 
 * @export
 * @interface PluginDevice
 */
export interface PluginDevice {
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    'Name': string;
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    'Description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginDevice
     */
    'Settable': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    'Path': string;
}
/**
 * 
 * @export
 * @interface PluginEnv
 */
export interface PluginEnv {
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    'Name': string;
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    'Description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginEnv
     */
    'Settable': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    'Value': string;
}
/**
 * 
 * @export
 * @interface PluginInterfaceType
 */
export interface PluginInterfaceType {
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    'Prefix': string;
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    'Capability': string;
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    'Version': string;
}
/**
 * 
 * @export
 * @interface PluginMount
 */
export interface PluginMount {
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    'Name': string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    'Description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginMount
     */
    'Settable': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    'Source': string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    'Destination': string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    'Type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginMount
     */
    'Options': Array<string>;
}
/**
 * Describes a permission the user has to accept upon installing the plugin. 
 * @export
 * @interface PluginPrivilege
 */
export interface PluginPrivilege {
    /**
     * 
     * @type {string}
     * @memberof PluginPrivilege
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginPrivilege
     */
    'Description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginPrivilege
     */
    'Value'?: Array<string>;
}
/**
 * Settings that can be modified by users.
 * @export
 * @interface PluginSettings
 */
export interface PluginSettings {
    /**
     * 
     * @type {Array<PluginMount>}
     * @memberof PluginSettings
     */
    'Mounts': Array<PluginMount>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginSettings
     */
    'Env': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginSettings
     */
    'Args': Array<string>;
    /**
     * 
     * @type {Array<PluginDevice>}
     * @memberof PluginSettings
     */
    'Devices': Array<PluginDevice>;
}
/**
 * Available plugins per type.  <p><br /></p>  > **Note**: Only unmanaged (V1) plugins are included in this list. > V1 plugins are \"lazily\" loaded, and are not returned in this list > if there is no resource using the plugin. 
 * @export
 * @interface PluginsInfo
 */
export interface PluginsInfo {
    /**
     * Names of available volume-drivers, and network-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    'Volume'?: Array<string>;
    /**
     * Names of available network-drivers, and network-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    'Network'?: Array<string>;
    /**
     * Names of available authorization plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    'Authorization'?: Array<string>;
    /**
     * Names of available logging-drivers, and logging-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    'Log'?: Array<string>;
}
/**
 * An open port on a container
 * @export
 * @interface Port
 */
export interface Port {
    /**
     * Host IP address that the container\'s port is mapped to
     * @type {string}
     * @memberof Port
     */
    'IP'?: string;
    /**
     * Port on the container
     * @type {number}
     * @memberof Port
     */
    'PrivatePort': number;
    /**
     * Port exposed on the host
     * @type {number}
     * @memberof Port
     */
    'PublicPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof Port
     */
    'Type': PortTypeEnum;
}

export const PortTypeEnum = {
    Tcp: 'tcp',
    Udp: 'udp',
    Sctp: 'sctp'
} as const;

export type PortTypeEnum = typeof PortTypeEnum[keyof typeof PortTypeEnum];

/**
 * PortBinding represents a binding between a host IP address and a host port. 
 * @export
 * @interface PortBinding
 */
export interface PortBinding {
    /**
     * Host IP address that the container\'s port is mapped to.
     * @type {string}
     * @memberof PortBinding
     */
    'HostIp'?: string;
    /**
     * Host port number that the container\'s port is mapped to.
     * @type {string}
     * @memberof PortBinding
     */
    'HostPort'?: string;
}
/**
 * represents the port status of a task\'s host ports whose service has published host ports
 * @export
 * @interface PortStatus
 */
export interface PortStatus {
    /**
     * 
     * @type {Array<EndpointPortConfig>}
     * @memberof PortStatus
     */
    'Ports'?: Array<EndpointPortConfig>;
}
/**
 * 
 * @export
 * @interface ProcessConfig
 */
export interface ProcessConfig {
    /**
     * 
     * @type {boolean}
     * @memberof ProcessConfig
     */
    'privileged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessConfig
     */
    'user'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessConfig
     */
    'tty'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessConfig
     */
    'entrypoint'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessConfig
     */
    'arguments'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProgressDetail
 */
export interface ProgressDetail {
    /**
     * 
     * @type {number}
     * @memberof ProgressDetail
     */
    'current'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressDetail
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PushImageInfo
 */
export interface PushImageInfo {
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    'progress'?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof PushImageInfo
     */
    'progressDetail'?: ProgressDetail;
}
/**
 * Reachability represents the reachability of a node.
 * @export
 * @enum {string}
 */

export const Reachability = {
    Unknown: 'unknown',
    Unreachable: 'unreachable',
    Reachable: 'reachable'
} as const;

export type Reachability = typeof Reachability[keyof typeof Reachability];


/**
 * RegistryServiceConfig stores daemon registry services configuration. 
 * @export
 * @interface RegistryServiceConfig
 */
export interface RegistryServiceConfig {
    /**
     * List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    'AllowNondistributableArtifactsCIDRs'?: Array<string>;
    /**
     * List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    'AllowNondistributableArtifactsHostnames'?: Array<string>;
    /**
     * List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system\'s list of trusted > CAs instead of enabling this option. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    'InsecureRegistryCIDRs'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: IndexInfo; }}
     * @memberof RegistryServiceConfig
     */
    'IndexConfigs'?: { [key: string]: IndexInfo; };
    /**
     * List of registry URLs that act as a mirror for the official (`docker.io`) registry. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    'Mirrors'?: Array<string>;
}
/**
 * An object describing the resources which can be advertised by a node and requested by a task. 
 * @export
 * @interface ResourceObject
 */
export interface ResourceObject {
    /**
     * 
     * @type {number}
     * @memberof ResourceObject
     */
    'NanoCPUs'?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceObject
     */
    'MemoryBytes'?: number;
    /**
     * User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). 
     * @type {Array<GenericResourcesInner>}
     * @memberof ResourceObject
     */
    'GenericResources'?: Array<GenericResourcesInner>;
}
/**
 * A container\'s resources (cgroups config, ulimits, etc)
 * @export
 * @interface Resources
 */
export interface Resources {
    /**
     * An integer value representing this container\'s relative CPU weight versus other containers. 
     * @type {number}
     * @memberof Resources
     */
    'CpuShares'?: number;
    /**
     * Memory limit in bytes.
     * @type {number}
     * @memberof Resources
     */
    'Memory'?: number;
    /**
     * Path to `cgroups` under which the container\'s `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. 
     * @type {string}
     * @memberof Resources
     */
    'CgroupParent'?: string;
    /**
     * Block IO weight (relative weight).
     * @type {number}
     * @memberof Resources
     */
    'BlkioWeight'?: number;
    /**
     * Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` 
     * @type {Array<ResourcesBlkioWeightDeviceInner>}
     * @memberof Resources
     */
    'BlkioWeightDevice'?: Array<ResourcesBlkioWeightDeviceInner>;
    /**
     * Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    'BlkioDeviceReadBps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    'BlkioDeviceWriteBps'?: Array<ThrottleDevice>;
    /**
     * Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    'BlkioDeviceReadIOps'?: Array<ThrottleDevice>;
    /**
     * Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    'BlkioDeviceWriteIOps'?: Array<ThrottleDevice>;
    /**
     * The length of a CPU period in microseconds.
     * @type {number}
     * @memberof Resources
     */
    'CpuPeriod'?: number;
    /**
     * Microseconds of CPU time that the container can get in a CPU period. 
     * @type {number}
     * @memberof Resources
     */
    'CpuQuota'?: number;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof Resources
     */
    'CpuRealtimePeriod'?: number;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof Resources
     */
    'CpuRealtimeRuntime'?: number;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`). 
     * @type {string}
     * @memberof Resources
     */
    'CpusetCpus'?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. 
     * @type {string}
     * @memberof Resources
     */
    'CpusetMems'?: string;
    /**
     * A list of devices to add to the container.
     * @type {Array<DeviceMapping>}
     * @memberof Resources
     */
    'Devices'?: Array<DeviceMapping>;
    /**
     * a list of cgroup rules to apply to the container
     * @type {Array<string>}
     * @memberof Resources
     */
    'DeviceCgroupRules'?: Array<string>;
    /**
     * A list of requests for devices to be sent to device drivers. 
     * @type {Array<DeviceRequest>}
     * @memberof Resources
     */
    'DeviceRequests'?: Array<DeviceRequest>;
    /**
     * Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty. 
     * @type {number}
     * @memberof Resources
     */
    'KernelMemoryTCP'?: number;
    /**
     * Memory soft limit in bytes.
     * @type {number}
     * @memberof Resources
     */
    'MemoryReservation'?: number;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. 
     * @type {number}
     * @memberof Resources
     */
    'MemorySwap'?: number;
    /**
     * Tune a container\'s memory swappiness behavior. Accepts an integer between 0 and 100. 
     * @type {number}
     * @memberof Resources
     */
    'MemorySwappiness'?: number;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     * @type {number}
     * @memberof Resources
     */
    'NanoCpus'?: number;
    /**
     * Disable OOM Killer for the container.
     * @type {boolean}
     * @memberof Resources
     */
    'OomKillDisable'?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof Resources
     */
    'Init'?: boolean | null;
    /**
     * Tune a container\'s PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. 
     * @type {number}
     * @memberof Resources
     */
    'PidsLimit'?: number | null;
    /**
     * A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` 
     * @type {Array<ResourcesUlimitsInner>}
     * @memberof Resources
     */
    'Ulimits'?: Array<ResourcesUlimitsInner>;
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof Resources
     */
    'CpuCount'?: number;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof Resources
     */
    'CpuPercent'?: number;
    /**
     * Maximum IOps for the container system drive (Windows only)
     * @type {number}
     * @memberof Resources
     */
    'IOMaximumIOps'?: number;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only). 
     * @type {number}
     * @memberof Resources
     */
    'IOMaximumBandwidth'?: number;
}
/**
 * 
 * @export
 * @interface ResourcesBlkioWeightDeviceInner
 */
export interface ResourcesBlkioWeightDeviceInner {
    /**
     * 
     * @type {string}
     * @memberof ResourcesBlkioWeightDeviceInner
     */
    'Path'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourcesBlkioWeightDeviceInner
     */
    'Weight'?: number;
}
/**
 * 
 * @export
 * @interface ResourcesUlimitsInner
 */
export interface ResourcesUlimitsInner {
    /**
     * Name of ulimit
     * @type {string}
     * @memberof ResourcesUlimitsInner
     */
    'Name'?: string;
    /**
     * Soft limit
     * @type {number}
     * @memberof ResourcesUlimitsInner
     */
    'Soft'?: number;
    /**
     * Hard limit
     * @type {number}
     * @memberof ResourcesUlimitsInner
     */
    'Hard'?: number;
}
/**
 * The behavior to apply when the container exits. The default is not to restart.  An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server. 
 * @export
 * @interface RestartPolicy
 */
export interface RestartPolicy {
    /**
     * - Empty string means not to restart - `no` Do not automatically restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero 
     * @type {string}
     * @memberof RestartPolicy
     */
    'Name'?: RestartPolicyNameEnum;
    /**
     * If `on-failure` is used, the number of times to retry before giving up. 
     * @type {number}
     * @memberof RestartPolicy
     */
    'MaximumRetryCount'?: number;
}

export const RestartPolicyNameEnum = {
    Empty: '',
    No: 'no',
    Always: 'always',
    UnlessStopped: 'unless-stopped',
    OnFailure: 'on-failure'
} as const;

export type RestartPolicyNameEnum = typeof RestartPolicyNameEnum[keyof typeof RestartPolicyNameEnum];

/**
 * Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux. 
 * @export
 * @interface Runtime
 */
export interface Runtime {
    /**
     * Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host\'s `$PATH` for the binary and uses the first result. 
     * @type {string}
     * @memberof Runtime
     */
    'path'?: string;
    /**
     * List of command-line arguments to pass to the runtime when invoked. 
     * @type {Array<string>}
     * @memberof Runtime
     */
    'runtimeArgs'?: Array<string> | null;
    /**
     * Information specific to the runtime.  While this API specification does not define data provided by runtimes, the following well-known properties may be provided by runtimes:  `org.opencontainers.runtime-spec.features`: features structure as defined in the [OCI Runtime Specification](https://github.com/opencontainers/runtime-spec/blob/main/features.md), in a JSON string representation.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. 
     * @type {{ [key: string]: string; }}
     * @memberof Runtime
     */
    'status'?: { [key: string]: string; } | null;
}
/**
 * 
 * @export
 * @interface Secret
 */
export interface Secret {
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Secret
     */
    'Version'?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {SecretSpec}
     * @memberof Secret
     */
    'Spec'?: SecretSpec;
}
/**
 * 
 * @export
 * @interface SecretCreateRequest
 */
export interface SecretCreateRequest {
    /**
     * User-defined name of the secret.
     * @type {string}
     * @memberof SecretCreateRequest
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof SecretCreateRequest
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. 
     * @type {string}
     * @memberof SecretCreateRequest
     */
    'Data'?: string;
    /**
     * 
     * @type {Driver}
     * @memberof SecretCreateRequest
     */
    'Driver'?: Driver;
    /**
     * 
     * @type {Driver}
     * @memberof SecretCreateRequest
     */
    'Templating'?: Driver;
}
/**
 * 
 * @export
 * @interface SecretSpec
 */
export interface SecretSpec {
    /**
     * User-defined name of the secret.
     * @type {string}
     * @memberof SecretSpec
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof SecretSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. 
     * @type {string}
     * @memberof SecretSpec
     */
    'Data'?: string;
    /**
     * 
     * @type {Driver}
     * @memberof SecretSpec
     */
    'Driver'?: Driver;
    /**
     * 
     * @type {Driver}
     * @memberof SecretSpec
     */
    'Templating'?: Driver;
}
/**
 * 
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Service
     */
    'Version'?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {ServiceSpec}
     * @memberof Service
     */
    'Spec'?: ServiceSpec;
    /**
     * 
     * @type {ServiceEndpoint}
     * @memberof Service
     */
    'Endpoint'?: ServiceEndpoint;
    /**
     * 
     * @type {ServiceUpdateStatus}
     * @memberof Service
     */
    'UpdateStatus'?: ServiceUpdateStatus;
    /**
     * 
     * @type {ServiceServiceStatus}
     * @memberof Service
     */
    'ServiceStatus'?: ServiceServiceStatus;
    /**
     * 
     * @type {ServiceJobStatus}
     * @memberof Service
     */
    'JobStatus'?: ServiceJobStatus;
}
/**
 * 
 * @export
 * @interface ServiceCreateRequest
 */
export interface ServiceCreateRequest {
    /**
     * Name of the service.
     * @type {string}
     * @memberof ServiceCreateRequest
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ServiceCreateRequest
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof ServiceCreateRequest
     */
    'TaskTemplate'?: TaskSpec;
    /**
     * 
     * @type {ServiceSpecMode}
     * @memberof ServiceCreateRequest
     */
    'Mode'?: ServiceSpecMode;
    /**
     * 
     * @type {ServiceSpecUpdateConfig}
     * @memberof ServiceCreateRequest
     */
    'UpdateConfig'?: ServiceSpecUpdateConfig;
    /**
     * 
     * @type {ServiceSpecRollbackConfig}
     * @memberof ServiceCreateRequest
     */
    'RollbackConfig'?: ServiceSpecRollbackConfig;
    /**
     * Specifies which networks the service should attach to.  Deprecated: This field is deprecated since v1.44. The Networks field in TaskSpec should be used instead. 
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof ServiceCreateRequest
     */
    'Networks'?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceCreateRequest
     */
    'EndpointSpec'?: EndpointSpec;
}
/**
 * contains the information returned to a client on the creation of a new service. 
 * @export
 * @interface ServiceCreateResponse
 */
export interface ServiceCreateResponse {
    /**
     * The ID of the created service.
     * @type {string}
     * @memberof ServiceCreateResponse
     */
    'ID'?: string;
    /**
     * Optional warning message.  FIXME(thaJeztah): this should have \"omitempty\" in the generated type. 
     * @type {Array<string>}
     * @memberof ServiceCreateResponse
     */
    'Warnings'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ServiceEndpoint
 */
export interface ServiceEndpoint {
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceEndpoint
     */
    'Spec'?: EndpointSpec;
    /**
     * 
     * @type {Array<EndpointPortConfig>}
     * @memberof ServiceEndpoint
     */
    'Ports'?: Array<EndpointPortConfig>;
    /**
     * 
     * @type {Array<ServiceEndpointVirtualIPsInner>}
     * @memberof ServiceEndpoint
     */
    'VirtualIPs'?: Array<ServiceEndpointVirtualIPsInner>;
}
/**
 * 
 * @export
 * @interface ServiceEndpointVirtualIPsInner
 */
export interface ServiceEndpointVirtualIPsInner {
    /**
     * 
     * @type {string}
     * @memberof ServiceEndpointVirtualIPsInner
     */
    'NetworkID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceEndpointVirtualIPsInner
     */
    'Addr'?: string;
}
/**
 * The status of the service when it is in one of ReplicatedJob or GlobalJob modes. Absent on Replicated and Global mode services. The JobIteration is an ObjectVersion, but unlike the Service\'s version, does not need to be sent with an update request. 
 * @export
 * @interface ServiceJobStatus
 */
export interface ServiceJobStatus {
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ServiceJobStatus
     */
    'JobIteration'?: ObjectVersion;
    /**
     * The last time, as observed by the server, that this job was started. 
     * @type {string}
     * @memberof ServiceJobStatus
     */
    'LastExecution'?: string;
}
/**
 * The status of the service\'s tasks. Provided only when requested as part of a ServiceList operation. 
 * @export
 * @interface ServiceServiceStatus
 */
export interface ServiceServiceStatus {
    /**
     * The number of tasks for the service currently in the Running state. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    'RunningTasks'?: number;
    /**
     * The number of tasks for the service desired to be running. For replicated services, this is the replica count from the service spec. For global services, this is computed by taking count of all tasks for the service with a Desired State other than Shutdown. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    'DesiredTasks'?: number;
    /**
     * The number of tasks for a job that are in the Completed state. This field must be cross-referenced with the service type, as the value of 0 may mean the service is not in a job mode, or it may mean the job-mode service has no tasks yet Completed. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    'CompletedTasks'?: number;
}
/**
 * User modifiable configuration for a service.
 * @export
 * @interface ServiceSpec
 */
export interface ServiceSpec {
    /**
     * Name of the service.
     * @type {string}
     * @memberof ServiceSpec
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ServiceSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof ServiceSpec
     */
    'TaskTemplate'?: TaskSpec;
    /**
     * 
     * @type {ServiceSpecMode}
     * @memberof ServiceSpec
     */
    'Mode'?: ServiceSpecMode;
    /**
     * 
     * @type {ServiceSpecUpdateConfig}
     * @memberof ServiceSpec
     */
    'UpdateConfig'?: ServiceSpecUpdateConfig;
    /**
     * 
     * @type {ServiceSpecRollbackConfig}
     * @memberof ServiceSpec
     */
    'RollbackConfig'?: ServiceSpecRollbackConfig;
    /**
     * Specifies which networks the service should attach to.  Deprecated: This field is deprecated since v1.44. The Networks field in TaskSpec should be used instead. 
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof ServiceSpec
     */
    'Networks'?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceSpec
     */
    'EndpointSpec'?: EndpointSpec;
}
/**
 * Scheduling mode for the service.
 * @export
 * @interface ServiceSpecMode
 */
export interface ServiceSpecMode {
    /**
     * 
     * @type {ServiceSpecModeReplicated}
     * @memberof ServiceSpecMode
     */
    'Replicated'?: ServiceSpecModeReplicated;
    /**
     * 
     * @type {object}
     * @memberof ServiceSpecMode
     */
    'Global'?: object;
    /**
     * 
     * @type {ServiceSpecModeReplicatedJob}
     * @memberof ServiceSpecMode
     */
    'ReplicatedJob'?: ServiceSpecModeReplicatedJob;
    /**
     * The mode used for services which run a task to the completed state on each valid node. 
     * @type {object}
     * @memberof ServiceSpecMode
     */
    'GlobalJob'?: object;
}
/**
 * 
 * @export
 * @interface ServiceSpecModeReplicated
 */
export interface ServiceSpecModeReplicated {
    /**
     * 
     * @type {number}
     * @memberof ServiceSpecModeReplicated
     */
    'Replicas'?: number;
}
/**
 * The mode used for services with a finite number of tasks that run to a completed state. 
 * @export
 * @interface ServiceSpecModeReplicatedJob
 */
export interface ServiceSpecModeReplicatedJob {
    /**
     * The maximum number of replicas to run simultaneously. 
     * @type {number}
     * @memberof ServiceSpecModeReplicatedJob
     */
    'MaxConcurrent'?: number;
    /**
     * The total number of replicas desired to reach the Completed state. If unset, will default to the value of `MaxConcurrent` 
     * @type {number}
     * @memberof ServiceSpecModeReplicatedJob
     */
    'TotalCompletions'?: number;
}
/**
 * Specification for the rollback strategy of the service.
 * @export
 * @interface ServiceSpecRollbackConfig
 */
export interface ServiceSpecRollbackConfig {
    /**
     * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism). 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    'Parallelism'?: number;
    /**
     * Amount of time between rollback iterations, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    'Delay'?: number;
    /**
     * Action to take if an rolled back task fails to run, or stops running during the rollback. 
     * @type {string}
     * @memberof ServiceSpecRollbackConfig
     */
    'FailureAction'?: ServiceSpecRollbackConfigFailureActionEnum;
    /**
     * Amount of time to monitor each rolled back task for failures, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    'Monitor'?: number;
    /**
     * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    'MaxFailureRatio'?: number;
    /**
     * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
     * @type {string}
     * @memberof ServiceSpecRollbackConfig
     */
    'Order'?: ServiceSpecRollbackConfigOrderEnum;
}

export const ServiceSpecRollbackConfigFailureActionEnum = {
    Continue: 'continue',
    Pause: 'pause'
} as const;

export type ServiceSpecRollbackConfigFailureActionEnum = typeof ServiceSpecRollbackConfigFailureActionEnum[keyof typeof ServiceSpecRollbackConfigFailureActionEnum];
export const ServiceSpecRollbackConfigOrderEnum = {
    StopFirst: 'stop-first',
    StartFirst: 'start-first'
} as const;

export type ServiceSpecRollbackConfigOrderEnum = typeof ServiceSpecRollbackConfigOrderEnum[keyof typeof ServiceSpecRollbackConfigOrderEnum];

/**
 * Specification for the update strategy of the service.
 * @export
 * @interface ServiceSpecUpdateConfig
 */
export interface ServiceSpecUpdateConfig {
    /**
     * Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism). 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    'Parallelism'?: number;
    /**
     * Amount of time between updates, in nanoseconds.
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    'Delay'?: number;
    /**
     * Action to take if an updated task fails to run, or stops running during the update. 
     * @type {string}
     * @memberof ServiceSpecUpdateConfig
     */
    'FailureAction'?: ServiceSpecUpdateConfigFailureActionEnum;
    /**
     * Amount of time to monitor each updated task for failures, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    'Monitor'?: number;
    /**
     * The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1. 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    'MaxFailureRatio'?: number;
    /**
     * The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
     * @type {string}
     * @memberof ServiceSpecUpdateConfig
     */
    'Order'?: ServiceSpecUpdateConfigOrderEnum;
}

export const ServiceSpecUpdateConfigFailureActionEnum = {
    Continue: 'continue',
    Pause: 'pause',
    Rollback: 'rollback'
} as const;

export type ServiceSpecUpdateConfigFailureActionEnum = typeof ServiceSpecUpdateConfigFailureActionEnum[keyof typeof ServiceSpecUpdateConfigFailureActionEnum];
export const ServiceSpecUpdateConfigOrderEnum = {
    StopFirst: 'stop-first',
    StartFirst: 'start-first'
} as const;

export type ServiceSpecUpdateConfigOrderEnum = typeof ServiceSpecUpdateConfigOrderEnum[keyof typeof ServiceSpecUpdateConfigOrderEnum];

/**
 * 
 * @export
 * @interface ServiceUpdateRequest
 */
export interface ServiceUpdateRequest {
    /**
     * Name of the service.
     * @type {string}
     * @memberof ServiceUpdateRequest
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ServiceUpdateRequest
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof ServiceUpdateRequest
     */
    'TaskTemplate'?: TaskSpec;
    /**
     * 
     * @type {ServiceSpecMode}
     * @memberof ServiceUpdateRequest
     */
    'Mode'?: ServiceSpecMode;
    /**
     * 
     * @type {ServiceSpecUpdateConfig}
     * @memberof ServiceUpdateRequest
     */
    'UpdateConfig'?: ServiceSpecUpdateConfig;
    /**
     * 
     * @type {ServiceSpecRollbackConfig}
     * @memberof ServiceUpdateRequest
     */
    'RollbackConfig'?: ServiceSpecRollbackConfig;
    /**
     * Specifies which networks the service should attach to.  Deprecated: This field is deprecated since v1.44. The Networks field in TaskSpec should be used instead. 
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof ServiceUpdateRequest
     */
    'Networks'?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceUpdateRequest
     */
    'EndpointSpec'?: EndpointSpec;
}
/**
 * 
 * @export
 * @interface ServiceUpdateResponse
 */
export interface ServiceUpdateResponse {
    /**
     * Optional warning messages
     * @type {Array<string>}
     * @memberof ServiceUpdateResponse
     */
    'Warnings'?: Array<string>;
}
/**
 * The status of a service update.
 * @export
 * @interface ServiceUpdateStatus
 */
export interface ServiceUpdateStatus {
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    'State'?: ServiceUpdateStatusStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    'StartedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    'CompletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    'Message'?: string;
}

export const ServiceUpdateStatusStateEnum = {
    Updating: 'updating',
    Paused: 'paused',
    Completed: 'completed'
} as const;

export type ServiceUpdateStatusStateEnum = typeof ServiceUpdateStatusStateEnum[keyof typeof ServiceUpdateStatusStateEnum];

/**
 * 
 * @export
 * @interface Swarm
 */
export interface Swarm {
    /**
     * The ID of the swarm.
     * @type {string}
     * @memberof Swarm
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Swarm
     */
    'Version'?: ObjectVersion;
    /**
     * Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Swarm
     */
    'CreatedAt'?: string;
    /**
     * Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Swarm
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof Swarm
     */
    'Spec'?: SwarmSpec;
    /**
     * 
     * @type {TLSInfo}
     * @memberof Swarm
     */
    'TLSInfo'?: TLSInfo;
    /**
     * Whether there is currently a root CA rotation in progress for the swarm 
     * @type {boolean}
     * @memberof Swarm
     */
    'RootRotationInProgress'?: boolean;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used. 
     * @type {number}
     * @memberof Swarm
     */
    'DataPathPort'?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof Swarm
     */
    'DefaultAddrPool'?: Array<string>;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof Swarm
     */
    'SubnetSize'?: number;
    /**
     * 
     * @type {JoinTokens}
     * @memberof Swarm
     */
    'JoinTokens'?: JoinTokens;
}
/**
 * Represents generic information about swarm. 
 * @export
 * @interface SwarmInfo
 */
export interface SwarmInfo {
    /**
     * Unique identifier of for this node in the swarm.
     * @type {string}
     * @memberof SwarmInfo
     */
    'NodeID'?: string;
    /**
     * IP address at which this node can be reached by other nodes in the swarm. 
     * @type {string}
     * @memberof SwarmInfo
     */
    'NodeAddr'?: string;
    /**
     * 
     * @type {LocalNodeState}
     * @memberof SwarmInfo
     */
    'LocalNodeState'?: LocalNodeState;
    /**
     * 
     * @type {boolean}
     * @memberof SwarmInfo
     */
    'ControlAvailable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SwarmInfo
     */
    'Error'?: string;
    /**
     * List of ID\'s and addresses of other managers in the swarm. 
     * @type {Array<PeerNode>}
     * @memberof SwarmInfo
     */
    'RemoteManagers'?: Array<PeerNode> | null;
    /**
     * Total number of nodes in the swarm.
     * @type {number}
     * @memberof SwarmInfo
     */
    'Nodes'?: number | null;
    /**
     * Total number of managers in the swarm.
     * @type {number}
     * @memberof SwarmInfo
     */
    'Managers'?: number | null;
    /**
     * 
     * @type {ClusterInfo}
     * @memberof SwarmInfo
     */
    'Cluster'?: ClusterInfo | null;
}


/**
 * 
 * @export
 * @interface SwarmInitRequest
 */
export interface SwarmInitRequest {
    /**
     * Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    'ListenAddr'?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    'AdvertiseAddr'?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    'DataPathAddr'?: string;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. 
     * @type {number}
     * @memberof SwarmInitRequest
     */
    'DataPathPort'?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof SwarmInitRequest
     */
    'DefaultAddrPool'?: Array<string>;
    /**
     * Force creation of a new swarm.
     * @type {boolean}
     * @memberof SwarmInitRequest
     */
    'ForceNewCluster'?: boolean;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof SwarmInitRequest
     */
    'SubnetSize'?: number;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof SwarmInitRequest
     */
    'Spec'?: SwarmSpec;
}
/**
 * 
 * @export
 * @interface SwarmJoinRequest
 */
export interface SwarmJoinRequest {
    /**
     * Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    'ListenAddr'?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    'AdvertiseAddr'?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    'DataPathAddr'?: string;
    /**
     * Addresses of manager nodes already participating in the swarm. 
     * @type {Array<string>}
     * @memberof SwarmJoinRequest
     */
    'RemoteAddrs'?: Array<string>;
    /**
     * Secret token for joining this swarm.
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    'JoinToken'?: string;
}
/**
 * User modifiable swarm configuration.
 * @export
 * @interface SwarmSpec
 */
export interface SwarmSpec {
    /**
     * Name of the swarm.
     * @type {string}
     * @memberof SwarmSpec
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {SwarmSpecOrchestration}
     * @memberof SwarmSpec
     */
    'Orchestration'?: SwarmSpecOrchestration | null;
    /**
     * 
     * @type {SwarmSpecRaft}
     * @memberof SwarmSpec
     */
    'Raft'?: SwarmSpecRaft;
    /**
     * 
     * @type {SwarmSpecDispatcher}
     * @memberof SwarmSpec
     */
    'Dispatcher'?: SwarmSpecDispatcher | null;
    /**
     * 
     * @type {SwarmSpecCAConfig}
     * @memberof SwarmSpec
     */
    'CAConfig'?: SwarmSpecCAConfig | null;
    /**
     * 
     * @type {SwarmSpecEncryptionConfig}
     * @memberof SwarmSpec
     */
    'EncryptionConfig'?: SwarmSpecEncryptionConfig;
    /**
     * 
     * @type {SwarmSpecTaskDefaults}
     * @memberof SwarmSpec
     */
    'TaskDefaults'?: SwarmSpecTaskDefaults;
}
/**
 * CA configuration.
 * @export
 * @interface SwarmSpecCAConfig
 */
export interface SwarmSpecCAConfig {
    /**
     * The duration node certificates are issued for.
     * @type {number}
     * @memberof SwarmSpecCAConfig
     */
    'NodeCertExpiry'?: number;
    /**
     * Configuration for forwarding signing requests to an external certificate authority. 
     * @type {Array<SwarmSpecCAConfigExternalCAsInner>}
     * @memberof SwarmSpecCAConfig
     */
    'ExternalCAs'?: Array<SwarmSpecCAConfigExternalCAsInner>;
    /**
     * The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format. 
     * @type {string}
     * @memberof SwarmSpecCAConfig
     */
    'SigningCACert'?: string;
    /**
     * The desired signing CA key for all swarm node TLS leaf certificates, in PEM format. 
     * @type {string}
     * @memberof SwarmSpecCAConfig
     */
    'SigningCAKey'?: string;
    /**
     * An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey` 
     * @type {number}
     * @memberof SwarmSpecCAConfig
     */
    'ForceRotate'?: number;
}
/**
 * 
 * @export
 * @interface SwarmSpecCAConfigExternalCAsInner
 */
export interface SwarmSpecCAConfigExternalCAsInner {
    /**
     * Protocol for communication with the external CA (currently only `cfssl` is supported). 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAsInner
     */
    'Protocol'?: SwarmSpecCAConfigExternalCAsInnerProtocolEnum;
    /**
     * URL where certificate signing requests should be sent. 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAsInner
     */
    'URL'?: string;
    /**
     * An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver. 
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpecCAConfigExternalCAsInner
     */
    'Options'?: { [key: string]: string; };
    /**
     * The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided). 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAsInner
     */
    'CACert'?: string;
}

export const SwarmSpecCAConfigExternalCAsInnerProtocolEnum = {
    Cfssl: 'cfssl'
} as const;

export type SwarmSpecCAConfigExternalCAsInnerProtocolEnum = typeof SwarmSpecCAConfigExternalCAsInnerProtocolEnum[keyof typeof SwarmSpecCAConfigExternalCAsInnerProtocolEnum];

/**
 * Dispatcher configuration.
 * @export
 * @interface SwarmSpecDispatcher
 */
export interface SwarmSpecDispatcher {
    /**
     * The delay for an agent to send a heartbeat to the dispatcher. 
     * @type {number}
     * @memberof SwarmSpecDispatcher
     */
    'HeartbeatPeriod'?: number;
}
/**
 * Parameters related to encryption-at-rest.
 * @export
 * @interface SwarmSpecEncryptionConfig
 */
export interface SwarmSpecEncryptionConfig {
    /**
     * If set, generate a key and use it to lock data stored on the managers. 
     * @type {boolean}
     * @memberof SwarmSpecEncryptionConfig
     */
    'AutoLockManagers'?: boolean;
}
/**
 * Orchestration configuration.
 * @export
 * @interface SwarmSpecOrchestration
 */
export interface SwarmSpecOrchestration {
    /**
     * The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks. 
     * @type {number}
     * @memberof SwarmSpecOrchestration
     */
    'TaskHistoryRetentionLimit'?: number;
}
/**
 * Raft configuration.
 * @export
 * @interface SwarmSpecRaft
 */
export interface SwarmSpecRaft {
    /**
     * The number of log entries between snapshots.
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    'SnapshotInterval'?: number;
    /**
     * The number of snapshots to keep beyond the current snapshot. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    'KeepOldSnapshots'?: number;
    /**
     * The number of log entries to keep around to sync up slow followers after a snapshot is created. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    'LogEntriesForSlowFollowers'?: number;
    /**
     * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    'ElectionTick'?: number;
    /**
     * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    'HeartbeatTick'?: number;
}
/**
 * Defaults for creating tasks in this cluster.
 * @export
 * @interface SwarmSpecTaskDefaults
 */
export interface SwarmSpecTaskDefaults {
    /**
     * 
     * @type {SwarmSpecTaskDefaultsLogDriver}
     * @memberof SwarmSpecTaskDefaults
     */
    'LogDriver'?: SwarmSpecTaskDefaultsLogDriver;
}
/**
 * The log driver to use for tasks created in the orchestrator if unspecified by a service.  Updating this value only affects new tasks. Existing tasks continue to use their previously configured log driver until recreated. 
 * @export
 * @interface SwarmSpecTaskDefaultsLogDriver
 */
export interface SwarmSpecTaskDefaultsLogDriver {
    /**
     * The log driver to use as a default for new tasks. 
     * @type {string}
     * @memberof SwarmSpecTaskDefaultsLogDriver
     */
    'Name'?: string;
    /**
     * Driver-specific options for the selected log driver, specified as key/value pairs. 
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpecTaskDefaultsLogDriver
     */
    'Options'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface SwarmUnlockRequest
 */
export interface SwarmUnlockRequest {
    /**
     * The swarm\'s unlock key.
     * @type {string}
     * @memberof SwarmUnlockRequest
     */
    'UnlockKey'?: string;
}
/**
 * 
 * @export
 * @interface SystemAuthResponse
 */
export interface SystemAuthResponse {
    /**
     * The status of the authentication
     * @type {string}
     * @memberof SystemAuthResponse
     */
    'Status': string;
    /**
     * An opaque token used to authenticate a user after a successful login
     * @type {string}
     * @memberof SystemAuthResponse
     */
    'IdentityToken'?: string;
}
/**
 * 
 * @export
 * @interface SystemDataUsageResponse
 */
export interface SystemDataUsageResponse {
    /**
     * 
     * @type {number}
     * @memberof SystemDataUsageResponse
     */
    'LayersSize'?: number;
    /**
     * 
     * @type {Array<ImageSummary>}
     * @memberof SystemDataUsageResponse
     */
    'Images'?: Array<ImageSummary>;
    /**
     * 
     * @type {Array<ContainerSummary>}
     * @memberof SystemDataUsageResponse
     */
    'Containers'?: Array<ContainerSummary>;
    /**
     * 
     * @type {Array<Volume>}
     * @memberof SystemDataUsageResponse
     */
    'Volumes'?: Array<Volume>;
    /**
     * 
     * @type {Array<BuildCache>}
     * @memberof SystemDataUsageResponse
     */
    'BuildCache'?: Array<BuildCache>;
}
/**
 * 
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. 
     * @type {string}
     * @memberof SystemInfo
     */
    'ID'?: string;
    /**
     * Total number of containers on the host.
     * @type {number}
     * @memberof SystemInfo
     */
    'Containers'?: number;
    /**
     * Number of containers with status `\"running\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    'ContainersRunning'?: number;
    /**
     * Number of containers with status `\"paused\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    'ContainersPaused'?: number;
    /**
     * Number of containers with status `\"stopped\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    'ContainersStopped'?: number;
    /**
     * Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. 
     * @type {number}
     * @memberof SystemInfo
     */
    'Images'?: number;
    /**
     * Name of the storage driver in use.
     * @type {string}
     * @memberof SystemInfo
     */
    'Driver'?: string;
    /**
     * Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. 
     * @type {Array<Array<string>>}
     * @memberof SystemInfo
     */
    'DriverStatus'?: Array<Array<string>>;
    /**
     * Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. 
     * @type {string}
     * @memberof SystemInfo
     */
    'DockerRootDir'?: string;
    /**
     * 
     * @type {PluginsInfo}
     * @memberof SystemInfo
     */
    'Plugins'?: PluginsInfo;
    /**
     * Indicates if the host has memory limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'MemoryLimit'?: boolean;
    /**
     * Indicates if the host has memory swap limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'SwapLimit'?: boolean;
    /**
     * Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'KernelMemoryTCP'?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'CpuCfsPeriod'?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'CpuCfsQuota'?: boolean;
    /**
     * Indicates if CPU Shares limiting is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'CPUShares'?: boolean;
    /**
     * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'CPUSet'?: boolean;
    /**
     * Indicates if the host kernel has PID limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'PidsLimit'?: boolean;
    /**
     * Indicates if OOM killer disable is supported on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'OomKillDisable'?: boolean;
    /**
     * Indicates IPv4 forwarding is enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'IPv4Forwarding'?: boolean;
    /**
     * Indicates if `bridge-nf-call-iptables` is available on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'BridgeNfIptables'?: boolean;
    /**
     * Indicates if `bridge-nf-call-ip6tables` is available on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    'BridgeNfIp6tables'?: boolean;
    /**
     * Indicates if the daemon is running in debug-mode / with debug-level logging enabled. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'Debug'?: boolean;
    /**
     * The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. 
     * @type {number}
     * @memberof SystemInfo
     */
    'NFd'?: number;
    /**
     * The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. 
     * @type {number}
     * @memberof SystemInfo
     */
    'NGoroutines'?: number;
    /**
     * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof SystemInfo
     */
    'SystemTime'?: string;
    /**
     * The logging driver to use as a default for new containers. 
     * @type {string}
     * @memberof SystemInfo
     */
    'LoggingDriver'?: string;
    /**
     * The driver to use for managing cgroups. 
     * @type {string}
     * @memberof SystemInfo
     */
    'CgroupDriver'?: SystemInfoCgroupDriverEnum;
    /**
     * The version of the cgroup. 
     * @type {string}
     * @memberof SystemInfo
     */
    'CgroupVersion'?: SystemInfoCgroupVersionEnum;
    /**
     * Number of event listeners subscribed.
     * @type {number}
     * @memberof SystemInfo
     */
    'NEventsListener'?: number;
    /**
     * Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. 
     * @type {string}
     * @memberof SystemInfo
     */
    'KernelVersion'?: string;
    /**
     * Name of the host\'s operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" 
     * @type {string}
     * @memberof SystemInfo
     */
    'OperatingSystem'?: string;
    /**
     * Version of the host\'s operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. 
     * @type {string}
     * @memberof SystemInfo
     */
    'OSVersion'?: string;
    /**
     * Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). 
     * @type {string}
     * @memberof SystemInfo
     */
    'OSType'?: string;
    /**
     * Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). 
     * @type {string}
     * @memberof SystemInfo
     */
    'Architecture'?: string;
    /**
     * The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. 
     * @type {number}
     * @memberof SystemInfo
     */
    'NCPU'?: number;
    /**
     * Total amount of physical memory available on the host, in bytes. 
     * @type {number}
     * @memberof SystemInfo
     */
    'MemTotal'?: number;
    /**
     * Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. 
     * @type {string}
     * @memberof SystemInfo
     */
    'IndexServerAddress'?: string;
    /**
     * 
     * @type {RegistryServiceConfig}
     * @memberof SystemInfo
     */
    'RegistryConfig'?: RegistryServiceConfig | null;
    /**
     * User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). 
     * @type {Array<GenericResourcesInner>}
     * @memberof SystemInfo
     */
    'GenericResources'?: Array<GenericResourcesInner>;
    /**
     * HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    'HttpProxy'?: string;
    /**
     * HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    'HttpsProxy'?: string;
    /**
     * Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    'NoProxy'?: string;
    /**
     * Hostname of the host.
     * @type {string}
     * @memberof SystemInfo
     */
    'Name'?: string;
    /**
     * User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    'Labels'?: Array<string>;
    /**
     * Indicates if experimental features are enabled on the daemon. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'ExperimentalBuild'?: boolean;
    /**
     * Version string of the daemon. 
     * @type {string}
     * @memberof SystemInfo
     */
    'ServerVersion'?: string;
    /**
     * List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. 
     * @type {{ [key: string]: Runtime; }}
     * @memberof SystemInfo
     */
    'Runtimes'?: { [key: string]: Runtime; };
    /**
     * Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. 
     * @type {string}
     * @memberof SystemInfo
     */
    'DefaultRuntime'?: string;
    /**
     * 
     * @type {SwarmInfo}
     * @memberof SystemInfo
     */
    'Swarm'?: SwarmInfo;
    /**
     * Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    'LiveRestoreEnabled'?: boolean;
    /**
     * Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. 
     * @type {string}
     * @memberof SystemInfo
     */
    'Isolation'?: SystemInfoIsolationEnum;
    /**
     * Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host\'s `$PATH` for the binary and uses the first result. 
     * @type {string}
     * @memberof SystemInfo
     */
    'InitBinary'?: string;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    'ContainerdCommit'?: Commit;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    'RuncCommit'?: Commit;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    'InitCommit'?: Commit;
    /**
     * List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), rootless and no-new-privileges.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    'SecurityOptions'?: Array<string>;
    /**
     * Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. 
     * @type {string}
     * @memberof SystemInfo
     */
    'ProductLicense'?: string;
    /**
     * List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. 
     * @type {Array<SystemInfoDefaultAddressPoolsInner>}
     * @memberof SystemInfo
     */
    'DefaultAddressPools'?: Array<SystemInfoDefaultAddressPoolsInner>;
    /**
     * List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    'Warnings'?: Array<string>;
    /**
     * List of directories where (Container Device Interface) CDI specifications are located.  These specifications define vendor-specific modifications to an OCI runtime specification for a container being created.  An empty list indicates that CDI device injection is disabled.  Note that since using CDI device injection requires the daemon to have experimental enabled. For non-experimental daemons an empty list will always be returned. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    'CDISpecDirs'?: Array<string>;
}

export const SystemInfoCgroupDriverEnum = {
    Cgroupfs: 'cgroupfs',
    Systemd: 'systemd',
    None: 'none'
} as const;

export type SystemInfoCgroupDriverEnum = typeof SystemInfoCgroupDriverEnum[keyof typeof SystemInfoCgroupDriverEnum];
export const SystemInfoCgroupVersionEnum = {
    _1: '1',
    _2: '2'
} as const;

export type SystemInfoCgroupVersionEnum = typeof SystemInfoCgroupVersionEnum[keyof typeof SystemInfoCgroupVersionEnum];
export const SystemInfoIsolationEnum = {
    Default: 'default',
    Hyperv: 'hyperv',
    Process: 'process'
} as const;

export type SystemInfoIsolationEnum = typeof SystemInfoIsolationEnum[keyof typeof SystemInfoIsolationEnum];

/**
 * 
 * @export
 * @interface SystemInfoDefaultAddressPoolsInner
 */
export interface SystemInfoDefaultAddressPoolsInner {
    /**
     * The network address in CIDR format
     * @type {string}
     * @memberof SystemInfoDefaultAddressPoolsInner
     */
    'Base'?: string;
    /**
     * The network pool size
     * @type {number}
     * @memberof SystemInfoDefaultAddressPoolsInner
     */
    'Size'?: number;
}
/**
 * Response of Engine API: GET \"/version\" 
 * @export
 * @interface SystemVersion
 */
export interface SystemVersion {
    /**
     * 
     * @type {SystemVersionPlatform}
     * @memberof SystemVersion
     */
    'Platform'?: SystemVersionPlatform;
    /**
     * Information about system components 
     * @type {Array<SystemVersionComponentsInner>}
     * @memberof SystemVersion
     */
    'Components'?: Array<SystemVersionComponentsInner>;
    /**
     * The version of the daemon
     * @type {string}
     * @memberof SystemVersion
     */
    'Version'?: string;
    /**
     * The default (and highest) API version that is supported by the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    'ApiVersion'?: string;
    /**
     * The minimum API version that is supported by the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    'MinAPIVersion'?: string;
    /**
     * The Git commit of the source code that was used to build the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    'GitCommit'?: string;
    /**
     * The version Go used to compile the daemon, and the version of the Go runtime in use. 
     * @type {string}
     * @memberof SystemVersion
     */
    'GoVersion'?: string;
    /**
     * The operating system that the daemon is running on (\"linux\" or \"windows\") 
     * @type {string}
     * @memberof SystemVersion
     */
    'Os'?: string;
    /**
     * The architecture that the daemon is running on 
     * @type {string}
     * @memberof SystemVersion
     */
    'Arch'?: string;
    /**
     * The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. 
     * @type {string}
     * @memberof SystemVersion
     */
    'KernelVersion'?: string;
    /**
     * Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. 
     * @type {boolean}
     * @memberof SystemVersion
     */
    'Experimental'?: boolean;
    /**
     * The date and time that the daemon was compiled. 
     * @type {string}
     * @memberof SystemVersion
     */
    'BuildTime'?: string;
}
/**
 * 
 * @export
 * @interface SystemVersionComponentsInner
 */
export interface SystemVersionComponentsInner {
    /**
     * Name of the component 
     * @type {string}
     * @memberof SystemVersionComponentsInner
     */
    'Name': string;
    /**
     * Version of the component 
     * @type {string}
     * @memberof SystemVersionComponentsInner
     */
    'Version': string;
    /**
     * Key/value pairs of strings with additional information about the component. These values are intended for informational purposes only, and their content is not defined, and not part of the API specification.  These messages can be printed by the client as information to the user. 
     * @type {object}
     * @memberof SystemVersionComponentsInner
     */
    'Details'?: object | null;
}
/**
 * 
 * @export
 * @interface SystemVersionPlatform
 */
export interface SystemVersionPlatform {
    /**
     * 
     * @type {string}
     * @memberof SystemVersionPlatform
     */
    'Name': string;
}
/**
 * Information about the issuer of leaf TLS certificates and the trusted root CA certificate. 
 * @export
 * @interface TLSInfo
 */
export interface TLSInfo {
    /**
     * The root CA certificate(s) that are used to validate leaf TLS certificates. 
     * @type {string}
     * @memberof TLSInfo
     */
    'TrustRoot'?: string;
    /**
     * The base64-url-safe-encoded raw subject bytes of the issuer.
     * @type {string}
     * @memberof TLSInfo
     */
    'CertIssuerSubject'?: string;
    /**
     * The base64-url-safe-encoded raw public key bytes of the issuer. 
     * @type {string}
     * @memberof TLSInfo
     */
    'CertIssuerPublicKey'?: string;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * The ID of the task.
     * @type {string}
     * @memberof Task
     */
    'ID'?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Task
     */
    'Version'?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'UpdatedAt'?: string;
    /**
     * Name of the task.
     * @type {string}
     * @memberof Task
     */
    'Name'?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Task
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof Task
     */
    'Spec'?: TaskSpec;
    /**
     * The ID of the service this task is part of.
     * @type {string}
     * @memberof Task
     */
    'ServiceID'?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'Slot'?: number;
    /**
     * The ID of the node that this task is on.
     * @type {string}
     * @memberof Task
     */
    'NodeID'?: string;
    /**
     * User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). 
     * @type {Array<GenericResourcesInner>}
     * @memberof Task
     */
    'AssignedGenericResources'?: Array<GenericResourcesInner>;
    /**
     * 
     * @type {TaskStatus}
     * @memberof Task
     */
    'Status'?: TaskStatus;
    /**
     * 
     * @type {TaskState}
     * @memberof Task
     */
    'DesiredState'?: TaskState;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Task
     */
    'JobIteration'?: ObjectVersion;
}


/**
 * User modifiable task configuration.
 * @export
 * @interface TaskSpec
 */
export interface TaskSpec {
    /**
     * 
     * @type {TaskSpecPluginSpec}
     * @memberof TaskSpec
     */
    'PluginSpec'?: TaskSpecPluginSpec;
    /**
     * 
     * @type {TaskSpecContainerSpec}
     * @memberof TaskSpec
     */
    'ContainerSpec'?: TaskSpecContainerSpec;
    /**
     * 
     * @type {TaskSpecNetworkAttachmentSpec}
     * @memberof TaskSpec
     */
    'NetworkAttachmentSpec'?: TaskSpecNetworkAttachmentSpec;
    /**
     * 
     * @type {TaskSpecResources}
     * @memberof TaskSpec
     */
    'Resources'?: TaskSpecResources;
    /**
     * 
     * @type {TaskSpecRestartPolicy}
     * @memberof TaskSpec
     */
    'RestartPolicy'?: TaskSpecRestartPolicy;
    /**
     * 
     * @type {TaskSpecPlacement}
     * @memberof TaskSpec
     */
    'Placement'?: TaskSpecPlacement;
    /**
     * A counter that triggers an update even if no relevant parameters have been changed. 
     * @type {number}
     * @memberof TaskSpec
     */
    'ForceUpdate'?: number;
    /**
     * Runtime is the type of runtime specified for the task executor. 
     * @type {string}
     * @memberof TaskSpec
     */
    'Runtime'?: string;
    /**
     * Specifies which networks the service should attach to.
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof TaskSpec
     */
    'Networks'?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {TaskSpecLogDriver}
     * @memberof TaskSpec
     */
    'LogDriver'?: TaskSpecLogDriver;
}
/**
 * Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecContainerSpec
 */
export interface TaskSpecContainerSpec {
    /**
     * The image name to use for the container
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'Image'?: string;
    /**
     * User-defined key/value data.
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecContainerSpec
     */
    'Labels'?: { [key: string]: string; };
    /**
     * The command to be run in the image.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'Command'?: Array<string>;
    /**
     * Arguments to the command.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'Args'?: Array<string>;
    /**
     * The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. 
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'Hostname'?: string;
    /**
     * A list of environment variables in the form `VAR=value`. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'Env'?: Array<string>;
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'Dir'?: string;
    /**
     * The user inside the container.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'User'?: string;
    /**
     * A list of additional groups that the container process will run as. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'Groups'?: Array<string>;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivileges}
     * @memberof TaskSpecContainerSpec
     */
    'Privileges'?: TaskSpecContainerSpecPrivileges;
    /**
     * Whether a pseudo-TTY should be allocated.
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    'TTY'?: boolean;
    /**
     * Open `stdin`
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    'OpenStdin'?: boolean;
    /**
     * Mount the container\'s root filesystem as read only.
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    'ReadOnly'?: boolean;
    /**
     * Specification for mounts to be added to containers created as part of the service. 
     * @type {Array<Mount>}
     * @memberof TaskSpecContainerSpec
     */
    'Mounts'?: Array<Mount>;
    /**
     * Signal to stop the container.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'StopSignal'?: string;
    /**
     * Amount of time to wait for the container to terminate before forcefully killing it. 
     * @type {number}
     * @memberof TaskSpecContainerSpec
     */
    'StopGracePeriod'?: number;
    /**
     * 
     * @type {HealthConfig}
     * @memberof TaskSpecContainerSpec
     */
    'HealthCheck'?: HealthConfig;
    /**
     * A list of hostname/IP mappings to add to the container\'s `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'Hosts'?: Array<string>;
    /**
     * 
     * @type {TaskSpecContainerSpecDNSConfig}
     * @memberof TaskSpecContainerSpec
     */
    'DNSConfig'?: TaskSpecContainerSpecDNSConfig;
    /**
     * Secrets contains references to zero or more secrets that will be exposed to the service. 
     * @type {Array<TaskSpecContainerSpecSecretsInner>}
     * @memberof TaskSpecContainerSpec
     */
    'Secrets'?: Array<TaskSpecContainerSpecSecretsInner>;
    /**
     * Configs contains references to zero or more configs that will be exposed to the service. 
     * @type {Array<TaskSpecContainerSpecConfigsInner>}
     * @memberof TaskSpecContainerSpec
     */
    'Configs'?: Array<TaskSpecContainerSpecConfigsInner>;
    /**
     * Isolation technology of the containers running the service. (Windows only) 
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    'Isolation'?: TaskSpecContainerSpecIsolationEnum;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    'Init'?: boolean | null;
    /**
     * Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it\'s up to the user to determine whether a given sysctl will work properly in a Service. 
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecContainerSpec
     */
    'Sysctls'?: { [key: string]: string; };
    /**
     * A list of kernel capabilities to add to the default set for the container. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'CapabilityAdd'?: Array<string>;
    /**
     * A list of kernel capabilities to drop from the default set for the container. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    'CapabilityDrop'?: Array<string>;
    /**
     * A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" 
     * @type {Array<ResourcesUlimitsInner>}
     * @memberof TaskSpecContainerSpec
     */
    'Ulimits'?: Array<ResourcesUlimitsInner>;
}

export const TaskSpecContainerSpecIsolationEnum = {
    Default: 'default',
    Process: 'process',
    Hyperv: 'hyperv'
} as const;

export type TaskSpecContainerSpecIsolationEnum = typeof TaskSpecContainerSpecIsolationEnum[keyof typeof TaskSpecContainerSpecIsolationEnum];

/**
 * 
 * @export
 * @interface TaskSpecContainerSpecConfigsInner
 */
export interface TaskSpecContainerSpecConfigsInner {
    /**
     * 
     * @type {TaskSpecContainerSpecConfigsInnerFile}
     * @memberof TaskSpecContainerSpecConfigsInner
     */
    'File'?: TaskSpecContainerSpecConfigsInnerFile;
    /**
     * Runtime represents a target that is not mounted into the container but is used by the task  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually > exclusive 
     * @type {object}
     * @memberof TaskSpecContainerSpecConfigsInner
     */
    'Runtime'?: object;
    /**
     * ConfigID represents the ID of the specific config that we\'re referencing. 
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigsInner
     */
    'ConfigID'?: string;
    /**
     * ConfigName is the name of the config that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID. 
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigsInner
     */
    'ConfigName'?: string;
}
/**
 * File represents a specific target that is backed by a file.  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive 
 * @export
 * @interface TaskSpecContainerSpecConfigsInnerFile
 */
export interface TaskSpecContainerSpecConfigsInnerFile {
    /**
     * Name represents the final filename in the filesystem. 
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigsInnerFile
     */
    'Name'?: string;
    /**
     * UID represents the file UID.
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigsInnerFile
     */
    'UID'?: string;
    /**
     * GID represents the file GID.
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigsInnerFile
     */
    'GID'?: string;
    /**
     * Mode represents the FileMode of the file.
     * @type {number}
     * @memberof TaskSpecContainerSpecConfigsInnerFile
     */
    'Mode'?: number;
}
/**
 * Specification for DNS related configurations in resolver configuration file (`resolv.conf`). 
 * @export
 * @interface TaskSpecContainerSpecDNSConfig
 */
export interface TaskSpecContainerSpecDNSConfig {
    /**
     * The IP addresses of the name servers.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    'Nameservers'?: Array<string>;
    /**
     * A search list for host-name lookup.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    'Search'?: Array<string>;
    /**
     * A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.). 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    'Options'?: Array<string>;
}
/**
 * Security options for the container
 * @export
 * @interface TaskSpecContainerSpecPrivileges
 */
export interface TaskSpecContainerSpecPrivileges {
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesCredentialSpec}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    'CredentialSpec'?: TaskSpecContainerSpecPrivilegesCredentialSpec;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesSELinuxContext}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    'SELinuxContext'?: TaskSpecContainerSpecPrivilegesSELinuxContext;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesSeccomp}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    'Seccomp'?: TaskSpecContainerSpecPrivilegesSeccomp;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesAppArmor}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    'AppArmor'?: TaskSpecContainerSpecPrivilegesAppArmor;
    /**
     * Configuration of the no_new_privs bit in the container
     * @type {boolean}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    'NoNewPrivileges'?: boolean;
}
/**
 * Options for configuring AppArmor on the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesAppArmor
 */
export interface TaskSpecContainerSpecPrivilegesAppArmor {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesAppArmor
     */
    'Mode'?: TaskSpecContainerSpecPrivilegesAppArmorModeEnum;
}

export const TaskSpecContainerSpecPrivilegesAppArmorModeEnum = {
    Default: 'default',
    Disabled: 'disabled'
} as const;

export type TaskSpecContainerSpecPrivilegesAppArmorModeEnum = typeof TaskSpecContainerSpecPrivilegesAppArmorModeEnum[keyof typeof TaskSpecContainerSpecPrivilegesAppArmorModeEnum];

/**
 * CredentialSpec for managed service account (Windows only)
 * @export
 * @interface TaskSpecContainerSpecPrivilegesCredentialSpec
 */
export interface TaskSpecContainerSpecPrivilegesCredentialSpec {
    /**
     * Load credential spec from a Swarm Config with the given ID. The specified config must also be present in the Configs field with the Runtime property set.  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    'Config'?: string;
    /**
     * Load credential spec from this file. The file is read by the daemon, and must be present in the `CredentialSpecs` subdirectory in the docker data directory, which defaults to `C:\\ProgramData\\Docker\\` on Windows.  For example, specifying `spec.json` loads `C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.  <p><br /></p>  > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    'File'?: string;
    /**
     * Load credential spec from this value in the Windows registry. The specified registry value must be located in:  `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    'Registry'?: string;
}
/**
 * SELinux labels of the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesSELinuxContext
 */
export interface TaskSpecContainerSpecPrivilegesSELinuxContext {
    /**
     * Disable SELinux
     * @type {boolean}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    'Disable'?: boolean;
    /**
     * SELinux user label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    'User'?: string;
    /**
     * SELinux role label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    'Role'?: string;
    /**
     * SELinux type label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    'Type'?: string;
    /**
     * SELinux level label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    'Level'?: string;
}
/**
 * Options for configuring seccomp on the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesSeccomp
 */
export interface TaskSpecContainerSpecPrivilegesSeccomp {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSeccomp
     */
    'Mode'?: TaskSpecContainerSpecPrivilegesSeccompModeEnum;
    /**
     * The custom seccomp profile as a json object
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSeccomp
     */
    'Profile'?: string;
}

export const TaskSpecContainerSpecPrivilegesSeccompModeEnum = {
    Default: 'default',
    Unconfined: 'unconfined',
    Custom: 'custom'
} as const;

export type TaskSpecContainerSpecPrivilegesSeccompModeEnum = typeof TaskSpecContainerSpecPrivilegesSeccompModeEnum[keyof typeof TaskSpecContainerSpecPrivilegesSeccompModeEnum];

/**
 * 
 * @export
 * @interface TaskSpecContainerSpecSecretsInner
 */
export interface TaskSpecContainerSpecSecretsInner {
    /**
     * 
     * @type {TaskSpecContainerSpecSecretsInnerFile}
     * @memberof TaskSpecContainerSpecSecretsInner
     */
    'File'?: TaskSpecContainerSpecSecretsInnerFile;
    /**
     * SecretID represents the ID of the specific secret that we\'re referencing. 
     * @type {string}
     * @memberof TaskSpecContainerSpecSecretsInner
     */
    'SecretID'?: string;
    /**
     * SecretName is the name of the secret that this references, but this is just provided for lookup/display purposes. The secret in the reference will be identified by its ID. 
     * @type {string}
     * @memberof TaskSpecContainerSpecSecretsInner
     */
    'SecretName'?: string;
}
/**
 * File represents a specific target that is backed by a file. 
 * @export
 * @interface TaskSpecContainerSpecSecretsInnerFile
 */
export interface TaskSpecContainerSpecSecretsInnerFile {
    /**
     * Name represents the final filename in the filesystem. 
     * @type {string}
     * @memberof TaskSpecContainerSpecSecretsInnerFile
     */
    'Name'?: string;
    /**
     * UID represents the file UID.
     * @type {string}
     * @memberof TaskSpecContainerSpecSecretsInnerFile
     */
    'UID'?: string;
    /**
     * GID represents the file GID.
     * @type {string}
     * @memberof TaskSpecContainerSpecSecretsInnerFile
     */
    'GID'?: string;
    /**
     * Mode represents the FileMode of the file.
     * @type {number}
     * @memberof TaskSpecContainerSpecSecretsInnerFile
     */
    'Mode'?: number;
}
/**
 * Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified. 
 * @export
 * @interface TaskSpecLogDriver
 */
export interface TaskSpecLogDriver {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecLogDriver
     */
    'Name'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecLogDriver
     */
    'Options'?: { [key: string]: string; };
}
/**
 * Read-only spec type for non-swarm containers attached to swarm overlay networks.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecNetworkAttachmentSpec
 */
export interface TaskSpecNetworkAttachmentSpec {
    /**
     * ID of the container represented by this task
     * @type {string}
     * @memberof TaskSpecNetworkAttachmentSpec
     */
    'ContainerID'?: string;
}
/**
 * 
 * @export
 * @interface TaskSpecPlacement
 */
export interface TaskSpecPlacement {
    /**
     * An array of constraint expressions to limit the set of nodes where a task can be scheduled. Constraint expressions can either use a _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find nodes that satisfy every expression (AND match). Constraints can match node or Docker Engine labels as follows:  node attribute       | matches                        | example ---------------------|--------------------------------|----------------------------------------------- `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4` `node.hostname`      | Node hostname                  | `node.hostname!=node-2` `node.role`          | Node role (`manager`/`worker`) | `node.role==manager` `node.platform.os`   | Node operating system          | `node.platform.os==windows` `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64` `node.labels`        | User-defined node labels       | `node.labels.security==high` `engine.labels`      | Docker Engine\'s labels         | `engine.labels.operatingsystem==ubuntu-14.04`  `engine.labels` apply to Docker Engine labels like operating system, drivers, etc. Swarm administrators add `node.labels` for operational purposes by using the [`node update endpoint`](#operation/NodeUpdate). 
     * @type {Array<string>}
     * @memberof TaskSpecPlacement
     */
    'Constraints'?: Array<string>;
    /**
     * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence. 
     * @type {Array<TaskSpecPlacementPreferencesInner>}
     * @memberof TaskSpecPlacement
     */
    'Preferences'?: Array<TaskSpecPlacementPreferencesInner>;
    /**
     * Maximum number of replicas for per node (default value is 0, which is unlimited) 
     * @type {number}
     * @memberof TaskSpecPlacement
     */
    'MaxReplicas'?: number;
    /**
     * Platforms stores all the platforms that the service\'s image can run on. This field is used in the platform filter for scheduling. If empty, then the platform filter is off, meaning there are no scheduling restrictions. 
     * @type {Array<Platform>}
     * @memberof TaskSpecPlacement
     */
    'Platforms'?: Array<Platform>;
}
/**
 * 
 * @export
 * @interface TaskSpecPlacementPreferencesInner
 */
export interface TaskSpecPlacementPreferencesInner {
    /**
     * 
     * @type {TaskSpecPlacementPreferencesInnerSpread}
     * @memberof TaskSpecPlacementPreferencesInner
     */
    'Spread'?: TaskSpecPlacementPreferencesInnerSpread;
}
/**
 * 
 * @export
 * @interface TaskSpecPlacementPreferencesInnerSpread
 */
export interface TaskSpecPlacementPreferencesInnerSpread {
    /**
     * label descriptor, such as `engine.labels.az`. 
     * @type {string}
     * @memberof TaskSpecPlacementPreferencesInnerSpread
     */
    'SpreadDescriptor'?: string;
}
/**
 * Plugin spec for the service.  *(Experimental release only.)*  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecPluginSpec
 */
export interface TaskSpecPluginSpec {
    /**
     * The name or \'alias\' to use for the plugin.
     * @type {string}
     * @memberof TaskSpecPluginSpec
     */
    'Name'?: string;
    /**
     * The plugin image reference to use.
     * @type {string}
     * @memberof TaskSpecPluginSpec
     */
    'Remote'?: string;
    /**
     * Disable the plugin once scheduled.
     * @type {boolean}
     * @memberof TaskSpecPluginSpec
     */
    'Disabled'?: boolean;
    /**
     * 
     * @type {Array<PluginPrivilege>}
     * @memberof TaskSpecPluginSpec
     */
    'PluginPrivilege'?: Array<PluginPrivilege>;
}
/**
 * Resource requirements which apply to each individual container created as part of the service. 
 * @export
 * @interface TaskSpecResources
 */
export interface TaskSpecResources {
    /**
     * 
     * @type {Limit}
     * @memberof TaskSpecResources
     */
    'Limits'?: Limit;
    /**
     * 
     * @type {ResourceObject}
     * @memberof TaskSpecResources
     */
    'Reservations'?: ResourceObject;
}
/**
 * Specification for the restart policy which applies to containers created as part of this service. 
 * @export
 * @interface TaskSpecRestartPolicy
 */
export interface TaskSpecRestartPolicy {
    /**
     * Condition for restart.
     * @type {string}
     * @memberof TaskSpecRestartPolicy
     */
    'Condition'?: TaskSpecRestartPolicyConditionEnum;
    /**
     * Delay between restart attempts.
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    'Delay'?: number;
    /**
     * Maximum attempts to restart a given container before giving up (default value is 0, which is ignored). 
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    'MaxAttempts'?: number;
    /**
     * Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded). 
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    'Window'?: number;
}

export const TaskSpecRestartPolicyConditionEnum = {
    None: 'none',
    OnFailure: 'on-failure',
    Any: 'any'
} as const;

export type TaskSpecRestartPolicyConditionEnum = typeof TaskSpecRestartPolicyConditionEnum[keyof typeof TaskSpecRestartPolicyConditionEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const TaskState = {
    New: 'new',
    Allocated: 'allocated',
    Pending: 'pending',
    Assigned: 'assigned',
    Accepted: 'accepted',
    Preparing: 'preparing',
    Ready: 'ready',
    Starting: 'starting',
    Running: 'running',
    Complete: 'complete',
    Shutdown: 'shutdown',
    Failed: 'failed',
    Rejected: 'rejected',
    Remove: 'remove',
    Orphaned: 'orphaned'
} as const;

export type TaskState = typeof TaskState[keyof typeof TaskState];


/**
 * represents the status of a task.
 * @export
 * @interface TaskStatus
 */
export interface TaskStatus {
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    'Timestamp'?: string;
    /**
     * 
     * @type {TaskState}
     * @memberof TaskStatus
     */
    'State'?: TaskState;
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    'Message'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    'Err'?: string;
    /**
     * 
     * @type {ContainerStatus}
     * @memberof TaskStatus
     */
    'ContainerStatus'?: ContainerStatus;
    /**
     * 
     * @type {PortStatus}
     * @memberof TaskStatus
     */
    'PortStatus'?: PortStatus;
}


/**
 * 
 * @export
 * @interface ThrottleDevice
 */
export interface ThrottleDevice {
    /**
     * Device path
     * @type {string}
     * @memberof ThrottleDevice
     */
    'Path'?: string;
    /**
     * Rate
     * @type {number}
     * @memberof ThrottleDevice
     */
    'Rate'?: number;
}
/**
 * 
 * @export
 * @interface UnlockKeyResponse
 */
export interface UnlockKeyResponse {
    /**
     * The swarm\'s unlock key.
     * @type {string}
     * @memberof UnlockKeyResponse
     */
    'UnlockKey'?: string;
}
/**
 * 
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     * Name of the volume.
     * @type {string}
     * @memberof Volume
     */
    'Name': string;
    /**
     * Name of the volume driver used by the volume.
     * @type {string}
     * @memberof Volume
     */
    'Driver': string;
    /**
     * Mount path of the volume on the host.
     * @type {string}
     * @memberof Volume
     */
    'Mountpoint': string;
    /**
     * Date/Time the volume was created.
     * @type {string}
     * @memberof Volume
     */
    'CreatedAt'?: string;
    /**
     * Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature. 
     * @type {{ [key: string]: object; }}
     * @memberof Volume
     */
    'Status'?: { [key: string]: object; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    'Labels': { [key: string]: string; };
    /**
     * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. 
     * @type {string}
     * @memberof Volume
     */
    'Scope': VolumeScopeEnum;
    /**
     * 
     * @type {ClusterVolume}
     * @memberof Volume
     */
    'ClusterVolume'?: ClusterVolume;
    /**
     * The driver specific options used when creating the volume. 
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    'Options': { [key: string]: string; };
    /**
     * 
     * @type {VolumeUsageData}
     * @memberof Volume
     */
    'UsageData'?: VolumeUsageData | null;
}

export const VolumeScopeEnum = {
    Local: 'local',
    Global: 'global'
} as const;

export type VolumeScopeEnum = typeof VolumeScopeEnum[keyof typeof VolumeScopeEnum];

/**
 * Volume configuration
 * @export
 * @interface VolumeCreateOptions
 */
export interface VolumeCreateOptions {
    /**
     * The new volume\'s name. If not specified, Docker generates a name. 
     * @type {string}
     * @memberof VolumeCreateOptions
     */
    'Name'?: string;
    /**
     * Name of the volume driver to use.
     * @type {string}
     * @memberof VolumeCreateOptions
     */
    'Driver'?: string;
    /**
     * A mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
     * @type {{ [key: string]: string; }}
     * @memberof VolumeCreateOptions
     */
    'DriverOpts'?: { [key: string]: string; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof VolumeCreateOptions
     */
    'Labels'?: { [key: string]: string; };
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof VolumeCreateOptions
     */
    'ClusterVolumeSpec'?: ClusterVolumeSpec;
}
/**
 * Volume list response
 * @export
 * @interface VolumeListResponse
 */
export interface VolumeListResponse {
    /**
     * List of volumes
     * @type {Array<Volume>}
     * @memberof VolumeListResponse
     */
    'Volumes'?: Array<Volume>;
    /**
     * Warnings that occurred when fetching the list of volumes. 
     * @type {Array<string>}
     * @memberof VolumeListResponse
     */
    'Warnings'?: Array<string>;
}
/**
 * 
 * @export
 * @interface VolumePruneResponse
 */
export interface VolumePruneResponse {
    /**
     * Volumes that were deleted
     * @type {Array<string>}
     * @memberof VolumePruneResponse
     */
    'VolumesDeleted'?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof VolumePruneResponse
     */
    'SpaceReclaimed'?: number;
}
/**
 * Volume configuration
 * @export
 * @interface VolumeUpdateRequest
 */
export interface VolumeUpdateRequest {
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof VolumeUpdateRequest
     */
    'Spec'?: ClusterVolumeSpec;
}
/**
 * Usage details about the volume. This information is used by the `GET /system/df` endpoint, and omitted in other endpoints. 
 * @export
 * @interface VolumeUsageData
 */
export interface VolumeUsageData {
    /**
     * Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\") 
     * @type {number}
     * @memberof VolumeUsageData
     */
    'Size': number;
    /**
     * The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available. 
     * @type {number}
     * @memberof VolumeUsageData
     */
    'RefCount': number;
}

/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configCreate: async (body?: ConfigCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configs/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configDelete', 'id', id)
            const localVarPath = `/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configInspect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configInspect', 'id', id)
            const localVarPath = `/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List configs
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Config
         * @param {string} id The ID or name of the config
         * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
         * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configUpdate: async (id: string, version: number, body?: ConfigSpec, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('configUpdate', 'id', id)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('configUpdate', 'version', version)
            const localVarPath = `/configs/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configCreate(body?: ConfigCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configInspect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configInspect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List configs
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Config>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Config
         * @param {string} id The ID or name of the config
         * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
         * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configUpdate(id: string, version: number, body?: ConfigSpec, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configUpdate(id, version, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigApi.configUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigApiConfigCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configCreate(requestParameters: ConfigApiConfigCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.configCreate(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a config
         * @param {ConfigApiConfigDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configDelete(requestParameters: ConfigApiConfigDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a config
         * @param {ConfigApiConfigInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configInspect(requestParameters: ConfigApiConfigInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.configInspect(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List configs
         * @param {ConfigApiConfigListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configList(requestParameters: ConfigApiConfigListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Config>> {
            return localVarFp.configList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Config
         * @param {ConfigApiConfigUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configUpdate(requestParameters: ConfigApiConfigUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for configCreate operation in ConfigApi.
 * @export
 * @interface ConfigApiConfigCreateRequest
 */
export interface ConfigApiConfigCreateRequest {
    /**
     * 
     * @type {ConfigCreateRequest}
     * @memberof ConfigApiConfigCreate
     */
    readonly body?: ConfigCreateRequest
}

/**
 * Request parameters for configDelete operation in ConfigApi.
 * @export
 * @interface ConfigApiConfigDeleteRequest
 */
export interface ConfigApiConfigDeleteRequest {
    /**
     * ID of the config
     * @type {string}
     * @memberof ConfigApiConfigDelete
     */
    readonly id: string
}

/**
 * Request parameters for configInspect operation in ConfigApi.
 * @export
 * @interface ConfigApiConfigInspectRequest
 */
export interface ConfigApiConfigInspectRequest {
    /**
     * ID of the config
     * @type {string}
     * @memberof ConfigApiConfigInspect
     */
    readonly id: string
}

/**
 * Request parameters for configList operation in ConfigApi.
 * @export
 * @interface ConfigApiConfigListRequest
 */
export interface ConfigApiConfigListRequest {
    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
     * @type {string}
     * @memberof ConfigApiConfigList
     */
    readonly filters?: string
}

/**
 * Request parameters for configUpdate operation in ConfigApi.
 * @export
 * @interface ConfigApiConfigUpdateRequest
 */
export interface ConfigApiConfigUpdateRequest {
    /**
     * The ID or name of the config
     * @type {string}
     * @memberof ConfigApiConfigUpdate
     */
    readonly id: string

    /**
     * The version number of the config object being updated. This is required to avoid conflicting writes. 
     * @type {number}
     * @memberof ConfigApiConfigUpdate
     */
    readonly version: number

    /**
     * The spec of the config to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [ConfigInspect endpoint](#operation/ConfigInspect) response values. 
     * @type {ConfigSpec}
     * @memberof ConfigApiConfigUpdate
     */
    readonly body?: ConfigSpec
}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
    /**
     * 
     * @summary Create a config
     * @param {ConfigApiConfigCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configCreate(requestParameters: ConfigApiConfigCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configCreate(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a config
     * @param {ConfigApiConfigDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configDelete(requestParameters: ConfigApiConfigDeleteRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a config
     * @param {ConfigApiConfigInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configInspect(requestParameters: ConfigApiConfigInspectRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configInspect(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List configs
     * @param {ConfigApiConfigListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configList(requestParameters: ConfigApiConfigListRequest = {}, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Config
     * @param {ConfigApiConfigUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configUpdate(requestParameters: ConfigApiConfigUpdateRequest, options?: RawAxiosRequestConfig) {
        return ConfigApiFp(this.configuration).configUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContainerApi - axios parameter creator
 * @export
 */
export const ContainerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive: async (id: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerArchive', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('containerArchive', 'path', path)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo: async (id: string, path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerArchiveInfo', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('containerArchiveInfo', 'path', path)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach: async (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerAttach', 'id', id)
            const localVarPath = `/containers/{id}/attach`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (stdin !== undefined) {
                localVarQueryParameter['stdin'] = stdin;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket: async (id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerAttachWebsocket', 'id', id)
            const localVarPath = `/containers/{id}/attach/ws`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (stdin !== undefined) {
                localVarQueryParameter['stdin'] = stdin;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerChanges', 'id', id)
            const localVarPath = `/containers/{id}/changes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerCreateRequest} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate: async (body: ContainerCreateRequest, name?: string, platform?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('containerCreate', 'body', body)
            const localVarPath = `/containers/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete: async (id: string, v?: boolean, force?: boolean, link?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerDelete', 'id', id)
            const localVarPath = `/containers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (link !== undefined) {
                localVarQueryParameter['link'] = link;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerExport', 'id', id)
            const localVarPath = `/containers/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect: async (id: string, size?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerInspect', 'id', id)
            const localVarPath = `/containers/{id}/json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill: async (id: string, signal?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerKill', 'id', id)
            const localVarPath = `/containers/{id}/kill`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList: async (all?: boolean, limit?: number, size?: boolean, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/containers/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs: async (id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerLogs', 'id', id)
            const localVarPath = `/containers/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerPause', 'id', id)
            const localVarPath = `/containers/{id}/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/containers/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename: async (id: string, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerRename', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('containerRename', 'name', name)
            const localVarPath = `/containers/{id}/rename`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize: async (id: string, h?: number, w?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerResize', 'id', id)
            const localVarPath = `/containers/{id}/resize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart: async (id: string, signal?: string, t?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerRestart', 'id', id)
            const localVarPath = `/containers/{id}/restart`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart: async (id: string, detachKeys?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStart', 'id', id)
            const localVarPath = `/containers/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `length(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats: async (id: string, stream?: boolean, oneShot?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStats', 'id', id)
            const localVarPath = `/containers/{id}/stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (oneShot !== undefined) {
                localVarQueryParameter['one-shot'] = oneShot;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop: async (id: string, signal?: string, t?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerStop', 'id', id)
            const localVarPath = `/containers/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop: async (id: string, psArgs?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerTop', 'id', id)
            const localVarPath = `/containers/{id}/top`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (psArgs !== undefined) {
                localVarQueryParameter['ps_args'] = psArgs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerUnpause', 'id', id)
            const localVarPath = `/containers/{id}/unpause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {string} id ID or name of the container
         * @param {ContainerUpdateRequest} update 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate: async (id: string, update: ContainerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerUpdate', 'id', id)
            // verify required parameter 'update' is not null or undefined
            assertParamExists('containerUpdate', 'update', update)
            const localVarPath = `/containers/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(update, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait: async (id: string, condition?: ContainerWaitConditionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerWait', 'id', id)
            const localVarPath = `/containers/{id}/wait`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (condition !== undefined) {
                localVarQueryParameter['condition'] = condition;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive: async (id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putContainerArchive', 'id', id)
            // verify required parameter 'path' is not null or undefined
            assertParamExists('putContainerArchive', 'path', path)
            // verify required parameter 'inputStream' is not null or undefined
            assertParamExists('putContainerArchive', 'inputStream', inputStream)
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (noOverwriteDirNonDir !== undefined) {
                localVarQueryParameter['noOverwriteDirNonDir'] = noOverwriteDirNonDir;
            }

            if (copyUIDGID !== undefined) {
                localVarQueryParameter['copyUIDGID'] = copyUIDGID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputStream, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerApi - functional programming interface
 * @export
 */
export const ContainerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContainerApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerArchive(id: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerArchive(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerArchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerArchiveInfo(id: string, path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerArchiveInfo(id, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerArchiveInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerAttach']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerAttachWebsocket(id, detachKeys, logs, stream, stdin, stdout, stderr, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerAttachWebsocket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerChanges(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FilesystemChange>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerChanges(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerCreateRequest} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerCreate(body: ContainerCreateRequest, name?: string, platform?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerCreate(body, name, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerDelete(id, v, force, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerExport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerExport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerInspect(id: string, size?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerInspectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerInspect(id, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerKill(id: string, signal?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerKill(id, signal, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerKill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContainerSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerList(all, limit, size, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerPause(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerPause(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerPause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerPrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerPruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerPrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerPrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerRename(id: string, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerRename(id, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerRename']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerResize(id: string, h?: number, w?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerResize(id, h, w, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerResize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerRestart(id: string, signal?: string, t?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerRestart(id, signal, t, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerRestart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStart(id: string, detachKeys?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStart(id, detachKeys, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `length(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStats(id, stream, oneShot, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerStop(id: string, signal?: string, t?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerStop(id, signal, t, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerStop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerTop(id: string, psArgs?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTopResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerTop(id, psArgs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerTop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerUnpause(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerUnpause(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerUnpause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {string} id ID or name of the container
         * @param {ContainerUpdateRequest} update 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerUpdate(id: string, update: ContainerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerUpdate(id, update, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {ContainerWaitConditionEnum} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerWait(id: string, condition?: ContainerWaitConditionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerWaitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerWait(id, condition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.containerWait']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {File} inputStream The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putContainerArchive(id: string, path: string, inputStream: File, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putContainerArchive(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerApi.putContainerArchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContainerApi - factory interface
 * @export
 */
export const ContainerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContainerApiFp(configuration)
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {ContainerApiContainerArchiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive(requestParameters: ContainerApiContainerArchiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerArchive(requestParameters.id, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {ContainerApiContainerArchiveInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo(requestParameters: ContainerApiContainerArchiveInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerArchiveInfo(requestParameters.id, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
         * @summary Attach to a container
         * @param {ContainerApiContainerAttachRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach(requestParameters: ContainerApiContainerAttachRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerAttach(requestParameters.id, requestParameters.detachKeys, requestParameters.logs, requestParameters.stream, requestParameters.stdin, requestParameters.stdout, requestParameters.stderr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {ContainerApiContainerAttachWebsocketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket(requestParameters: ContainerApiContainerAttachWebsocketRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerAttachWebsocket(requestParameters.id, requestParameters.detachKeys, requestParameters.logs, requestParameters.stream, requestParameters.stdin, requestParameters.stdout, requestParameters.stderr, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {ContainerApiContainerChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges(requestParameters: ContainerApiContainerChangesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<FilesystemChange>> {
            return localVarFp.containerChanges(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainerApiContainerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate(requestParameters: ContainerApiContainerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContainerCreateResponse> {
            return localVarFp.containerCreate(requestParameters.body, requestParameters.name, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a container
         * @param {ContainerApiContainerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete(requestParameters: ContainerApiContainerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerDelete(requestParameters.id, requestParameters.v, requestParameters.force, requestParameters.link, options).then((request) => request(axios, basePath));
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {ContainerApiContainerExportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport(requestParameters: ContainerApiContainerExportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerExport(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {ContainerApiContainerInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect(requestParameters: ContainerApiContainerInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContainerInspectResponse> {
            return localVarFp.containerInspect(requestParameters.id, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {ContainerApiContainerKillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill(requestParameters: ContainerApiContainerKillRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerKill(requestParameters.id, requestParameters.signal, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {ContainerApiContainerListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList(requestParameters: ContainerApiContainerListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ContainerSummary>> {
            return localVarFp.containerList(requestParameters.all, requestParameters.limit, requestParameters.size, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {ContainerApiContainerLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs(requestParameters: ContainerApiContainerLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.containerLogs(requestParameters.id, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.until, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {ContainerApiContainerPauseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause(requestParameters: ContainerApiContainerPauseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerPause(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {ContainerApiContainerPruneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune(requestParameters: ContainerApiContainerPruneRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ContainerPruneResponse> {
            return localVarFp.containerPrune(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rename a container
         * @param {ContainerApiContainerRenameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename(requestParameters: ContainerApiContainerRenameRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerRename(requestParameters.id, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {ContainerApiContainerResizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize(requestParameters: ContainerApiContainerResizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerResize(requestParameters.id, requestParameters.h, requestParameters.w, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restart a container
         * @param {ContainerApiContainerRestartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart(requestParameters: ContainerApiContainerRestartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerRestart(requestParameters.id, requestParameters.signal, requestParameters.t, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start a container
         * @param {ContainerApiContainerStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart(requestParameters: ContainerApiContainerStartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerStart(requestParameters.id, requestParameters.detachKeys, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `length(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {ContainerApiContainerStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats(requestParameters: ContainerApiContainerStatsRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.containerStats(requestParameters.id, requestParameters.stream, requestParameters.oneShot, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop a container
         * @param {ContainerApiContainerStopRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop(requestParameters: ContainerApiContainerStopRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerStop(requestParameters.id, requestParameters.signal, requestParameters.t, options).then((request) => request(axios, basePath));
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {ContainerApiContainerTopRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop(requestParameters: ContainerApiContainerTopRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContainerTopResponse> {
            return localVarFp.containerTop(requestParameters.id, requestParameters.psArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {ContainerApiContainerUnpauseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause(requestParameters: ContainerApiContainerUnpauseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.containerUnpause(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {ContainerApiContainerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate(requestParameters: ContainerApiContainerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContainerUpdateResponse> {
            return localVarFp.containerUpdate(requestParameters.id, requestParameters.update, options).then((request) => request(axios, basePath));
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {ContainerApiContainerWaitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait(requestParameters: ContainerApiContainerWaitRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContainerWaitResponse> {
            return localVarFp.containerWait(requestParameters.id, requestParameters.condition, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {ContainerApiPutContainerArchiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive(requestParameters: ContainerApiPutContainerArchiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putContainerArchive(requestParameters.id, requestParameters.path, requestParameters.inputStream, requestParameters.noOverwriteDirNonDir, requestParameters.copyUIDGID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for containerArchive operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerArchiveRequest
 */
export interface ContainerApiContainerArchiveRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerArchive
     */
    readonly id: string

    /**
     * Resource in the container’s filesystem to archive.
     * @type {string}
     * @memberof ContainerApiContainerArchive
     */
    readonly path: string
}

/**
 * Request parameters for containerArchiveInfo operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerArchiveInfoRequest
 */
export interface ContainerApiContainerArchiveInfoRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerArchiveInfo
     */
    readonly id: string

    /**
     * Resource in the container’s filesystem to archive.
     * @type {string}
     * @memberof ContainerApiContainerArchiveInfo
     */
    readonly path: string
}

/**
 * Request parameters for containerAttach operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerAttachRequest
 */
export interface ContainerApiContainerAttachRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerAttach
     */
    readonly id: string

    /**
     * Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @type {string}
     * @memberof ContainerApiContainerAttach
     */
    readonly detachKeys?: string

    /**
     * Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @type {boolean}
     * @memberof ContainerApiContainerAttach
     */
    readonly logs?: boolean

    /**
     * Stream attached streams from the time the request was made onwards. 
     * @type {boolean}
     * @memberof ContainerApiContainerAttach
     */
    readonly stream?: boolean

    /**
     * Attach to &#x60;stdin&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttach
     */
    readonly stdin?: boolean

    /**
     * Attach to &#x60;stdout&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttach
     */
    readonly stdout?: boolean

    /**
     * Attach to &#x60;stderr&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttach
     */
    readonly stderr?: boolean
}

/**
 * Request parameters for containerAttachWebsocket operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerAttachWebsocketRequest
 */
export interface ContainerApiContainerAttachWebsocketRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly id: string

    /**
     * Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
     * @type {string}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly detachKeys?: string

    /**
     * Return logs
     * @type {boolean}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly logs?: boolean

    /**
     * Return stream
     * @type {boolean}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly stream?: boolean

    /**
     * Attach to &#x60;stdin&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly stdin?: boolean

    /**
     * Attach to &#x60;stdout&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly stdout?: boolean

    /**
     * Attach to &#x60;stderr&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerAttachWebsocket
     */
    readonly stderr?: boolean
}

/**
 * Request parameters for containerChanges operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerChangesRequest
 */
export interface ContainerApiContainerChangesRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerChanges
     */
    readonly id: string
}

/**
 * Request parameters for containerCreate operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerCreateRequest
 */
export interface ContainerApiContainerCreateRequest {
    /**
     * Container to create
     * @type {ContainerCreateRequest}
     * @memberof ContainerApiContainerCreate
     */
    readonly body: ContainerCreateRequest

    /**
     * Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
     * @type {string}
     * @memberof ContainerApiContainerCreate
     */
    readonly name?: string

    /**
     * Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host\&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image\&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
     * @type {string}
     * @memberof ContainerApiContainerCreate
     */
    readonly platform?: string
}

/**
 * Request parameters for containerDelete operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerDeleteRequest
 */
export interface ContainerApiContainerDeleteRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerDelete
     */
    readonly id: string

    /**
     * Remove anonymous volumes associated with the container.
     * @type {boolean}
     * @memberof ContainerApiContainerDelete
     */
    readonly v?: boolean

    /**
     * If the container is running, kill it before removing it.
     * @type {boolean}
     * @memberof ContainerApiContainerDelete
     */
    readonly force?: boolean

    /**
     * Remove the specified link associated with the container.
     * @type {boolean}
     * @memberof ContainerApiContainerDelete
     */
    readonly link?: boolean
}

/**
 * Request parameters for containerExport operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerExportRequest
 */
export interface ContainerApiContainerExportRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerExport
     */
    readonly id: string
}

/**
 * Request parameters for containerInspect operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerInspectRequest
 */
export interface ContainerApiContainerInspectRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerInspect
     */
    readonly id: string

    /**
     * Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerInspect
     */
    readonly size?: boolean
}

/**
 * Request parameters for containerKill operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerKillRequest
 */
export interface ContainerApiContainerKillRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerKill
     */
    readonly id: string

    /**
     * Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @type {string}
     * @memberof ContainerApiContainerKill
     */
    readonly signal?: string
}

/**
 * Request parameters for containerList operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerListRequest
 */
export interface ContainerApiContainerListRequest {
    /**
     * Return all containers. By default, only running containers are shown. 
     * @type {boolean}
     * @memberof ContainerApiContainerList
     */
    readonly all?: boolean

    /**
     * Return this number of most recently created containers, including non-running ones. 
     * @type {number}
     * @memberof ContainerApiContainerList
     */
    readonly limit?: number

    /**
     * Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
     * @type {boolean}
     * @memberof ContainerApiContainerList
     */
    readonly size?: boolean

    /**
     * Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container\&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container\&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @type {string}
     * @memberof ContainerApiContainerList
     */
    readonly filters?: string
}

/**
 * Request parameters for containerLogs operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerLogsRequest
 */
export interface ContainerApiContainerLogsRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerLogs
     */
    readonly id: string

    /**
     * Keep connection after returning logs.
     * @type {boolean}
     * @memberof ContainerApiContainerLogs
     */
    readonly follow?: boolean

    /**
     * Return logs from &#x60;stdout&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerLogs
     */
    readonly stdout?: boolean

    /**
     * Return logs from &#x60;stderr&#x60;
     * @type {boolean}
     * @memberof ContainerApiContainerLogs
     */
    readonly stderr?: boolean

    /**
     * Only return logs since this time, as a UNIX timestamp
     * @type {number}
     * @memberof ContainerApiContainerLogs
     */
    readonly since?: number

    /**
     * Only return logs before this time, as a UNIX timestamp
     * @type {number}
     * @memberof ContainerApiContainerLogs
     */
    readonly until?: number

    /**
     * Add timestamps to every log line
     * @type {boolean}
     * @memberof ContainerApiContainerLogs
     */
    readonly timestamps?: boolean

    /**
     * Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @type {string}
     * @memberof ContainerApiContainerLogs
     */
    readonly tail?: string
}

/**
 * Request parameters for containerPause operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerPauseRequest
 */
export interface ContainerApiContainerPauseRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerPause
     */
    readonly id: string
}

/**
 * Request parameters for containerPrune operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerPruneRequest
 */
export interface ContainerApiContainerPruneRequest {
    /**
     * Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @type {string}
     * @memberof ContainerApiContainerPrune
     */
    readonly filters?: string
}

/**
 * Request parameters for containerRename operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerRenameRequest
 */
export interface ContainerApiContainerRenameRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerRename
     */
    readonly id: string

    /**
     * New name for the container
     * @type {string}
     * @memberof ContainerApiContainerRename
     */
    readonly name: string
}

/**
 * Request parameters for containerResize operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerResizeRequest
 */
export interface ContainerApiContainerResizeRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerResize
     */
    readonly id: string

    /**
     * Height of the TTY session in characters
     * @type {number}
     * @memberof ContainerApiContainerResize
     */
    readonly h?: number

    /**
     * Width of the TTY session in characters
     * @type {number}
     * @memberof ContainerApiContainerResize
     */
    readonly w?: number
}

/**
 * Request parameters for containerRestart operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerRestartRequest
 */
export interface ContainerApiContainerRestartRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerRestart
     */
    readonly id: string

    /**
     * Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @type {string}
     * @memberof ContainerApiContainerRestart
     */
    readonly signal?: string

    /**
     * Number of seconds to wait before killing the container
     * @type {number}
     * @memberof ContainerApiContainerRestart
     */
    readonly t?: number
}

/**
 * Request parameters for containerStart operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerStartRequest
 */
export interface ContainerApiContainerStartRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerStart
     */
    readonly id: string

    /**
     * Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @type {string}
     * @memberof ContainerApiContainerStart
     */
    readonly detachKeys?: string
}

/**
 * Request parameters for containerStats operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerStatsRequest
 */
export interface ContainerApiContainerStatsRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerStats
     */
    readonly id: string

    /**
     * Stream the output. If false, the stats will be output once and then it will disconnect. 
     * @type {boolean}
     * @memberof ContainerApiContainerStats
     */
    readonly stream?: boolean

    /**
     * Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
     * @type {boolean}
     * @memberof ContainerApiContainerStats
     */
    readonly oneShot?: boolean
}

/**
 * Request parameters for containerStop operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerStopRequest
 */
export interface ContainerApiContainerStopRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerStop
     */
    readonly id: string

    /**
     * Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @type {string}
     * @memberof ContainerApiContainerStop
     */
    readonly signal?: string

    /**
     * Number of seconds to wait before killing the container
     * @type {number}
     * @memberof ContainerApiContainerStop
     */
    readonly t?: number
}

/**
 * Request parameters for containerTop operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerTopRequest
 */
export interface ContainerApiContainerTopRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerTop
     */
    readonly id: string

    /**
     * The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @type {string}
     * @memberof ContainerApiContainerTop
     */
    readonly psArgs?: string
}

/**
 * Request parameters for containerUnpause operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerUnpauseRequest
 */
export interface ContainerApiContainerUnpauseRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerUnpause
     */
    readonly id: string
}

/**
 * Request parameters for containerUpdate operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerUpdateRequest
 */
export interface ContainerApiContainerUpdateRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ContainerUpdateRequest}
     * @memberof ContainerApiContainerUpdate
     */
    readonly update: ContainerUpdateRequest
}

/**
 * Request parameters for containerWait operation in ContainerApi.
 * @export
 * @interface ContainerApiContainerWaitRequest
 */
export interface ContainerApiContainerWaitRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiContainerWait
     */
    readonly id: string

    /**
     * Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
     * @type {'not-running' | 'next-exit' | 'removed'}
     * @memberof ContainerApiContainerWait
     */
    readonly condition?: ContainerWaitConditionEnum
}

/**
 * Request parameters for putContainerArchive operation in ContainerApi.
 * @export
 * @interface ContainerApiPutContainerArchiveRequest
 */
export interface ContainerApiPutContainerArchiveRequest {
    /**
     * ID or name of the container
     * @type {string}
     * @memberof ContainerApiPutContainerArchive
     */
    readonly id: string

    /**
     * Path to a directory in the container to extract the archive’s contents into. 
     * @type {string}
     * @memberof ContainerApiPutContainerArchive
     */
    readonly path: string

    /**
     * The input stream must be a tar archive compressed with one of the following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;, or &#x60;xz&#x60;. 
     * @type {File}
     * @memberof ContainerApiPutContainerArchive
     */
    readonly inputStream: File

    /**
     * If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
     * @type {string}
     * @memberof ContainerApiPutContainerArchive
     */
    readonly noOverwriteDirNonDir?: string

    /**
     * If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
     * @type {string}
     * @memberof ContainerApiPutContainerArchive
     */
    readonly copyUIDGID?: string
}

/**
 * ContainerApi - object-oriented interface
 * @export
 * @class ContainerApi
 * @extends {BaseAPI}
 */
export class ContainerApi extends BaseAPI {
    /**
     * Get a tar archive of a resource in the filesystem of container id.
     * @summary Get an archive of a filesystem resource in a container
     * @param {ContainerApiContainerArchiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchive(requestParameters: ContainerApiContainerArchiveRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerArchive(requestParameters.id, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     * @summary Get information about files in a container
     * @param {ContainerApiContainerArchiveInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchiveInfo(requestParameters: ContainerApiContainerArchiveInfoRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerArchiveInfo(requestParameters.id, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client\'s `stdin`. 
     * @summary Attach to a container
     * @param {ContainerApiContainerAttachRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttach(requestParameters: ContainerApiContainerAttachRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerAttach(requestParameters.id, requestParameters.detachKeys, requestParameters.logs, requestParameters.stream, requestParameters.stdin, requestParameters.stdout, requestParameters.stderr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach to a container via a websocket
     * @param {ContainerApiContainerAttachWebsocketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttachWebsocket(requestParameters: ContainerApiContainerAttachWebsocketRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerAttachWebsocket(requestParameters.id, requestParameters.detachKeys, requestParameters.logs, requestParameters.stream, requestParameters.stdin, requestParameters.stdout, requestParameters.stderr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns which files in a container\'s filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
     * @summary Get changes on a container’s filesystem
     * @param {ContainerApiContainerChangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerChanges(requestParameters: ContainerApiContainerChangesRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerChanges(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a container
     * @param {ContainerApiContainerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerCreate(requestParameters: ContainerApiContainerCreateRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerCreate(requestParameters.body, requestParameters.name, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a container
     * @param {ContainerApiContainerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerDelete(requestParameters: ContainerApiContainerDeleteRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerDelete(requestParameters.id, requestParameters.v, requestParameters.force, requestParameters.link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export the contents of a container as a tarball.
     * @summary Export a container
     * @param {ContainerApiContainerExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerExport(requestParameters: ContainerApiContainerExportRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerExport(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return low-level information about a container.
     * @summary Inspect a container
     * @param {ContainerApiContainerInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerInspect(requestParameters: ContainerApiContainerInspectRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerInspect(requestParameters.id, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     * @summary Kill a container
     * @param {ContainerApiContainerKillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerKill(requestParameters: ContainerApiContainerKillRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerKill(requestParameters.id, requestParameters.signal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @summary List containers
     * @param {ContainerApiContainerListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerList(requestParameters: ContainerApiContainerListRequest = {}, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerList(requestParameters.all, requestParameters.limit, requestParameters.size, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     * @summary Get container logs
     * @param {ContainerApiContainerLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerLogs(requestParameters: ContainerApiContainerLogsRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerLogs(requestParameters.id, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.until, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @summary Pause a container
     * @param {ContainerApiContainerPauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPause(requestParameters: ContainerApiContainerPauseRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerPause(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete stopped containers
     * @param {ContainerApiContainerPruneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPrune(requestParameters: ContainerApiContainerPruneRequest = {}, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerPrune(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rename a container
     * @param {ContainerApiContainerRenameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRename(requestParameters: ContainerApiContainerRenameRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerRename(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resize the TTY for a container.
     * @summary Resize a container TTY
     * @param {ContainerApiContainerResizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerResize(requestParameters: ContainerApiContainerResizeRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerResize(requestParameters.id, requestParameters.h, requestParameters.w, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restart a container
     * @param {ContainerApiContainerRestartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRestart(requestParameters: ContainerApiContainerRestartRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerRestart(requestParameters.id, requestParameters.signal, requestParameters.t, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start a container
     * @param {ContainerApiContainerStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStart(requestParameters: ContainerApiContainerStartRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStart(requestParameters.id, requestParameters.detachKeys, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `length(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
     * @summary Get container stats based on resource usage
     * @param {ContainerApiContainerStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStats(requestParameters: ContainerApiContainerStatsRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStats(requestParameters.id, requestParameters.stream, requestParameters.oneShot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop a container
     * @param {ContainerApiContainerStopRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStop(requestParameters: ContainerApiContainerStopRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerStop(requestParameters.id, requestParameters.signal, requestParameters.t, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
     * @summary List processes running inside a container
     * @param {ContainerApiContainerTopRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerTop(requestParameters: ContainerApiContainerTopRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerTop(requestParameters.id, requestParameters.psArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resume a container which has been paused.
     * @summary Unpause a container
     * @param {ContainerApiContainerUnpauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUnpause(requestParameters: ContainerApiContainerUnpauseRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerUnpause(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change various configuration options of a container without having to recreate it. 
     * @summary Update a container
     * @param {ContainerApiContainerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUpdate(requestParameters: ContainerApiContainerUpdateRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerUpdate(requestParameters.id, requestParameters.update, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Block until a container stops, then returns the exit code.
     * @summary Wait for a container
     * @param {ContainerApiContainerWaitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerWait(requestParameters: ContainerApiContainerWaitRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).containerWait(requestParameters.id, requestParameters.condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
     * @summary Extract an archive of files or folders to a directory in a container
     * @param {ContainerApiPutContainerArchiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public putContainerArchive(requestParameters: ContainerApiPutContainerArchiveRequest, options?: RawAxiosRequestConfig) {
        return ContainerApiFp(this.configuration).putContainerArchive(requestParameters.id, requestParameters.path, requestParameters.inputStream, requestParameters.noOverwriteDirNonDir, requestParameters.copyUIDGID, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ContainerWaitConditionEnum = {
    NotRunning: 'not-running',
    NextExit: 'next-exit',
    Removed: 'removed'
} as const;
export type ContainerWaitConditionEnum = typeof ContainerWaitConditionEnum[keyof typeof ContainerWaitConditionEnum];


/**
 * DistributionApi - axios parameter creator
 * @export
 */
export const DistributionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionInspect: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('distributionInspect', 'name', name)
            const localVarPath = `/distribution/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistributionApi - functional programming interface
 * @export
 */
export const DistributionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DistributionApiAxiosParamCreator(configuration)
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async distributionInspect(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistributionInspect>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.distributionInspect(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistributionApi.distributionInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DistributionApi - factory interface
 * @export
 */
export const DistributionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DistributionApiFp(configuration)
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {DistributionApiDistributionInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionInspect(requestParameters: DistributionApiDistributionInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DistributionInspect> {
            return localVarFp.distributionInspect(requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for distributionInspect operation in DistributionApi.
 * @export
 * @interface DistributionApiDistributionInspectRequest
 */
export interface DistributionApiDistributionInspectRequest {
    /**
     * Image name or id
     * @type {string}
     * @memberof DistributionApiDistributionInspect
     */
    readonly name: string
}

/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
export class DistributionApi extends BaseAPI {
    /**
     * Return image digest and platform information by contacting the registry. 
     * @summary Get image information from the registry
     * @param {DistributionApiDistributionInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    public distributionInspect(requestParameters: DistributionApiDistributionInspectRequest, options?: RawAxiosRequestConfig) {
        return DistributionApiFp(this.configuration).distributionInspect(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExecApi - axios parameter creator
 * @export
 */
export const ExecApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {string} id ID or name of container
         * @param {ExecConfig} execConfig Exec configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExec: async (id: string, execConfig: ExecConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('containerExec', 'id', id)
            // verify required parameter 'execConfig' is not null or undefined
            assertParamExists('containerExec', 'execConfig', execConfig)
            const localVarPath = `/containers/{id}/exec`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(execConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {string} id Exec instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execInspect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('execInspect', 'id', id)
            const localVarPath = `/exec/{id}/json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {string} id Exec instance ID
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execResize: async (id: string, h?: number, w?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('execResize', 'id', id)
            const localVarPath = `/exec/{id}/resize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {string} id Exec instance ID
         * @param {ExecStartConfig} [execStartConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execStart: async (id: string, execStartConfig?: ExecStartConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('execStart', 'id', id)
            const localVarPath = `/exec/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(execStartConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExecApi - functional programming interface
 * @export
 */
export const ExecApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExecApiAxiosParamCreator(configuration)
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {string} id ID or name of container
         * @param {ExecConfig} execConfig Exec configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async containerExec(id: string, execConfig: ExecConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.containerExec(id, execConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExecApi.containerExec']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {string} id Exec instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execInspect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecInspectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.execInspect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExecApi.execInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {string} id Exec instance ID
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execResize(id: string, h?: number, w?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.execResize(id, h, w, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExecApi.execResize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {string} id Exec instance ID
         * @param {ExecStartConfig} [execStartConfig] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async execStart(id: string, execStartConfig?: ExecStartConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.execStart(id, execStartConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExecApi.execStart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExecApi - factory interface
 * @export
 */
export const ExecApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExecApiFp(configuration)
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {ExecApiContainerExecRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExec(requestParameters: ExecApiContainerExecRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.containerExec(requestParameters.id, requestParameters.execConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {ExecApiExecInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execInspect(requestParameters: ExecApiExecInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExecInspectResponse> {
            return localVarFp.execInspect(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {ExecApiExecResizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execResize(requestParameters: ExecApiExecResizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.execResize(requestParameters.id, requestParameters.h, requestParameters.w, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {ExecApiExecStartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execStart(requestParameters: ExecApiExecStartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.execStart(requestParameters.id, requestParameters.execStartConfig, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for containerExec operation in ExecApi.
 * @export
 * @interface ExecApiContainerExecRequest
 */
export interface ExecApiContainerExecRequest {
    /**
     * ID or name of container
     * @type {string}
     * @memberof ExecApiContainerExec
     */
    readonly id: string

    /**
     * Exec configuration
     * @type {ExecConfig}
     * @memberof ExecApiContainerExec
     */
    readonly execConfig: ExecConfig
}

/**
 * Request parameters for execInspect operation in ExecApi.
 * @export
 * @interface ExecApiExecInspectRequest
 */
export interface ExecApiExecInspectRequest {
    /**
     * Exec instance ID
     * @type {string}
     * @memberof ExecApiExecInspect
     */
    readonly id: string
}

/**
 * Request parameters for execResize operation in ExecApi.
 * @export
 * @interface ExecApiExecResizeRequest
 */
export interface ExecApiExecResizeRequest {
    /**
     * Exec instance ID
     * @type {string}
     * @memberof ExecApiExecResize
     */
    readonly id: string

    /**
     * Height of the TTY session in characters
     * @type {number}
     * @memberof ExecApiExecResize
     */
    readonly h?: number

    /**
     * Width of the TTY session in characters
     * @type {number}
     * @memberof ExecApiExecResize
     */
    readonly w?: number
}

/**
 * Request parameters for execStart operation in ExecApi.
 * @export
 * @interface ExecApiExecStartRequest
 */
export interface ExecApiExecStartRequest {
    /**
     * Exec instance ID
     * @type {string}
     * @memberof ExecApiExecStart
     */
    readonly id: string

    /**
     * 
     * @type {ExecStartConfig}
     * @memberof ExecApiExecStart
     */
    readonly execStartConfig?: ExecStartConfig
}

/**
 * ExecApi - object-oriented interface
 * @export
 * @class ExecApi
 * @extends {BaseAPI}
 */
export class ExecApi extends BaseAPI {
    /**
     * Run a command inside a running container.
     * @summary Create an exec instance
     * @param {ExecApiContainerExecRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public containerExec(requestParameters: ExecApiContainerExecRequest, options?: RawAxiosRequestConfig) {
        return ExecApiFp(this.configuration).containerExec(requestParameters.id, requestParameters.execConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return low-level information about an exec instance.
     * @summary Inspect an exec instance
     * @param {ExecApiExecInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execInspect(requestParameters: ExecApiExecInspectRequest, options?: RawAxiosRequestConfig) {
        return ExecApiFp(this.configuration).execInspect(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
     * @summary Resize an exec instance
     * @param {ExecApiExecResizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execResize(requestParameters: ExecApiExecResizeRequest, options?: RawAxiosRequestConfig) {
        return ExecApiFp(this.configuration).execResize(requestParameters.id, requestParameters.h, requestParameters.w, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
     * @summary Start an exec instance
     * @param {ExecApiExecStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execStart(requestParameters: ExecApiExecStartRequest, options?: RawAxiosRequestConfig) {
        return ExecApiFp(this.configuration).execStart(requestParameters.id, requestParameters.execStartConfig, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon\&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune: async (keepStorage?: number, all?: boolean, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/build/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keepStorage !== undefined) {
                localVarQueryParameter['keep-storage'] = keepStorage;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
         * @param {ImageBuildContentTypeEnum} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
         * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild: async (dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/build`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dockerfile !== undefined) {
                localVarQueryParameter['dockerfile'] = dockerfile;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (extrahosts !== undefined) {
                localVarQueryParameter['extrahosts'] = extrahosts;
            }

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (nocache !== undefined) {
                localVarQueryParameter['nocache'] = nocache;
            }

            if (cachefrom !== undefined) {
                localVarQueryParameter['cachefrom'] = cachefrom;
            }

            if (pull !== undefined) {
                localVarQueryParameter['pull'] = pull;
            }

            if (rm !== undefined) {
                localVarQueryParameter['rm'] = rm;
            }

            if (forcerm !== undefined) {
                localVarQueryParameter['forcerm'] = forcerm;
            }

            if (memory !== undefined) {
                localVarQueryParameter['memory'] = memory;
            }

            if (memswap !== undefined) {
                localVarQueryParameter['memswap'] = memswap;
            }

            if (cpushares !== undefined) {
                localVarQueryParameter['cpushares'] = cpushares;
            }

            if (cpusetcpus !== undefined) {
                localVarQueryParameter['cpusetcpus'] = cpusetcpus;
            }

            if (cpuperiod !== undefined) {
                localVarQueryParameter['cpuperiod'] = cpuperiod;
            }

            if (cpuquota !== undefined) {
                localVarQueryParameter['cpuquota'] = cpuquota;
            }

            if (buildargs !== undefined) {
                localVarQueryParameter['buildargs'] = buildargs;
            }

            if (shmsize !== undefined) {
                localVarQueryParameter['shmsize'] = shmsize;
            }

            if (squash !== undefined) {
                localVarQueryParameter['squash'] = squash;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (networkmode !== undefined) {
                localVarQueryParameter['networkmode'] = networkmode;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (outputs !== undefined) {
                localVarQueryParameter['outputs'] = outputs;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (contentType != null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }

            if (xRegistryConfig != null) {
                localVarHeaderParameter['X-Registry-Config'] = String(xRegistryConfig);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputStream, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {ContainerConfig} [containerConfig] The container configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit: async (container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/commit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (container !== undefined) {
                localVarQueryParameter['container'] = container;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (pause !== undefined) {
                localVarQueryParameter['pause'] = pause;
            }

            if (changes !== undefined) {
                localVarQueryParameter['changes'] = changes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(containerConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host\&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host\&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host\&#39;s native OS and Architecture are used for the imported image. 
         * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate: async (fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromImage !== undefined) {
                localVarQueryParameter['fromImage'] = fromImage;
            }

            if (fromSrc !== undefined) {
                localVarQueryParameter['fromSrc'] = fromSrc;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (changes) {
                localVarQueryParameter['changes'] = changes.join(COLLECTION_FORMATS.csv);
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inputImage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete: async (name: string, force?: boolean, noprune?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageDelete', 'name', name)
            const localVarPath = `/images/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (noprune !== undefined) {
                localVarQueryParameter['noprune'] = noprune;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageGet', 'name', name)
            const localVarPath = `/images/{name}/get`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll: async (names?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names) {
                localVarQueryParameter['names'] = names.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageHistory', 'name', name)
            const localVarPath = `/images/{name}/history`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageInspect', 'name', name)
            const localVarPath = `/images/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
         * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList: async (all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sharedSize !== undefined) {
                localVarQueryParameter['shared-size'] = sharedSize;
            }

            if (digests !== undefined) {
                localVarQueryParameter['digests'] = digests;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {File} [imagesTarball] Tar archive containing images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad: async (quiet?: boolean, imagesTarball?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quiet !== undefined) {
                localVarQueryParameter['quiet'] = quiet;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imagesTarball, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Name of the image to push. For example, &#x60;registry.example.com/myimage&#x60;. The image must be present in the local image store with the same name.  The name should be provided without tag; if a tag is provided, it is ignored. For example, &#x60;registry.example.com/myimage:latest&#x60; is considered equivalent to &#x60;registry.example.com/myimage&#x60;.  Use the &#x60;tag&#x60; parameter to specify the tag to push. 
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] Tag of the image to push. For example, &#x60;latest&#x60;. If no tag is provided, all tags of the given image that are present in the local image store are pushed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush: async (name: string, xRegistryAuth: string, tag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imagePush', 'name', name)
            // verify required parameter 'xRegistryAuth' is not null or undefined
            assertParamExists('imagePush', 'xRegistryAuth', xRegistryAuth)
            const localVarPath = `/images/{name}/push`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch: async (term: string, limit?: number, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('imageSearch', 'term', term)
            const localVarPath = `/images/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag: async (name: string, repo?: string, tag?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('imageTag', 'name', name)
            const localVarPath = `/images/{name}/tag`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon\&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildPruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildPrune(keepStorage, all, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.buildPrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
         * @param {ImageBuildContentTypeEnum} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {ImageBuildVersionEnum} [version] Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
         * @param {File} [inputStream] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageBuild(dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: ImageBuildContentTypeEnum, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, version?: ImageBuildVersionEnum, inputStream?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageBuild(dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, version, inputStream, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {ContainerConfig} [containerConfig] The container configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCommit(container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, containerConfig?: ContainerConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCommit(container, repo, tag, comment, author, pause, changes, containerConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageCommit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host\&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host\&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host\&#39;s native OS and Architecture are used for the imported image. 
         * @param {string} [inputImage] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageCreate(fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, inputImage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageCreate(fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, inputImage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageDelete(name: string, force?: boolean, noprune?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageDeleteResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageDelete(name, force, noprune, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGet(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageGetAll(names?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageGetAll(names, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageHistory(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageHistory(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageInspect(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageInspect>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageInspect(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
         * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageList(all, filters, sharedSize, digests, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {File} [imagesTarball] Tar archive containing images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageLoad(quiet?: boolean, imagesTarball?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageLoad(quiet, imagesTarball, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageLoad']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagePruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imagePrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Name of the image to push. For example, &#x60;registry.example.com/myimage&#x60;. The image must be present in the local image store with the same name.  The name should be provided without tag; if a tag is provided, it is ignored. For example, &#x60;registry.example.com/myimage:latest&#x60; is considered equivalent to &#x60;registry.example.com/myimage&#x60;.  Use the &#x60;tag&#x60; parameter to specify the tag to push. 
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] Tag of the image to push. For example, &#x60;latest&#x60;. If no tag is provided, all tags of the given image that are present in the local image store are pushed. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imagePush(name: string, xRegistryAuth: string, tag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imagePush(name, xRegistryAuth, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imagePush']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageSearch(term: string, limit?: number, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageSearchResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageSearch(term, limit, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageTag(name: string, repo?: string, tag?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageTag(name, repo, tag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.imageTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {ImageApiBuildPruneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune(requestParameters: ImageApiBuildPruneRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BuildPruneResponse> {
            return localVarFp.buildPrune(requestParameters.keepStorage, requestParameters.all, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {ImageApiImageBuildRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild(requestParameters: ImageApiImageBuildRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.imageBuild(requestParameters.dockerfile, requestParameters.t, requestParameters.extrahosts, requestParameters.remote, requestParameters.q, requestParameters.nocache, requestParameters.cachefrom, requestParameters.pull, requestParameters.rm, requestParameters.forcerm, requestParameters.memory, requestParameters.memswap, requestParameters.cpushares, requestParameters.cpusetcpus, requestParameters.cpuperiod, requestParameters.cpuquota, requestParameters.buildargs, requestParameters.shmsize, requestParameters.squash, requestParameters.labels, requestParameters.networkmode, requestParameters.contentType, requestParameters.xRegistryConfig, requestParameters.platform, requestParameters.target, requestParameters.outputs, requestParameters.version, requestParameters.inputStream, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {ImageApiImageCommitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit(requestParameters: ImageApiImageCommitRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.imageCommit(requestParameters.container, requestParameters.repo, requestParameters.tag, requestParameters.comment, requestParameters.author, requestParameters.pause, requestParameters.changes, requestParameters.containerConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {ImageApiImageCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(requestParameters: ImageApiImageCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.imageCreate(requestParameters.fromImage, requestParameters.fromSrc, requestParameters.repo, requestParameters.tag, requestParameters.message, requestParameters.xRegistryAuth, requestParameters.changes, requestParameters.platform, requestParameters.inputImage, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {ImageApiImageDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete(requestParameters: ImageApiImageDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageDeleteResponseItem>> {
            return localVarFp.imageDelete(requestParameters.name, requestParameters.force, requestParameters.noprune, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {ImageApiImageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(requestParameters: ImageApiImageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.imageGet(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {ImageApiImageGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll(requestParameters: ImageApiImageGetAllRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.imageGetAll(requestParameters.names, options).then((request) => request(axios, basePath));
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {ImageApiImageHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory(requestParameters: ImageApiImageHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HistoryResponseItem>> {
            return localVarFp.imageHistory(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {ImageApiImageInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect(requestParameters: ImageApiImageInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageInspect> {
            return localVarFp.imageInspect(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {ImageApiImageListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(requestParameters: ImageApiImageListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageSummary>> {
            return localVarFp.imageList(requestParameters.all, requestParameters.filters, requestParameters.sharedSize, requestParameters.digests, options).then((request) => request(axios, basePath));
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {ImageApiImageLoadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad(requestParameters: ImageApiImageLoadRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.imageLoad(requestParameters.quiet, requestParameters.imagesTarball, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete unused images
         * @param {ImageApiImagePruneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune(requestParameters: ImageApiImagePruneRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ImagePruneResponse> {
            return localVarFp.imagePrune(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {ImageApiImagePushRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush(requestParameters: ImageApiImagePushRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.imagePush(requestParameters.name, requestParameters.xRegistryAuth, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {ImageApiImageSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch(requestParameters: ImageApiImageSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageSearchResponseItem>> {
            return localVarFp.imageSearch(requestParameters.term, requestParameters.limit, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {ImageApiImageTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag(requestParameters: ImageApiImageTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.imageTag(requestParameters.name, requestParameters.repo, requestParameters.tag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buildPrune operation in ImageApi.
 * @export
 * @interface ImageApiBuildPruneRequest
 */
export interface ImageApiBuildPruneRequest {
    /**
     * Amount of disk space in bytes to keep for cache
     * @type {number}
     * @memberof ImageApiBuildPrune
     */
    readonly keepStorage?: number

    /**
     * Remove all types of build cache
     * @type {boolean}
     * @memberof ImageApiBuildPrune
     */
    readonly all?: boolean

    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon\&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
     * @type {string}
     * @memberof ImageApiBuildPrune
     */
    readonly filters?: string
}

/**
 * Request parameters for imageBuild operation in ImageApi.
 * @export
 * @interface ImageApiImageBuildRequest
 */
export interface ImageApiImageBuildRequest {
    /**
     * Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly dockerfile?: string

    /**
     * A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly t?: string

    /**
     * Extra hosts to add to /etc/hosts
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly extrahosts?: string

    /**
     * A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly remote?: string

    /**
     * Suppress verbose build output.
     * @type {boolean}
     * @memberof ImageApiImageBuild
     */
    readonly q?: boolean

    /**
     * Do not use the cache when building the image.
     * @type {boolean}
     * @memberof ImageApiImageBuild
     */
    readonly nocache?: boolean

    /**
     * JSON array of images used for build cache resolution.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly cachefrom?: string

    /**
     * Attempt to pull the image even if an older image exists locally.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly pull?: string

    /**
     * Remove intermediate containers after a successful build.
     * @type {boolean}
     * @memberof ImageApiImageBuild
     */
    readonly rm?: boolean

    /**
     * Always remove intermediate containers, even upon failure.
     * @type {boolean}
     * @memberof ImageApiImageBuild
     */
    readonly forcerm?: boolean

    /**
     * Set memory limit for build.
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly memory?: number

    /**
     * Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly memswap?: number

    /**
     * CPU shares (relative weight).
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly cpushares?: number

    /**
     * CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly cpusetcpus?: string

    /**
     * The length of a CPU period in microseconds.
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly cpuperiod?: number

    /**
     * Microseconds of CPU time that the container can get in a CPU period.
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly cpuquota?: number

    /**
     * JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly buildargs?: string

    /**
     * Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
     * @type {number}
     * @memberof ImageApiImageBuild
     */
    readonly shmsize?: number

    /**
     * Squash the resulting images layers into a single layer. *(Experimental release only.)*
     * @type {boolean}
     * @memberof ImageApiImageBuild
     */
    readonly squash?: boolean

    /**
     * Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly labels?: string

    /**
     * Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network\&#39;s name or ID to which this container should connect to. 
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly networkmode?: string

    /**
     * 
     * @type {'application/x-tar'}
     * @memberof ImageApiImageBuild
     */
    readonly contentType?: ImageBuildContentTypeEnum

    /**
     * This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly xRegistryConfig?: string

    /**
     * Platform in the format os[/arch[/variant]]
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly platform?: string

    /**
     * Target build stage
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly target?: string

    /**
     * BuildKit output configuration
     * @type {string}
     * @memberof ImageApiImageBuild
     */
    readonly outputs?: string

    /**
     * Version of the builder backend to use.  - &#x60;1&#x60; is the first generation classic (deprecated) builder in the Docker daemon (default) - &#x60;2&#x60; is [BuildKit](https://github.com/moby/buildkit) 
     * @type {'1' | '2'}
     * @memberof ImageApiImageBuild
     */
    readonly version?: ImageBuildVersionEnum

    /**
     * A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @type {File}
     * @memberof ImageApiImageBuild
     */
    readonly inputStream?: File
}

/**
 * Request parameters for imageCommit operation in ImageApi.
 * @export
 * @interface ImageApiImageCommitRequest
 */
export interface ImageApiImageCommitRequest {
    /**
     * The ID or name of the container to commit
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly container?: string

    /**
     * Repository name for the created image
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly repo?: string

    /**
     * Tag name for the create image
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly tag?: string

    /**
     * Commit message
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly comment?: string

    /**
     * Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly author?: string

    /**
     * Whether to pause the container before committing
     * @type {boolean}
     * @memberof ImageApiImageCommit
     */
    readonly pause?: boolean

    /**
     * &#x60;Dockerfile&#x60; instructions to apply while committing
     * @type {string}
     * @memberof ImageApiImageCommit
     */
    readonly changes?: string

    /**
     * The container configuration
     * @type {ContainerConfig}
     * @memberof ImageApiImageCommit
     */
    readonly containerConfig?: ContainerConfig
}

/**
 * Request parameters for imageCreate operation in ImageApi.
 * @export
 * @interface ImageApiImageCreateRequest
 */
export interface ImageApiImageCreateRequest {
    /**
     * Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly fromImage?: string

    /**
     * Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly fromSrc?: string

    /**
     * Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly repo?: string

    /**
     * Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly tag?: string

    /**
     * Set commit message for imported image.
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly message?: string

    /**
     * A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly xRegistryAuth?: string

    /**
     * Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
     * @type {Array<string>}
     * @memberof ImageApiImageCreate
     */
    readonly changes?: Array<string>

    /**
     * Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host\&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host\&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host\&#39;s native OS and Architecture are used for the imported image. 
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly platform?: string

    /**
     * Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
     * @type {string}
     * @memberof ImageApiImageCreate
     */
    readonly inputImage?: string
}

/**
 * Request parameters for imageDelete operation in ImageApi.
 * @export
 * @interface ImageApiImageDeleteRequest
 */
export interface ImageApiImageDeleteRequest {
    /**
     * Image name or ID
     * @type {string}
     * @memberof ImageApiImageDelete
     */
    readonly name: string

    /**
     * Remove the image even if it is being used by stopped containers or has other tags
     * @type {boolean}
     * @memberof ImageApiImageDelete
     */
    readonly force?: boolean

    /**
     * Do not delete untagged parent images
     * @type {boolean}
     * @memberof ImageApiImageDelete
     */
    readonly noprune?: boolean
}

/**
 * Request parameters for imageGet operation in ImageApi.
 * @export
 * @interface ImageApiImageGetRequest
 */
export interface ImageApiImageGetRequest {
    /**
     * Image name or ID
     * @type {string}
     * @memberof ImageApiImageGet
     */
    readonly name: string
}

/**
 * Request parameters for imageGetAll operation in ImageApi.
 * @export
 * @interface ImageApiImageGetAllRequest
 */
export interface ImageApiImageGetAllRequest {
    /**
     * Image names to filter by
     * @type {Array<string>}
     * @memberof ImageApiImageGetAll
     */
    readonly names?: Array<string>
}

/**
 * Request parameters for imageHistory operation in ImageApi.
 * @export
 * @interface ImageApiImageHistoryRequest
 */
export interface ImageApiImageHistoryRequest {
    /**
     * Image name or ID
     * @type {string}
     * @memberof ImageApiImageHistory
     */
    readonly name: string
}

/**
 * Request parameters for imageInspect operation in ImageApi.
 * @export
 * @interface ImageApiImageInspectRequest
 */
export interface ImageApiImageInspectRequest {
    /**
     * Image name or id
     * @type {string}
     * @memberof ImageApiImageInspect
     */
    readonly name: string
}

/**
 * Request parameters for imageList operation in ImageApi.
 * @export
 * @interface ImageApiImageListRequest
 */
export interface ImageApiImageListRequest {
    /**
     * Show all images. Only images from a final layer (no children) are shown by default.
     * @type {boolean}
     * @memberof ImageApiImageList
     */
    readonly all?: boolean

    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
     * @type {string}
     * @memberof ImageApiImageList
     */
    readonly filters?: string

    /**
     * Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
     * @type {boolean}
     * @memberof ImageApiImageList
     */
    readonly sharedSize?: boolean

    /**
     * Show digest information as a &#x60;RepoDigests&#x60; field on each image.
     * @type {boolean}
     * @memberof ImageApiImageList
     */
    readonly digests?: boolean
}

/**
 * Request parameters for imageLoad operation in ImageApi.
 * @export
 * @interface ImageApiImageLoadRequest
 */
export interface ImageApiImageLoadRequest {
    /**
     * Suppress progress details during load.
     * @type {boolean}
     * @memberof ImageApiImageLoad
     */
    readonly quiet?: boolean

    /**
     * Tar archive containing images
     * @type {File}
     * @memberof ImageApiImageLoad
     */
    readonly imagesTarball?: File
}

/**
 * Request parameters for imagePrune operation in ImageApi.
 * @export
 * @interface ImageApiImagePruneRequest
 */
export interface ImageApiImagePruneRequest {
    /**
     * Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @type {string}
     * @memberof ImageApiImagePrune
     */
    readonly filters?: string
}

/**
 * Request parameters for imagePush operation in ImageApi.
 * @export
 * @interface ImageApiImagePushRequest
 */
export interface ImageApiImagePushRequest {
    /**
     * Name of the image to push. For example, &#x60;registry.example.com/myimage&#x60;. The image must be present in the local image store with the same name.  The name should be provided without tag; if a tag is provided, it is ignored. For example, &#x60;registry.example.com/myimage:latest&#x60; is considered equivalent to &#x60;registry.example.com/myimage&#x60;.  Use the &#x60;tag&#x60; parameter to specify the tag to push. 
     * @type {string}
     * @memberof ImageApiImagePush
     */
    readonly name: string

    /**
     * A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof ImageApiImagePush
     */
    readonly xRegistryAuth: string

    /**
     * Tag of the image to push. For example, &#x60;latest&#x60;. If no tag is provided, all tags of the given image that are present in the local image store are pushed. 
     * @type {string}
     * @memberof ImageApiImagePush
     */
    readonly tag?: string
}

/**
 * Request parameters for imageSearch operation in ImageApi.
 * @export
 * @interface ImageApiImageSearchRequest
 */
export interface ImageApiImageSearchRequest {
    /**
     * Term to search
     * @type {string}
     * @memberof ImageApiImageSearch
     */
    readonly term: string

    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof ImageApiImageSearch
     */
    readonly limit?: number

    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least \&#39;number\&#39; stars. 
     * @type {string}
     * @memberof ImageApiImageSearch
     */
    readonly filters?: string
}

/**
 * Request parameters for imageTag operation in ImageApi.
 * @export
 * @interface ImageApiImageTagRequest
 */
export interface ImageApiImageTagRequest {
    /**
     * Image name or ID to tag.
     * @type {string}
     * @memberof ImageApiImageTag
     */
    readonly name: string

    /**
     * The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
     * @type {string}
     * @memberof ImageApiImageTag
     */
    readonly repo?: string

    /**
     * The name of the new tag.
     * @type {string}
     * @memberof ImageApiImageTag
     */
    readonly tag?: string
}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @summary Delete builder cache
     * @param {ImageApiBuildPruneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public buildPrune(requestParameters: ImageApiBuildPruneRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).buildPrune(requestParameters.keepStorage, requestParameters.all, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive\'s root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     * @summary Build an image
     * @param {ImageApiImageBuildRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageBuild(requestParameters: ImageApiImageBuildRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageBuild(requestParameters.dockerfile, requestParameters.t, requestParameters.extrahosts, requestParameters.remote, requestParameters.q, requestParameters.nocache, requestParameters.cachefrom, requestParameters.pull, requestParameters.rm, requestParameters.forcerm, requestParameters.memory, requestParameters.memswap, requestParameters.cpushares, requestParameters.cpusetcpus, requestParameters.cpuperiod, requestParameters.cpuquota, requestParameters.buildargs, requestParameters.shmsize, requestParameters.squash, requestParameters.labels, requestParameters.networkmode, requestParameters.contentType, requestParameters.xRegistryConfig, requestParameters.platform, requestParameters.target, requestParameters.outputs, requestParameters.version, requestParameters.inputStream, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new image from a container
     * @param {ImageApiImageCommitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCommit(requestParameters: ImageApiImageCommitRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCommit(requestParameters.container, requestParameters.repo, requestParameters.tag, requestParameters.comment, requestParameters.author, requestParameters.pause, requestParameters.changes, requestParameters.containerConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pull or import an image.
     * @summary Create an image
     * @param {ImageApiImageCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCreate(requestParameters: ImageApiImageCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageCreate(requestParameters.fromImage, requestParameters.fromSrc, requestParameters.repo, requestParameters.tag, requestParameters.message, requestParameters.xRegistryAuth, requestParameters.changes, requestParameters.platform, requestParameters.inputImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an image, along with any untagged parent images that were referenced by that image.  Images can\'t be removed if they have descendant images, are being used by a running container or are being used by a build. 
     * @summary Remove an image
     * @param {ImageApiImageDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageDelete(requestParameters: ImageApiImageDeleteRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageDelete(requestParameters.name, requestParameters.force, requestParameters.noprune, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     * @summary Export an image
     * @param {ImageApiImageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageGet(requestParameters: ImageApiImageGetRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageGet(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the \'repositories\' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Export several images
     * @param {ImageApiImageGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageGetAll(requestParameters: ImageApiImageGetAllRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageGetAll(requestParameters.names, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return parent layers of an image.
     * @summary Get the history of an image
     * @param {ImageApiImageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageHistory(requestParameters: ImageApiImageHistoryRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageHistory(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return low-level information about an image.
     * @summary Inspect an image
     * @param {ImageApiImageInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageInspect(requestParameters: ImageApiImageInspectRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageInspect(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * @summary List Images
     * @param {ImageApiImageListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageList(requestParameters: ImageApiImageListRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageList(requestParameters.all, requestParameters.filters, requestParameters.sharedSize, requestParameters.digests, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Import images
     * @param {ImageApiImageLoadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageLoad(requestParameters: ImageApiImageLoadRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageLoad(requestParameters.quiet, requestParameters.imagesTarball, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete unused images
     * @param {ImageApiImagePruneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePrune(requestParameters: ImageApiImagePruneRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePrune(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     * @summary Push an image
     * @param {ImageApiImagePushRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePush(requestParameters: ImageApiImagePushRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imagePush(requestParameters.name, requestParameters.xRegistryAuth, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for an image on Docker Hub.
     * @summary Search images
     * @param {ImageApiImageSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearch(requestParameters: ImageApiImageSearchRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageSearch(requestParameters.term, requestParameters.limit, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tag an image so that it becomes part of a repository.
     * @summary Tag an image
     * @param {ImageApiImageTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageTag(requestParameters: ImageApiImageTagRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).imageTag(requestParameters.name, requestParameters.repo, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ImageBuildContentTypeEnum = {
    ApplicationXTar: 'application/x-tar'
} as const;
export type ImageBuildContentTypeEnum = typeof ImageBuildContentTypeEnum[keyof typeof ImageBuildContentTypeEnum];
/**
 * @export
 */
export const ImageBuildVersionEnum = {
    _1: '1',
    _2: '2'
} as const;
export type ImageBuildVersionEnum = typeof ImageBuildVersionEnum[keyof typeof ImageBuildVersionEnum];


/**
 * NetworkApi - axios parameter creator
 * @export
 */
export const NetworkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {string} id Network ID or name
         * @param {NetworkConnectRequest} container 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkConnect: async (id: string, container: NetworkConnectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('networkConnect', 'id', id)
            // verify required parameter 'container' is not null or undefined
            assertParamExists('networkConnect', 'container', container)
            const localVarPath = `/networks/{id}/connect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(container, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkCreateRequest} networkConfig Network configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkCreate: async (networkConfig: NetworkCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'networkConfig' is not null or undefined
            assertParamExists('networkCreate', 'networkConfig', networkConfig)
            const localVarPath = `/networks/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(networkConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a network
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('networkDelete', 'id', id)
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {string} id Network ID or name
         * @param {NetworkDisconnectRequest} container 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDisconnect: async (id: string, container: NetworkDisconnectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('networkDisconnect', 'id', id)
            // verify required parameter 'container' is not null or undefined
            assertParamExists('networkDisconnect', 'container', container)
            const localVarPath = `/networks/{id}/disconnect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(container, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a network
         * @param {string} id Network ID or name
         * @param {boolean} [verbose] Detailed inspect output for troubleshooting
         * @param {string} [scope] Filter the network by scope (swarm, global, or local)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInspect: async (id: string, verbose?: boolean, scope?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('networkInspect', 'id', id)
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (verbose !== undefined) {
                localVarQueryParameter['verbose'] = verbose;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network\&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkPrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/networks/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkApi - functional programming interface
 * @export
 */
export const NetworkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NetworkApiAxiosParamCreator(configuration)
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {string} id Network ID or name
         * @param {NetworkConnectRequest} container 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkConnect(id: string, container: NetworkConnectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkConnect(id, container, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkConnect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkCreateRequest} networkConfig Network configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkCreate(networkConfig: NetworkCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkCreate(networkConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a network
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {string} id Network ID or name
         * @param {NetworkDisconnectRequest} container 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkDisconnect(id: string, container: NetworkDisconnectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkDisconnect(id, container, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkDisconnect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a network
         * @param {string} id Network ID or name
         * @param {boolean} [verbose] Detailed inspect output for troubleshooting
         * @param {string} [scope] Filter the network by scope (swarm, global, or local)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkInspect(id: string, verbose?: boolean, scope?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkInspect(id, verbose, scope, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network\&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Network>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networkPrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkPruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networkPrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworkApi.networkPrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NetworkApi - factory interface
 * @export
 */
export const NetworkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NetworkApiFp(configuration)
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {NetworkApiNetworkConnectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkConnect(requestParameters: NetworkApiNetworkConnectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.networkConnect(requestParameters.id, requestParameters.container, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkApiNetworkCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkCreate(requestParameters: NetworkApiNetworkCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkCreateResponse> {
            return localVarFp.networkCreate(requestParameters.networkConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a network
         * @param {NetworkApiNetworkDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDelete(requestParameters: NetworkApiNetworkDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.networkDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {NetworkApiNetworkDisconnectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDisconnect(requestParameters: NetworkApiNetworkDisconnectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.networkDisconnect(requestParameters.id, requestParameters.container, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a network
         * @param {NetworkApiNetworkInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInspect(requestParameters: NetworkApiNetworkInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Network> {
            return localVarFp.networkInspect(requestParameters.id, requestParameters.verbose, requestParameters.scope, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {NetworkApiNetworkListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(requestParameters: NetworkApiNetworkListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Network>> {
            return localVarFp.networkList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {NetworkApiNetworkPruneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkPrune(requestParameters: NetworkApiNetworkPruneRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<NetworkPruneResponse> {
            return localVarFp.networkPrune(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for networkConnect operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkConnectRequest
 */
export interface NetworkApiNetworkConnectRequest {
    /**
     * Network ID or name
     * @type {string}
     * @memberof NetworkApiNetworkConnect
     */
    readonly id: string

    /**
     * 
     * @type {NetworkConnectRequest}
     * @memberof NetworkApiNetworkConnect
     */
    readonly container: NetworkConnectRequest
}

/**
 * Request parameters for networkCreate operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkCreateRequest
 */
export interface NetworkApiNetworkCreateRequest {
    /**
     * Network configuration
     * @type {NetworkCreateRequest}
     * @memberof NetworkApiNetworkCreate
     */
    readonly networkConfig: NetworkCreateRequest
}

/**
 * Request parameters for networkDelete operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkDeleteRequest
 */
export interface NetworkApiNetworkDeleteRequest {
    /**
     * Network ID or name
     * @type {string}
     * @memberof NetworkApiNetworkDelete
     */
    readonly id: string
}

/**
 * Request parameters for networkDisconnect operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkDisconnectRequest
 */
export interface NetworkApiNetworkDisconnectRequest {
    /**
     * Network ID or name
     * @type {string}
     * @memberof NetworkApiNetworkDisconnect
     */
    readonly id: string

    /**
     * 
     * @type {NetworkDisconnectRequest}
     * @memberof NetworkApiNetworkDisconnect
     */
    readonly container: NetworkDisconnectRequest
}

/**
 * Request parameters for networkInspect operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkInspectRequest
 */
export interface NetworkApiNetworkInspectRequest {
    /**
     * Network ID or name
     * @type {string}
     * @memberof NetworkApiNetworkInspect
     */
    readonly id: string

    /**
     * Detailed inspect output for troubleshooting
     * @type {boolean}
     * @memberof NetworkApiNetworkInspect
     */
    readonly verbose?: boolean

    /**
     * Filter the network by scope (swarm, global, or local)
     * @type {string}
     * @memberof NetworkApiNetworkInspect
     */
    readonly scope?: string
}

/**
 * Request parameters for networkList operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkListRequest
 */
export interface NetworkApiNetworkListRequest {
    /**
     * JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network\&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
     * @type {string}
     * @memberof NetworkApiNetworkList
     */
    readonly filters?: string
}

/**
 * Request parameters for networkPrune operation in NetworkApi.
 * @export
 * @interface NetworkApiNetworkPruneRequest
 */
export interface NetworkApiNetworkPruneRequest {
    /**
     * Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @type {string}
     * @memberof NetworkApiNetworkPrune
     */
    readonly filters?: string
}

/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
export class NetworkApi extends BaseAPI {
    /**
     * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
     * @summary Connect a container to a network
     * @param {NetworkApiNetworkConnectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkConnect(requestParameters: NetworkApiNetworkConnectRequest, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkConnect(requestParameters.id, requestParameters.container, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a network
     * @param {NetworkApiNetworkCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkCreate(requestParameters: NetworkApiNetworkCreateRequest, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkCreate(requestParameters.networkConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a network
     * @param {NetworkApiNetworkDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkDelete(requestParameters: NetworkApiNetworkDeleteRequest, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disconnect a container from a network
     * @param {NetworkApiNetworkDisconnectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkDisconnect(requestParameters: NetworkApiNetworkDisconnectRequest, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkDisconnect(requestParameters.id, requestParameters.container, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a network
     * @param {NetworkApiNetworkInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkInspect(requestParameters: NetworkApiNetworkInspectRequest, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkInspect(requestParameters.id, requestParameters.verbose, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
     * @summary List networks
     * @param {NetworkApiNetworkListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkList(requestParameters: NetworkApiNetworkListRequest = {}, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete unused networks
     * @param {NetworkApiNetworkPruneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkPrune(requestParameters: NetworkApiNetworkPruneRequest = {}, options?: RawAxiosRequestConfig) {
        return NetworkApiFp(this.configuration).networkPrune(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a node
         * @param {string} id The ID or name of the node
         * @param {boolean} [force] Force remove a node from the swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeDelete: async (id: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nodeDelete', 'id', id)
            const localVarPath = `/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a node
         * @param {string} id The ID or name of the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInspect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nodeInspect', 'id', id)
            const localVarPath = `/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List nodes
         * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a node
         * @param {string} id The ID of the node
         * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
         * @param {NodeSpec} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeUpdate: async (id: string, version: number, body?: NodeSpec, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nodeUpdate', 'id', id)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('nodeUpdate', 'version', version)
            const localVarPath = `/nodes/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a node
         * @param {string} id The ID or name of the node
         * @param {boolean} [force] Force remove a node from the swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodeDelete(id: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodeDelete(id, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.nodeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a node
         * @param {string} id The ID or name of the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodeInspect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Node>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodeInspect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.nodeInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List nodes
         * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodeList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Node>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodeList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.nodeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a node
         * @param {string} id The ID of the node
         * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
         * @param {NodeSpec} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodeUpdate(id: string, version: number, body?: NodeSpec, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodeUpdate(id, version, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.nodeUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a node
         * @param {NodeApiNodeDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeDelete(requestParameters: NodeApiNodeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nodeDelete(requestParameters.id, requestParameters.force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a node
         * @param {NodeApiNodeInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInspect(requestParameters: NodeApiNodeInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Node> {
            return localVarFp.nodeInspect(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List nodes
         * @param {NodeApiNodeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeList(requestParameters: NodeApiNodeListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Node>> {
            return localVarFp.nodeList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a node
         * @param {NodeApiNodeUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeUpdate(requestParameters: NodeApiNodeUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.nodeUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for nodeDelete operation in NodeApi.
 * @export
 * @interface NodeApiNodeDeleteRequest
 */
export interface NodeApiNodeDeleteRequest {
    /**
     * The ID or name of the node
     * @type {string}
     * @memberof NodeApiNodeDelete
     */
    readonly id: string

    /**
     * Force remove a node from the swarm
     * @type {boolean}
     * @memberof NodeApiNodeDelete
     */
    readonly force?: boolean
}

/**
 * Request parameters for nodeInspect operation in NodeApi.
 * @export
 * @interface NodeApiNodeInspectRequest
 */
export interface NodeApiNodeInspectRequest {
    /**
     * The ID or name of the node
     * @type {string}
     * @memberof NodeApiNodeInspect
     */
    readonly id: string
}

/**
 * Request parameters for nodeList operation in NodeApi.
 * @export
 * @interface NodeApiNodeListRequest
 */
export interface NodeApiNodeListRequest {
    /**
     * Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
     * @type {string}
     * @memberof NodeApiNodeList
     */
    readonly filters?: string
}

/**
 * Request parameters for nodeUpdate operation in NodeApi.
 * @export
 * @interface NodeApiNodeUpdateRequest
 */
export interface NodeApiNodeUpdateRequest {
    /**
     * The ID of the node
     * @type {string}
     * @memberof NodeApiNodeUpdate
     */
    readonly id: string

    /**
     * The version number of the node object being updated. This is required to avoid conflicting writes. 
     * @type {number}
     * @memberof NodeApiNodeUpdate
     */
    readonly version: number

    /**
     * 
     * @type {NodeSpec}
     * @memberof NodeApiNodeUpdate
     */
    readonly body?: NodeSpec
}

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI {
    /**
     * 
     * @summary Delete a node
     * @param {NodeApiNodeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeDelete(requestParameters: NodeApiNodeDeleteRequest, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).nodeDelete(requestParameters.id, requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a node
     * @param {NodeApiNodeInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeInspect(requestParameters: NodeApiNodeInspectRequest, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).nodeInspect(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List nodes
     * @param {NodeApiNodeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeList(requestParameters: NodeApiNodeListRequest = {}, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).nodeList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a node
     * @param {NodeApiNodeUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeUpdate(requestParameters: NodeApiNodeUpdateRequest, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).nodeUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PluginApi - axios parameter creator
 * @export
 */
export const PluginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginPrivileges: async (remote: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remote' is not null or undefined
            assertParamExists('getPluginPrivileges', 'remote', remote)
            const localVarPath = `/plugins/privileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {File} [tarContext] Path to tar containing plugin rootfs and manifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginCreate: async (name: string, tarContext?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginCreate', 'name', name)
            const localVarPath = `/plugins/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tarContext, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDelete: async (name: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginDelete', 'name', name)
            const localVarPath = `/plugins/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Force disable a plugin even if still in use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDisable: async (name: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginDisable', 'name', name)
            const localVarPath = `/plugins/{name}/disable`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {number} [timeout] Set the HTTP client timeout (in seconds)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEnable: async (name: string, timeout?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginEnable', 'name', name)
            const localVarPath = `/plugins/{name}/enable`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginInspect: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginInspect', 'name', name)
            const localVarPath = `/plugins/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plugins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPull: async (remote: string, name?: string, xRegistryAuth?: string, body?: Array<PluginPrivilege>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remote' is not null or undefined
            assertParamExists('pluginPull', 'remote', remote)
            const localVarPath = `/plugins/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPush: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginPush', 'name', name)
            const localVarPath = `/plugins/{name}/push`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginSet: async (name: string, body?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginSet', 'name', name)
            const localVarPath = `/plugins/{name}/set`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginUpgrade: async (name: string, remote: string, xRegistryAuth?: string, body?: Array<PluginPrivilege>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pluginUpgrade', 'name', name)
            // verify required parameter 'remote' is not null or undefined
            assertParamExists('pluginUpgrade', 'remote', remote)
            const localVarPath = `/plugins/{name}/upgrade`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPluginPrivileges(remote: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PluginPrivilege>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPluginPrivileges(remote, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.getPluginPrivileges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {File} [tarContext] Path to tar containing plugin rootfs and manifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginCreate(name: string, tarContext?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginCreate(name, tarContext, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginDelete(name: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginDelete(name, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Force disable a plugin even if still in use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginDisable(name: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginDisable(name, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginDisable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {number} [timeout] Set the HTTP client timeout (in seconds)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginEnable(name: string, timeout?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginEnable(name, timeout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginEnable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginInspect(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plugin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginInspect(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Plugin>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginPull(remote: string, name?: string, xRegistryAuth?: string, body?: Array<PluginPrivilege>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginPull(remote, name, xRegistryAuth, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginPull']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginPush(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginPush(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginPush']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginSet(name: string, body?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginSet(name, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginSet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pluginUpgrade(name: string, remote: string, xRegistryAuth?: string, body?: Array<PluginPrivilege>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pluginUpgrade(name, remote, xRegistryAuth, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginApi.pluginUpgrade']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginApiFp(configuration)
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {PluginApiGetPluginPrivilegesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginPrivileges(requestParameters: PluginApiGetPluginPrivilegesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PluginPrivilege>> {
            return localVarFp.getPluginPrivileges(requestParameters.remote, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a plugin
         * @param {PluginApiPluginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginCreate(requestParameters: PluginApiPluginCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginCreate(requestParameters.name, requestParameters.tarContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {PluginApiPluginDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDelete(requestParameters: PluginApiPluginDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Plugin> {
            return localVarFp.pluginDelete(requestParameters.name, requestParameters.force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {PluginApiPluginDisableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDisable(requestParameters: PluginApiPluginDisableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginDisable(requestParameters.name, requestParameters.force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {PluginApiPluginEnableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEnable(requestParameters: PluginApiPluginEnableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginEnable(requestParameters.name, requestParameters.timeout, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {PluginApiPluginInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginInspect(requestParameters: PluginApiPluginInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Plugin> {
            return localVarFp.pluginInspect(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {PluginApiPluginListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginList(requestParameters: PluginApiPluginListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Plugin>> {
            return localVarFp.pluginList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {PluginApiPluginPullRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPull(requestParameters: PluginApiPluginPullRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginPull(requestParameters.remote, requestParameters.name, requestParameters.xRegistryAuth, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {PluginApiPluginPushRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPush(requestParameters: PluginApiPluginPushRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginPush(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {PluginApiPluginSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginSet(requestParameters: PluginApiPluginSetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginSet(requestParameters.name, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {PluginApiPluginUpgradeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginUpgrade(requestParameters: PluginApiPluginUpgradeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pluginUpgrade(requestParameters.name, requestParameters.remote, requestParameters.xRegistryAuth, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPluginPrivileges operation in PluginApi.
 * @export
 * @interface PluginApiGetPluginPrivilegesRequest
 */
export interface PluginApiGetPluginPrivilegesRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiGetPluginPrivileges
     */
    readonly remote: string
}

/**
 * Request parameters for pluginCreate operation in PluginApi.
 * @export
 * @interface PluginApiPluginCreateRequest
 */
export interface PluginApiPluginCreateRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginCreate
     */
    readonly name: string

    /**
     * Path to tar containing plugin rootfs and manifest
     * @type {File}
     * @memberof PluginApiPluginCreate
     */
    readonly tarContext?: File
}

/**
 * Request parameters for pluginDelete operation in PluginApi.
 * @export
 * @interface PluginApiPluginDeleteRequest
 */
export interface PluginApiPluginDeleteRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginDelete
     */
    readonly name: string

    /**
     * Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
     * @type {boolean}
     * @memberof PluginApiPluginDelete
     */
    readonly force?: boolean
}

/**
 * Request parameters for pluginDisable operation in PluginApi.
 * @export
 * @interface PluginApiPluginDisableRequest
 */
export interface PluginApiPluginDisableRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginDisable
     */
    readonly name: string

    /**
     * Force disable a plugin even if still in use. 
     * @type {boolean}
     * @memberof PluginApiPluginDisable
     */
    readonly force?: boolean
}

/**
 * Request parameters for pluginEnable operation in PluginApi.
 * @export
 * @interface PluginApiPluginEnableRequest
 */
export interface PluginApiPluginEnableRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginEnable
     */
    readonly name: string

    /**
     * Set the HTTP client timeout (in seconds)
     * @type {number}
     * @memberof PluginApiPluginEnable
     */
    readonly timeout?: number
}

/**
 * Request parameters for pluginInspect operation in PluginApi.
 * @export
 * @interface PluginApiPluginInspectRequest
 */
export interface PluginApiPluginInspectRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginInspect
     */
    readonly name: string
}

/**
 * Request parameters for pluginList operation in PluginApi.
 * @export
 * @interface PluginApiPluginListRequest
 */
export interface PluginApiPluginListRequest {
    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
     * @type {string}
     * @memberof PluginApiPluginList
     */
    readonly filters?: string
}

/**
 * Request parameters for pluginPull operation in PluginApi.
 * @export
 * @interface PluginApiPluginPullRequest
 */
export interface PluginApiPluginPullRequest {
    /**
     * Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginPull
     */
    readonly remote: string

    /**
     * Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginPull
     */
    readonly name?: string

    /**
     * A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof PluginApiPluginPull
     */
    readonly xRegistryAuth?: string

    /**
     * 
     * @type {Array<PluginPrivilege>}
     * @memberof PluginApiPluginPull
     */
    readonly body?: Array<PluginPrivilege>
}

/**
 * Request parameters for pluginPush operation in PluginApi.
 * @export
 * @interface PluginApiPluginPushRequest
 */
export interface PluginApiPluginPushRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginPush
     */
    readonly name: string
}

/**
 * Request parameters for pluginSet operation in PluginApi.
 * @export
 * @interface PluginApiPluginSetRequest
 */
export interface PluginApiPluginSetRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginSet
     */
    readonly name: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PluginApiPluginSet
     */
    readonly body?: Array<string>
}

/**
 * Request parameters for pluginUpgrade operation in PluginApi.
 * @export
 * @interface PluginApiPluginUpgradeRequest
 */
export interface PluginApiPluginUpgradeRequest {
    /**
     * The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginUpgrade
     */
    readonly name: string

    /**
     * Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @type {string}
     * @memberof PluginApiPluginUpgrade
     */
    readonly remote: string

    /**
     * A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof PluginApiPluginUpgrade
     */
    readonly xRegistryAuth?: string

    /**
     * 
     * @type {Array<PluginPrivilege>}
     * @memberof PluginApiPluginUpgrade
     */
    readonly body?: Array<PluginPrivilege>
}

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI {
    /**
     * 
     * @summary Get plugin privileges
     * @param {PluginApiGetPluginPrivilegesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public getPluginPrivileges(requestParameters: PluginApiGetPluginPrivilegesRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).getPluginPrivileges(requestParameters.remote, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a plugin
     * @param {PluginApiPluginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginCreate(requestParameters: PluginApiPluginCreateRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginCreate(requestParameters.name, requestParameters.tarContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a plugin
     * @param {PluginApiPluginDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginDelete(requestParameters: PluginApiPluginDeleteRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginDelete(requestParameters.name, requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable a plugin
     * @param {PluginApiPluginDisableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginDisable(requestParameters: PluginApiPluginDisableRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginDisable(requestParameters.name, requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable a plugin
     * @param {PluginApiPluginEnableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginEnable(requestParameters: PluginApiPluginEnableRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginEnable(requestParameters.name, requestParameters.timeout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a plugin
     * @param {PluginApiPluginInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginInspect(requestParameters: PluginApiPluginInspectRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginInspect(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about installed plugins.
     * @summary List plugins
     * @param {PluginApiPluginListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginList(requestParameters: PluginApiPluginListRequest = {}, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
     * @summary Install a plugin
     * @param {PluginApiPluginPullRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginPull(requestParameters: PluginApiPluginPullRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginPull(requestParameters.remote, requestParameters.name, requestParameters.xRegistryAuth, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Push a plugin to the registry. 
     * @summary Push a plugin
     * @param {PluginApiPluginPushRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginPush(requestParameters: PluginApiPluginPushRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginPush(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Configure a plugin
     * @param {PluginApiPluginSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginSet(requestParameters: PluginApiPluginSetRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginSet(requestParameters.name, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upgrade a plugin
     * @param {PluginApiPluginUpgradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginUpgrade(requestParameters: PluginApiPluginUpgradeRequest, options?: RawAxiosRequestConfig) {
        return PluginApiFp(this.configuration).pluginUpgrade(requestParameters.name, requestParameters.remote, requestParameters.xRegistryAuth, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecretApi - axios parameter creator
 * @export
 */
export const SecretApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretCreate: async (body?: SecretCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secrets/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secretDelete', 'id', id)
            const localVarPath = `/secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretInspect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secretInspect', 'id', id)
            const localVarPath = `/secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List secrets
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Secret
         * @param {string} id The ID or name of the secret
         * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
         * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretUpdate: async (id: string, version: number, body?: SecretSpec, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secretUpdate', 'id', id)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('secretUpdate', 'version', version)
            const localVarPath = `/secrets/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecretApi - functional programming interface
 * @export
 */
export const SecretApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecretApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretCreateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretCreate(body?: SecretCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecretApi.secretCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecretApi.secretDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretInspect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Secret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretInspect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecretApi.secretInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List secrets
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Secret>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecretApi.secretList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Secret
         * @param {string} id The ID or name of the secret
         * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
         * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretUpdate(id: string, version: number, body?: SecretSpec, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretUpdate(id, version, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecretApi.secretUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecretApi - factory interface
 * @export
 */
export const SecretApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecretApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretApiSecretCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretCreate(requestParameters: SecretApiSecretCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.secretCreate(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a secret
         * @param {SecretApiSecretDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretDelete(requestParameters: SecretApiSecretDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.secretDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {SecretApiSecretInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretInspect(requestParameters: SecretApiSecretInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Secret> {
            return localVarFp.secretInspect(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List secrets
         * @param {SecretApiSecretListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretList(requestParameters: SecretApiSecretListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Secret>> {
            return localVarFp.secretList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Secret
         * @param {SecretApiSecretUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretUpdate(requestParameters: SecretApiSecretUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.secretUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for secretCreate operation in SecretApi.
 * @export
 * @interface SecretApiSecretCreateRequest
 */
export interface SecretApiSecretCreateRequest {
    /**
     * 
     * @type {SecretCreateRequest}
     * @memberof SecretApiSecretCreate
     */
    readonly body?: SecretCreateRequest
}

/**
 * Request parameters for secretDelete operation in SecretApi.
 * @export
 * @interface SecretApiSecretDeleteRequest
 */
export interface SecretApiSecretDeleteRequest {
    /**
     * ID of the secret
     * @type {string}
     * @memberof SecretApiSecretDelete
     */
    readonly id: string
}

/**
 * Request parameters for secretInspect operation in SecretApi.
 * @export
 * @interface SecretApiSecretInspectRequest
 */
export interface SecretApiSecretInspectRequest {
    /**
     * ID of the secret
     * @type {string}
     * @memberof SecretApiSecretInspect
     */
    readonly id: string
}

/**
 * Request parameters for secretList operation in SecretApi.
 * @export
 * @interface SecretApiSecretListRequest
 */
export interface SecretApiSecretListRequest {
    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
     * @type {string}
     * @memberof SecretApiSecretList
     */
    readonly filters?: string
}

/**
 * Request parameters for secretUpdate operation in SecretApi.
 * @export
 * @interface SecretApiSecretUpdateRequest
 */
export interface SecretApiSecretUpdateRequest {
    /**
     * The ID or name of the secret
     * @type {string}
     * @memberof SecretApiSecretUpdate
     */
    readonly id: string

    /**
     * The version number of the secret object being updated. This is required to avoid conflicting writes. 
     * @type {number}
     * @memberof SecretApiSecretUpdate
     */
    readonly version: number

    /**
     * The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values. 
     * @type {SecretSpec}
     * @memberof SecretApiSecretUpdate
     */
    readonly body?: SecretSpec
}

/**
 * SecretApi - object-oriented interface
 * @export
 * @class SecretApi
 * @extends {BaseAPI}
 */
export class SecretApi extends BaseAPI {
    /**
     * 
     * @summary Create a secret
     * @param {SecretApiSecretCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretCreate(requestParameters: SecretApiSecretCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return SecretApiFp(this.configuration).secretCreate(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a secret
     * @param {SecretApiSecretDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretDelete(requestParameters: SecretApiSecretDeleteRequest, options?: RawAxiosRequestConfig) {
        return SecretApiFp(this.configuration).secretDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a secret
     * @param {SecretApiSecretInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretInspect(requestParameters: SecretApiSecretInspectRequest, options?: RawAxiosRequestConfig) {
        return SecretApiFp(this.configuration).secretInspect(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List secrets
     * @param {SecretApiSecretListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretList(requestParameters: SecretApiSecretListRequest = {}, options?: RawAxiosRequestConfig) {
        return SecretApiFp(this.configuration).secretList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Secret
     * @param {SecretApiSecretUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretUpdate(requestParameters: SecretApiSecretUpdateRequest, options?: RawAxiosRequestConfig) {
        return SecretApiFp(this.configuration).secretUpdate(requestParameters.id, requestParameters.version, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServiceCreateRequest} body 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceCreate: async (body: ServiceCreateRequest, xRegistryAuth?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('serviceCreate', 'body', body)
            const localVarPath = `/services/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a service
         * @param {string} id ID or name of service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('serviceDelete', 'id', id)
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a service
         * @param {string} id ID or name of service.
         * @param {boolean} [insertDefaults] Fill empty fields with default values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceInspect: async (id: string, insertDefaults?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('serviceInspect', 'id', id)
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (insertDefaults !== undefined) {
                localVarQueryParameter['insertDefaults'] = insertDefaults;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List services
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
         * @param {boolean} [status] Include service status, with count of running and desired tasks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceList: async (filters?: string, status?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {string} id ID or name of the service
         * @param {boolean} [details] Show service context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceLogs: async (id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('serviceLogs', 'id', id)
            const localVarPath = `/services/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a service
         * @param {string} id ID or name of service.
         * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
         * @param {ServiceUpdateRequest} body 
         * @param {ServiceUpdateRegistryAuthFromEnum} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
         * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceUpdate: async (id: string, version: number, body: ServiceUpdateRequest, registryAuthFrom?: ServiceUpdateRegistryAuthFromEnum, rollback?: string, xRegistryAuth?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('serviceUpdate', 'id', id)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('serviceUpdate', 'version', version)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('serviceUpdate', 'body', body)
            const localVarPath = `/services/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (registryAuthFrom !== undefined) {
                localVarQueryParameter['registryAuthFrom'] = registryAuthFrom;
            }

            if (rollback !== undefined) {
                localVarQueryParameter['rollback'] = rollback;
            }

            if (xRegistryAuth != null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServiceCreateRequest} body 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceCreate(body: ServiceCreateRequest, xRegistryAuth?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceCreate(body, xRegistryAuth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a service
         * @param {string} id ID or name of service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a service
         * @param {string} id ID or name of service.
         * @param {boolean} [insertDefaults] Fill empty fields with default values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceInspect(id: string, insertDefaults?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceInspect(id, insertDefaults, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List services
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
         * @param {boolean} [status] Include service status, with count of running and desired tasks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceList(filters?: string, status?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Service>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceList(filters, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {string} id ID or name of the service
         * @param {boolean} [details] Show service context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a service
         * @param {string} id ID or name of service.
         * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
         * @param {ServiceUpdateRequest} body 
         * @param {ServiceUpdateRegistryAuthFromEnum} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
         * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceUpdate(id: string, version: number, body: ServiceUpdateRequest, registryAuthFrom?: ServiceUpdateRegistryAuthFromEnum, rollback?: string, xRegistryAuth?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceUpdate(id, version, body, registryAuthFrom, rollback, xRegistryAuth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceApi.serviceUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServiceApiServiceCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceCreate(requestParameters: ServiceApiServiceCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServiceCreateResponse> {
            return localVarFp.serviceCreate(requestParameters.body, requestParameters.xRegistryAuth, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a service
         * @param {ServiceApiServiceDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceDelete(requestParameters: ServiceApiServiceDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.serviceDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a service
         * @param {ServiceApiServiceInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceInspect(requestParameters: ServiceApiServiceInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Service> {
            return localVarFp.serviceInspect(requestParameters.id, requestParameters.insertDefaults, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List services
         * @param {ServiceApiServiceListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceList(requestParameters: ServiceApiServiceListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Service>> {
            return localVarFp.serviceList(requestParameters.filters, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {ServiceApiServiceLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceLogs(requestParameters: ServiceApiServiceLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.serviceLogs(requestParameters.id, requestParameters.details, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a service
         * @param {ServiceApiServiceUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceUpdate(requestParameters: ServiceApiServiceUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServiceUpdateResponse> {
            return localVarFp.serviceUpdate(requestParameters.id, requestParameters.version, requestParameters.body, requestParameters.registryAuthFrom, requestParameters.rollback, requestParameters.xRegistryAuth, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for serviceCreate operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceCreateRequest
 */
export interface ServiceApiServiceCreateRequest {
    /**
     * 
     * @type {ServiceCreateRequest}
     * @memberof ServiceApiServiceCreate
     */
    readonly body: ServiceCreateRequest

    /**
     * A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof ServiceApiServiceCreate
     */
    readonly xRegistryAuth?: string
}

/**
 * Request parameters for serviceDelete operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceDeleteRequest
 */
export interface ServiceApiServiceDeleteRequest {
    /**
     * ID or name of service.
     * @type {string}
     * @memberof ServiceApiServiceDelete
     */
    readonly id: string
}

/**
 * Request parameters for serviceInspect operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceInspectRequest
 */
export interface ServiceApiServiceInspectRequest {
    /**
     * ID or name of service.
     * @type {string}
     * @memberof ServiceApiServiceInspect
     */
    readonly id: string

    /**
     * Fill empty fields with default values.
     * @type {boolean}
     * @memberof ServiceApiServiceInspect
     */
    readonly insertDefaults?: boolean
}

/**
 * Request parameters for serviceList operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceListRequest
 */
export interface ServiceApiServiceListRequest {
    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
     * @type {string}
     * @memberof ServiceApiServiceList
     */
    readonly filters?: string

    /**
     * Include service status, with count of running and desired tasks. 
     * @type {boolean}
     * @memberof ServiceApiServiceList
     */
    readonly status?: boolean
}

/**
 * Request parameters for serviceLogs operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceLogsRequest
 */
export interface ServiceApiServiceLogsRequest {
    /**
     * ID or name of the service
     * @type {string}
     * @memberof ServiceApiServiceLogs
     */
    readonly id: string

    /**
     * Show service context and extra details provided to logs.
     * @type {boolean}
     * @memberof ServiceApiServiceLogs
     */
    readonly details?: boolean

    /**
     * Keep connection after returning logs.
     * @type {boolean}
     * @memberof ServiceApiServiceLogs
     */
    readonly follow?: boolean

    /**
     * Return logs from &#x60;stdout&#x60;
     * @type {boolean}
     * @memberof ServiceApiServiceLogs
     */
    readonly stdout?: boolean

    /**
     * Return logs from &#x60;stderr&#x60;
     * @type {boolean}
     * @memberof ServiceApiServiceLogs
     */
    readonly stderr?: boolean

    /**
     * Only return logs since this time, as a UNIX timestamp
     * @type {number}
     * @memberof ServiceApiServiceLogs
     */
    readonly since?: number

    /**
     * Add timestamps to every log line
     * @type {boolean}
     * @memberof ServiceApiServiceLogs
     */
    readonly timestamps?: boolean

    /**
     * Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @type {string}
     * @memberof ServiceApiServiceLogs
     */
    readonly tail?: string
}

/**
 * Request parameters for serviceUpdate operation in ServiceApi.
 * @export
 * @interface ServiceApiServiceUpdateRequest
 */
export interface ServiceApiServiceUpdateRequest {
    /**
     * ID or name of service.
     * @type {string}
     * @memberof ServiceApiServiceUpdate
     */
    readonly id: string

    /**
     * The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
     * @type {number}
     * @memberof ServiceApiServiceUpdate
     */
    readonly version: number

    /**
     * 
     * @type {ServiceUpdateRequest}
     * @memberof ServiceApiServiceUpdate
     */
    readonly body: ServiceUpdateRequest

    /**
     * If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
     * @type {'spec' | 'previous-spec'}
     * @memberof ServiceApiServiceUpdate
     */
    readonly registryAuthFrom?: ServiceUpdateRegistryAuthFromEnum

    /**
     * Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
     * @type {string}
     * @memberof ServiceApiServiceUpdate
     */
    readonly rollback?: string

    /**
     * A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @type {string}
     * @memberof ServiceApiServiceUpdate
     */
    readonly xRegistryAuth?: string
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * 
     * @summary Create a service
     * @param {ServiceApiServiceCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceCreate(requestParameters: ServiceApiServiceCreateRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceCreate(requestParameters.body, requestParameters.xRegistryAuth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a service
     * @param {ServiceApiServiceDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceDelete(requestParameters: ServiceApiServiceDeleteRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a service
     * @param {ServiceApiServiceInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceInspect(requestParameters: ServiceApiServiceInspectRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceInspect(requestParameters.id, requestParameters.insertDefaults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List services
     * @param {ServiceApiServiceListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceList(requestParameters: ServiceApiServiceListRequest = {}, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceList(requestParameters.filters, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get service logs
     * @param {ServiceApiServiceLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceLogs(requestParameters: ServiceApiServiceLogsRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceLogs(requestParameters.id, requestParameters.details, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a service
     * @param {ServiceApiServiceUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceUpdate(requestParameters: ServiceApiServiceUpdateRequest, options?: RawAxiosRequestConfig) {
        return ServiceApiFp(this.configuration).serviceUpdate(requestParameters.id, requestParameters.version, requestParameters.body, requestParameters.registryAuthFrom, requestParameters.rollback, requestParameters.xRegistryAuth, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ServiceUpdateRegistryAuthFromEnum = {
    Spec: 'spec',
    PreviousSpec: 'previous-spec'
} as const;
export type ServiceUpdateRegistryAuthFromEnum = typeof ServiceUpdateRegistryAuthFromEnum[keyof typeof ServiceUpdateRegistryAuthFromEnum];


/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        session: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async session(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.session(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.session']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        session(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.session(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
     * @summary Initialize interactive session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public session(options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).session(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SwarmApi - axios parameter creator
 * @export
 */
export const SwarmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmInitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInit: async (body: SwarmInitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('swarmInit', 'body', body)
            const localVarPath = `/swarm/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInspect: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swarm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmJoinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmJoin: async (body: SwarmJoinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('swarmJoin', 'body', body)
            const localVarPath = `/swarm/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmLeave: async (force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swarm/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmUnlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlock: async (body: SwarmUnlockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('swarmUnlock', 'body', body)
            const localVarPath = `/swarm/unlock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlockkey: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swarm/unlockkey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a swarm
         * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
         * @param {SwarmSpec} body 
         * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
         * @param {boolean} [rotateManagerToken] Rotate the manager join token.
         * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUpdate: async (version: number, body: SwarmSpec, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('swarmUpdate', 'version', version)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('swarmUpdate', 'body', body)
            const localVarPath = `/swarm/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (rotateWorkerToken !== undefined) {
                localVarQueryParameter['rotateWorkerToken'] = rotateWorkerToken;
            }

            if (rotateManagerToken !== undefined) {
                localVarQueryParameter['rotateManagerToken'] = rotateManagerToken;
            }

            if (rotateManagerUnlockKey !== undefined) {
                localVarQueryParameter['rotateManagerUnlockKey'] = rotateManagerUnlockKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SwarmApi - functional programming interface
 * @export
 */
export const SwarmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SwarmApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmInitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmInit(body: SwarmInitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmInit(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmInit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmInspect(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Swarm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmInspect(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmJoinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmJoin(body: SwarmJoinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmJoin(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmJoin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmLeave(force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmLeave(force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmLeave']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmUnlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmUnlock(body: SwarmUnlockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmUnlock(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmUnlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmUnlockkey(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnlockKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmUnlockkey(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmUnlockkey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a swarm
         * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
         * @param {SwarmSpec} body 
         * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
         * @param {boolean} [rotateManagerToken] Rotate the manager join token.
         * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async swarmUpdate(version: number, body: SwarmSpec, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.swarmUpdate(version, body, rotateWorkerToken, rotateManagerToken, rotateManagerUnlockKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SwarmApi.swarmUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SwarmApi - factory interface
 * @export
 */
export const SwarmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SwarmApiFp(configuration)
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmApiSwarmInitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInit(requestParameters: SwarmApiSwarmInitRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.swarmInit(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInspect(options?: RawAxiosRequestConfig): AxiosPromise<Swarm> {
            return localVarFp.swarmInspect(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmApiSwarmJoinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmJoin(requestParameters: SwarmApiSwarmJoinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.swarmJoin(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {SwarmApiSwarmLeaveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmLeave(requestParameters: SwarmApiSwarmLeaveRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.swarmLeave(requestParameters.force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmApiSwarmUnlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlock(requestParameters: SwarmApiSwarmUnlockRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.swarmUnlock(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlockkey(options?: RawAxiosRequestConfig): AxiosPromise<UnlockKeyResponse> {
            return localVarFp.swarmUnlockkey(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a swarm
         * @param {SwarmApiSwarmUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUpdate(requestParameters: SwarmApiSwarmUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.swarmUpdate(requestParameters.version, requestParameters.body, requestParameters.rotateWorkerToken, requestParameters.rotateManagerToken, requestParameters.rotateManagerUnlockKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for swarmInit operation in SwarmApi.
 * @export
 * @interface SwarmApiSwarmInitRequest
 */
export interface SwarmApiSwarmInitRequest {
    /**
     * 
     * @type {SwarmInitRequest}
     * @memberof SwarmApiSwarmInit
     */
    readonly body: SwarmInitRequest
}

/**
 * Request parameters for swarmJoin operation in SwarmApi.
 * @export
 * @interface SwarmApiSwarmJoinRequest
 */
export interface SwarmApiSwarmJoinRequest {
    /**
     * 
     * @type {SwarmJoinRequest}
     * @memberof SwarmApiSwarmJoin
     */
    readonly body: SwarmJoinRequest
}

/**
 * Request parameters for swarmLeave operation in SwarmApi.
 * @export
 * @interface SwarmApiSwarmLeaveRequest
 */
export interface SwarmApiSwarmLeaveRequest {
    /**
     * Force leave swarm, even if this is the last manager or that it will break the cluster. 
     * @type {boolean}
     * @memberof SwarmApiSwarmLeave
     */
    readonly force?: boolean
}

/**
 * Request parameters for swarmUnlock operation in SwarmApi.
 * @export
 * @interface SwarmApiSwarmUnlockRequest
 */
export interface SwarmApiSwarmUnlockRequest {
    /**
     * 
     * @type {SwarmUnlockRequest}
     * @memberof SwarmApiSwarmUnlock
     */
    readonly body: SwarmUnlockRequest
}

/**
 * Request parameters for swarmUpdate operation in SwarmApi.
 * @export
 * @interface SwarmApiSwarmUpdateRequest
 */
export interface SwarmApiSwarmUpdateRequest {
    /**
     * The version number of the swarm object being updated. This is required to avoid conflicting writes. 
     * @type {number}
     * @memberof SwarmApiSwarmUpdate
     */
    readonly version: number

    /**
     * 
     * @type {SwarmSpec}
     * @memberof SwarmApiSwarmUpdate
     */
    readonly body: SwarmSpec

    /**
     * Rotate the worker join token.
     * @type {boolean}
     * @memberof SwarmApiSwarmUpdate
     */
    readonly rotateWorkerToken?: boolean

    /**
     * Rotate the manager join token.
     * @type {boolean}
     * @memberof SwarmApiSwarmUpdate
     */
    readonly rotateManagerToken?: boolean

    /**
     * Rotate the manager unlock key.
     * @type {boolean}
     * @memberof SwarmApiSwarmUpdate
     */
    readonly rotateManagerUnlockKey?: boolean
}

/**
 * SwarmApi - object-oriented interface
 * @export
 * @class SwarmApi
 * @extends {BaseAPI}
 */
export class SwarmApi extends BaseAPI {
    /**
     * 
     * @summary Initialize a new swarm
     * @param {SwarmApiSwarmInitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmInit(requestParameters: SwarmApiSwarmInitRequest, options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmInit(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect swarm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmInspect(options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmInspect(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join an existing swarm
     * @param {SwarmApiSwarmJoinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmJoin(requestParameters: SwarmApiSwarmJoinRequest, options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmJoin(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave a swarm
     * @param {SwarmApiSwarmLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmLeave(requestParameters: SwarmApiSwarmLeaveRequest = {}, options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmLeave(requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unlock a locked manager
     * @param {SwarmApiSwarmUnlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUnlock(requestParameters: SwarmApiSwarmUnlockRequest, options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmUnlock(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the unlock key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUnlockkey(options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmUnlockkey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a swarm
     * @param {SwarmApiSwarmUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUpdate(requestParameters: SwarmApiSwarmUpdateRequest, options?: RawAxiosRequestConfig) {
        return SwarmApiFp(this.configuration).swarmUpdate(requestParameters.version, requestParameters.body, requestParameters.rotateWorkerToken, requestParameters.rotateManagerToken, requestParameters.rotateManagerUnlockKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {AuthConfig} [authConfig] Authentication to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemAuth: async (authConfig?: AuthConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data usage information
         * @param {Array<SystemDataUsageTypeEnum>} [type] Object types, for which to compute and return data. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDataUsage: async (type?: Array<SystemDataUsageTypeEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system/df`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {string} [since] Show events created since this timestamp then stream new events.
         * @param {string} [until] Show events created until this timestamp then stop streaming.
         * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemEvents: async (since?: string, until?: string, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPing: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/_ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingHead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/_ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersion: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {AuthConfig} [authConfig] Authentication to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemAuth(authConfig?: AuthConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemAuth(authConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get data usage information
         * @param {Array<SystemDataUsageTypeEnum>} [type] Object types, for which to compute and return data. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemDataUsage(type?: Array<SystemDataUsageTypeEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDataUsageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemDataUsage(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemDataUsage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {string} [since] Show events created since this timestamp then stream new events.
         * @param {string} [until] Show events created until this timestamp then stop streaming.
         * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemEvents(since?: string, until?: string, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemEvents(since, until, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPing(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemPing(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemPing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPingHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemPingHead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemPingHead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemVersion(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemVersion(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {SystemApiSystemAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemAuth(requestParameters: SystemApiSystemAuthRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SystemAuthResponse> {
            return localVarFp.systemAuth(requestParameters.authConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data usage information
         * @param {SystemApiSystemDataUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDataUsage(requestParameters: SystemApiSystemDataUsageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SystemDataUsageResponse> {
            return localVarFp.systemDataUsage(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {SystemApiSystemEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemEvents(requestParameters: SystemApiSystemEventsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EventMessage> {
            return localVarFp.systemEvents(requestParameters.since, requestParameters.until, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfo(options?: RawAxiosRequestConfig): AxiosPromise<SystemInfo> {
            return localVarFp.systemInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPing(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.systemPing(options).then((request) => request(axios, basePath));
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingHead(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.systemPingHead(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersion(options?: RawAxiosRequestConfig): AxiosPromise<SystemVersion> {
            return localVarFp.systemVersion(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemAuth operation in SystemApi.
 * @export
 * @interface SystemApiSystemAuthRequest
 */
export interface SystemApiSystemAuthRequest {
    /**
     * Authentication to check
     * @type {AuthConfig}
     * @memberof SystemApiSystemAuth
     */
    readonly authConfig?: AuthConfig
}

/**
 * Request parameters for systemDataUsage operation in SystemApi.
 * @export
 * @interface SystemApiSystemDataUsageRequest
 */
export interface SystemApiSystemDataUsageRequest {
    /**
     * Object types, for which to compute and return data. 
     * @type {Array<'container' | 'image' | 'volume' | 'build-cache'>}
     * @memberof SystemApiSystemDataUsage
     */
    readonly type?: Array<SystemDataUsageTypeEnum>
}

/**
 * Request parameters for systemEvents operation in SystemApi.
 * @export
 * @interface SystemApiSystemEventsRequest
 */
export interface SystemApiSystemEventsRequest {
    /**
     * Show events created since this timestamp then stream new events.
     * @type {string}
     * @memberof SystemApiSystemEvents
     */
    readonly since?: string

    /**
     * Show events created until this timestamp then stop streaming.
     * @type {string}
     * @memberof SystemApiSystemEvents
     */
    readonly until?: string

    /**
     * A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
     * @type {string}
     * @memberof SystemApiSystemEvents
     */
    readonly filters?: string
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
     * @summary Check auth configuration
     * @param {SystemApiSystemAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemAuth(requestParameters: SystemApiSystemAuthRequest = {}, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemAuth(requestParameters.authConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data usage information
     * @param {SystemApiSystemDataUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemDataUsage(requestParameters: SystemApiSystemDataUsageRequest = {}, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemDataUsage(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
     * @summary Monitor events
     * @param {SystemApiSystemEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemEvents(requestParameters: SystemApiSystemEventsRequest = {}, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemEvents(requestParameters.since, requestParameters.until, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemInfo(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemPing(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemPing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemPingHead(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemPingHead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the version of Docker that is running and various information about the system that Docker is running on.
     * @summary Get version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemVersion(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemVersion(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SystemDataUsageTypeEnum = {
    Container: 'container',
    Image: 'image',
    Volume: 'volume',
    BuildCache: 'build-cache'
} as const;
export type SystemDataUsageTypeEnum = typeof SystemDataUsageTypeEnum[keyof typeof SystemDataUsageTypeEnum];


/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {string} id ID of the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInspect: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskInspect', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List tasks
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {string} id ID of the task
         * @param {boolean} [details] Show task context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskLogs: async (id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskLogs', 'id', id)
            const localVarPath = `/tasks/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {string} id ID of the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskInspect(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskInspect(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List tasks
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {string} id ID of the task
         * @param {boolean} [details] Show task context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {TaskApiTaskInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInspect(requestParameters: TaskApiTaskInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Task> {
            return localVarFp.taskInspect(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List tasks
         * @param {TaskApiTaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskList(requestParameters: TaskApiTaskListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Task>> {
            return localVarFp.taskList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {TaskApiTaskLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskLogs(requestParameters: TaskApiTaskLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.taskLogs(requestParameters.id, requestParameters.details, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for taskInspect operation in TaskApi.
 * @export
 * @interface TaskApiTaskInspectRequest
 */
export interface TaskApiTaskInspectRequest {
    /**
     * ID of the task
     * @type {string}
     * @memberof TaskApiTaskInspect
     */
    readonly id: string
}

/**
 * Request parameters for taskList operation in TaskApi.
 * @export
 * @interface TaskApiTaskListRequest
 */
export interface TaskApiTaskListRequest {
    /**
     * A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
     * @type {string}
     * @memberof TaskApiTaskList
     */
    readonly filters?: string
}

/**
 * Request parameters for taskLogs operation in TaskApi.
 * @export
 * @interface TaskApiTaskLogsRequest
 */
export interface TaskApiTaskLogsRequest {
    /**
     * ID of the task
     * @type {string}
     * @memberof TaskApiTaskLogs
     */
    readonly id: string

    /**
     * Show task context and extra details provided to logs.
     * @type {boolean}
     * @memberof TaskApiTaskLogs
     */
    readonly details?: boolean

    /**
     * Keep connection after returning logs.
     * @type {boolean}
     * @memberof TaskApiTaskLogs
     */
    readonly follow?: boolean

    /**
     * Return logs from &#x60;stdout&#x60;
     * @type {boolean}
     * @memberof TaskApiTaskLogs
     */
    readonly stdout?: boolean

    /**
     * Return logs from &#x60;stderr&#x60;
     * @type {boolean}
     * @memberof TaskApiTaskLogs
     */
    readonly stderr?: boolean

    /**
     * Only return logs since this time, as a UNIX timestamp
     * @type {number}
     * @memberof TaskApiTaskLogs
     */
    readonly since?: number

    /**
     * Add timestamps to every log line
     * @type {boolean}
     * @memberof TaskApiTaskLogs
     */
    readonly timestamps?: boolean

    /**
     * Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @type {string}
     * @memberof TaskApiTaskLogs
     */
    readonly tail?: string
}

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @summary Inspect a task
     * @param {TaskApiTaskInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskInspect(requestParameters: TaskApiTaskInspectRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskInspect(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List tasks
     * @param {TaskApiTaskListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskList(requestParameters: TaskApiTaskListRequest = {}, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get task logs
     * @param {TaskApiTaskLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskLogs(requestParameters: TaskApiTaskLogsRequest, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskLogs(requestParameters.id, requestParameters.details, requestParameters.follow, requestParameters.stdout, requestParameters.stderr, requestParameters.since, requestParameters.timestamps, requestParameters.tail, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VolumeApi - axios parameter creator
 * @export
 */
export const VolumeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeCreateOptions} volumeConfig Volume configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreate: async (volumeConfig: VolumeCreateOptions, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'volumeConfig' is not null or undefined
            assertParamExists('volumeCreate', 'volumeConfig', volumeConfig)
            const localVarPath = `/volumes/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(volumeConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {string} name Volume name or ID
         * @param {boolean} [force] Force the removal of the volume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeDelete: async (name: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('volumeDelete', 'name', name)
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {string} name Volume name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeInspect: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('volumeInspect', 'name', name)
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List volumes
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeList: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/volumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumePrune: async (filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/volumes/prune`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {string} name The name or ID of the volume
         * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume\&#39;s &#x60;ClusterVolume&#x60; field. 
         * @param {VolumeUpdateRequest} [body] The spec of the volume to update. Currently, only Availability may change. All other fields must remain unchanged. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeUpdate: async (name: string, version: number, body?: VolumeUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('volumeUpdate', 'name', name)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('volumeUpdate', 'version', version)
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VolumeApi - functional programming interface
 * @export
 */
export const VolumeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VolumeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeCreateOptions} volumeConfig Volume configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeCreate(volumeConfig: VolumeCreateOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeCreate(volumeConfig, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {string} name Volume name or ID
         * @param {boolean} [force] Force the removal of the volume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeDelete(name: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeDelete(name, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {string} name Volume name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeInspect(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeInspect(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumeInspect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List volumes
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeList(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeList(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumePrune(filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumePruneResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumePrune(filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumePrune']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {string} name The name or ID of the volume
         * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume\&#39;s &#x60;ClusterVolume&#x60; field. 
         * @param {VolumeUpdateRequest} [body] The spec of the volume to update. Currently, only Availability may change. All other fields must remain unchanged. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeUpdate(name: string, version: number, body?: VolumeUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeUpdate(name, version, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VolumeApi.volumeUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VolumeApi - factory interface
 * @export
 */
export const VolumeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VolumeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeApiVolumeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreate(requestParameters: VolumeApiVolumeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Volume> {
            return localVarFp.volumeCreate(requestParameters.volumeConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {VolumeApiVolumeDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeDelete(requestParameters: VolumeApiVolumeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.volumeDelete(requestParameters.name, requestParameters.force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {VolumeApiVolumeInspectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeInspect(requestParameters: VolumeApiVolumeInspectRequest, options?: RawAxiosRequestConfig): AxiosPromise<Volume> {
            return localVarFp.volumeInspect(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List volumes
         * @param {VolumeApiVolumeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeList(requestParameters: VolumeApiVolumeListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VolumeListResponse> {
            return localVarFp.volumeList(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {VolumeApiVolumePruneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumePrune(requestParameters: VolumeApiVolumePruneRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VolumePruneResponse> {
            return localVarFp.volumePrune(requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {VolumeApiVolumeUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeUpdate(requestParameters: VolumeApiVolumeUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.volumeUpdate(requestParameters.name, requestParameters.version, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for volumeCreate operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumeCreateRequest
 */
export interface VolumeApiVolumeCreateRequest {
    /**
     * Volume configuration
     * @type {VolumeCreateOptions}
     * @memberof VolumeApiVolumeCreate
     */
    readonly volumeConfig: VolumeCreateOptions
}

/**
 * Request parameters for volumeDelete operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumeDeleteRequest
 */
export interface VolumeApiVolumeDeleteRequest {
    /**
     * Volume name or ID
     * @type {string}
     * @memberof VolumeApiVolumeDelete
     */
    readonly name: string

    /**
     * Force the removal of the volume
     * @type {boolean}
     * @memberof VolumeApiVolumeDelete
     */
    readonly force?: boolean
}

/**
 * Request parameters for volumeInspect operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumeInspectRequest
 */
export interface VolumeApiVolumeInspectRequest {
    /**
     * Volume name or ID
     * @type {string}
     * @memberof VolumeApiVolumeInspect
     */
    readonly name: string
}

/**
 * Request parameters for volumeList operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumeListRequest
 */
export interface VolumeApiVolumeListRequest {
    /**
     * JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
     * @type {string}
     * @memberof VolumeApiVolumeList
     */
    readonly filters?: string
}

/**
 * Request parameters for volumePrune operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumePruneRequest
 */
export interface VolumeApiVolumePruneRequest {
    /**
     * Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
     * @type {string}
     * @memberof VolumeApiVolumePrune
     */
    readonly filters?: string
}

/**
 * Request parameters for volumeUpdate operation in VolumeApi.
 * @export
 * @interface VolumeApiVolumeUpdateRequest
 */
export interface VolumeApiVolumeUpdateRequest {
    /**
     * The name or ID of the volume
     * @type {string}
     * @memberof VolumeApiVolumeUpdate
     */
    readonly name: string

    /**
     * The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume\&#39;s &#x60;ClusterVolume&#x60; field. 
     * @type {number}
     * @memberof VolumeApiVolumeUpdate
     */
    readonly version: number

    /**
     * The spec of the volume to update. Currently, only Availability may change. All other fields must remain unchanged. 
     * @type {VolumeUpdateRequest}
     * @memberof VolumeApiVolumeUpdate
     */
    readonly body?: VolumeUpdateRequest
}

/**
 * VolumeApi - object-oriented interface
 * @export
 * @class VolumeApi
 * @extends {BaseAPI}
 */
export class VolumeApi extends BaseAPI {
    /**
     * 
     * @summary Create a volume
     * @param {VolumeApiVolumeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeCreate(requestParameters: VolumeApiVolumeCreateRequest, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumeCreate(requestParameters.volumeConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Instruct the driver to remove the volume.
     * @summary Remove a volume
     * @param {VolumeApiVolumeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeDelete(requestParameters: VolumeApiVolumeDeleteRequest, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumeDelete(requestParameters.name, requestParameters.force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inspect a volume
     * @param {VolumeApiVolumeInspectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeInspect(requestParameters: VolumeApiVolumeInspectRequest, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumeInspect(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List volumes
     * @param {VolumeApiVolumeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeList(requestParameters: VolumeApiVolumeListRequest = {}, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumeList(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete unused volumes
     * @param {VolumeApiVolumePruneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumePrune(requestParameters: VolumeApiVolumePruneRequest = {}, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumePrune(requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
     * @param {VolumeApiVolumeUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeUpdate(requestParameters: VolumeApiVolumeUpdateRequest, options?: RawAxiosRequestConfig) {
        return VolumeApiFp(this.configuration).volumeUpdate(requestParameters.name, requestParameters.version, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



