/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const VolumesLazyImport = createFileRoute('/volumes')()
const NetworksLazyImport = createFileRoute('/networks')()
const ImagesLazyImport = createFileRoute('/images')()
const ContainersLazyImport = createFileRoute('/containers')()

// Create/Update Routes

const VolumesLazyRoute = VolumesLazyImport.update({
  id: '/volumes',
  path: '/volumes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/volumes.lazy').then((d) => d.Route))

const NetworksLazyRoute = NetworksLazyImport.update({
  id: '/networks',
  path: '/networks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/networks.lazy').then((d) => d.Route))

const ImagesLazyRoute = ImagesLazyImport.update({
  id: '/images',
  path: '/images',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/images.lazy').then((d) => d.Route))

const ContainersLazyRoute = ContainersLazyImport.update({
  id: '/containers',
  path: '/containers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/containers.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/containers': {
      id: '/containers'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersLazyImport
      parentRoute: typeof rootRoute
    }
    '/images': {
      id: '/images'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesLazyImport
      parentRoute: typeof rootRoute
    }
    '/networks': {
      id: '/networks'
      path: '/networks'
      fullPath: '/networks'
      preLoaderRoute: typeof NetworksLazyImport
      parentRoute: typeof rootRoute
    }
    '/volumes': {
      id: '/volumes'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof VolumesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/containers': typeof ContainersLazyRoute
  '/images': typeof ImagesLazyRoute
  '/networks': typeof NetworksLazyRoute
  '/volumes': typeof VolumesLazyRoute
}

export interface FileRoutesByTo {
  '/containers': typeof ContainersLazyRoute
  '/images': typeof ImagesLazyRoute
  '/networks': typeof NetworksLazyRoute
  '/volumes': typeof VolumesLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/containers': typeof ContainersLazyRoute
  '/images': typeof ImagesLazyRoute
  '/networks': typeof NetworksLazyRoute
  '/volumes': typeof VolumesLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/containers' | '/images' | '/networks' | '/volumes'
  fileRoutesByTo: FileRoutesByTo
  to: '/containers' | '/images' | '/networks' | '/volumes'
  id: '__root__' | '/containers' | '/images' | '/networks' | '/volumes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ContainersLazyRoute: typeof ContainersLazyRoute
  ImagesLazyRoute: typeof ImagesLazyRoute
  NetworksLazyRoute: typeof NetworksLazyRoute
  VolumesLazyRoute: typeof VolumesLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  ContainersLazyRoute: ContainersLazyRoute,
  ImagesLazyRoute: ImagesLazyRoute,
  NetworksLazyRoute: NetworksLazyRoute,
  VolumesLazyRoute: VolumesLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/containers",
        "/images",
        "/networks",
        "/volumes"
      ]
    },
    "/containers": {
      "filePath": "containers.lazy.tsx"
    },
    "/images": {
      "filePath": "images.lazy.tsx"
    },
    "/networks": {
      "filePath": "networks.lazy.tsx"
    },
    "/volumes": {
      "filePath": "volumes.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
